// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.3.r96646)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package anfog_dm.dataharvest_rt_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.GeometryUtility;
import routines.Numeric;
import routines.NetCDFUtils;
import routines.GeoOperation;
import routines.DAPUtils;
import routines.Mathematical;
import routines.ArgoUtils;
import routines.Relational;
import routines.TalendDate;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of iIncludeSdiLibraries_1
import org.talend.sdi.geometry.Geometry;

@SuppressWarnings("unused")
/**
 * Job: DataHarvest_RT Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.3.r96646
 * @status 
 */
public class DataHarvest_RT implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (logDir != null) {

				this.setProperty("logDir", logDir.toString());

			}

			if (paramFile != null) {

				this.setProperty("paramFile", paramFile.toString());

			}

			if (metadataDb_RT_Database != null) {

				this.setProperty("metadataDb_RT_Database",
						metadataDb_RT_Database.toString());

			}

			if (metadataDb_RT_Login != null) {

				this.setProperty("metadataDb_RT_Login", metadataDb_RT_Login
						.toString());

			}

			if (metadataDb_RT_Password != null) {

				this.setProperty("metadataDb_RT_Password",
						metadataDb_RT_Password.toString());

			}

			if (metadataDb_RT_Port != null) {

				this.setProperty("metadataDb_RT_Port", metadataDb_RT_Port
						.toString());

			}

			if (metadataDb_RT_Schema != null) {

				this.setProperty("metadataDb_RT_Schema", metadataDb_RT_Schema
						.toString());

			}

			if (metadataDb_RT_Server != null) {

				this.setProperty("metadataDb_RT_Server", metadataDb_RT_Server
						.toString());

			}

			if (exclude != null) {

				this.setProperty("exclude", exclude.toString());

			}

			if (fileId != null) {

				this.setProperty("fileId", fileId.toString());

			}

			if (include != null) {

				this.setProperty("include", include.toString());

			}

			if (sourceDir != null) {

				this.setProperty("sourceDir", sourceDir.toString());

			}

			if (url != null) {

				this.setProperty("url", url.toString());

			}

		}

		public String logDir;

		public String getLogDir() {
			return this.logDir;
		}

		public String paramFile;

		public String getParamFile() {
			return this.paramFile;
		}

		public String metadataDb_RT_Database;

		public String getMetadataDb_RT_Database() {
			return this.metadataDb_RT_Database;
		}

		public String metadataDb_RT_Login;

		public String getMetadataDb_RT_Login() {
			return this.metadataDb_RT_Login;
		}

		public java.lang.String metadataDb_RT_Password;

		public java.lang.String getMetadataDb_RT_Password() {
			return this.metadataDb_RT_Password;
		}

		public String metadataDb_RT_Port;

		public String getMetadataDb_RT_Port() {
			return this.metadataDb_RT_Port;
		}

		public String metadataDb_RT_Schema;

		public String getMetadataDb_RT_Schema() {
			return this.metadataDb_RT_Schema;
		}

		public String metadataDb_RT_Server;

		public String getMetadataDb_RT_Server() {
			return this.metadataDb_RT_Server;
		}

		public String exclude;

		public String getExclude() {
			return this.exclude;
		}

		public Long fileId;

		public Long getFileId() {
			return this.fileId;
		}

		public String include;

		public String getInclude() {
			return this.include;
		}

		public String sourceDir;

		public String getSourceDir() {
			return this.sourceDir;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "DataHarvest_RT";
	private final String projectName = "ANFOG_DM";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					DataHarvest_RT.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(DataHarvest_RT.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void iIncludeSdiLibraries_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iIncludeSdiLibraries_1", System.currentTimeMillis());

		status = "failure";

		iIncludeSdiLibraries_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void iPostgresqlDbUpdate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iPostgresqlDbUpdate_1", System.currentTimeMillis());

		status = "failure";

		iPostgresqlDbUpdate_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		iPostgresqlDbUpdate_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void iNetCDFGlobalAttributes_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iNetCDFGlobalAttributes_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void iNetCDFInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iNetCDFInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void iIncludeSdiLibraries_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void iPostgresqlDbUpdate_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public void iIncludeSdiLibraries_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iIncludeSdiLibraries_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [iIncludeSdiLibraries_1 begin ] start
				 */

				ok_Hash.put("iIncludeSdiLibraries_1", false);
				start_Hash.put("iIncludeSdiLibraries_1", System
						.currentTimeMillis());
				currentComponent = "iIncludeSdiLibraries_1";

				int tos_count_iIncludeSdiLibraries_1 = 0;

				/**
				 * [iIncludeSdiLibraries_1 begin ] stop
				 */
				/**
				 * [iIncludeSdiLibraries_1 main ] start
				 */

				currentComponent = "iIncludeSdiLibraries_1";

				tos_count_iIncludeSdiLibraries_1++;

				/**
				 * [iIncludeSdiLibraries_1 main ] stop
				 */
				/**
				 * [iIncludeSdiLibraries_1 end ] start
				 */

				currentComponent = "iIncludeSdiLibraries_1";

				ok_Hash.put("iIncludeSdiLibraries_1", true);
				end_Hash.put("iIncludeSdiLibraries_1", System
						.currentTimeMillis());

				/**
				 * [iIncludeSdiLibraries_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:iIncludeSdiLibraries_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			iPostgresqlDbUpdate_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iIncludeSdiLibraries_1_SUBPROCESS_STATE", 1);
	}

	public void iPostgresqlDbUpdate_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iPostgresqlDbUpdate_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [iPostgresqlDbUpdate_1 begin ] start
				 */

				int NB_ITERATE_tPostgresqlConnection_1 = 0; // for statistics

				ok_Hash.put("iPostgresqlDbUpdate_1", false);
				start_Hash.put("iPostgresqlDbUpdate_1", System
						.currentTimeMillis());
				currentComponent = "iPostgresqlDbUpdate_1";

				int tos_count_iPostgresqlDbUpdate_1 = 0;
				java.io.File tempFile_iPostgresqlDbUpdate_1 = null;
				java.io.PrintStream out_iPostgresqlDbUpdate_1 = null;
				java.io.File tempDir_iPostgresqlDbUpdate_1 = null;

				try {
					System.out.println("Start of try block");
					tempDir_iPostgresqlDbUpdate_1 = java.io.File
							.createTempFile("talend-temp-", "");
					tempDir_iPostgresqlDbUpdate_1.delete();
					tempDir_iPostgresqlDbUpdate_1.mkdir();

					tempFile_iPostgresqlDbUpdate_1 = new java.io.File(
							tempDir_iPostgresqlDbUpdate_1, "changelog.xml");

					System.out.println("tempFile_cid "
							+ tempFile_iPostgresqlDbUpdate_1);

					out_iPostgresqlDbUpdate_1 = new java.io.PrintStream(
							new java.io.FileOutputStream(
									tempFile_iPostgresqlDbUpdate_1));
					out_iPostgresqlDbUpdate_1
							.print("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"
									+ "<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd\">\n"
									+ "\n"
									+ "    <changeSet author=\"talend\" id=\"1382580250154-7\">\n"
									+ "       <sql>\n"
									+ "       CREATE TABLE deployments\n"
									+ "(\n"
									+ "  deploy_id serial NOT NULL,\n"
									+ "  file_id integer NOT NULL,\n"
									+ "  title character varying(500),\n"
									+ "  time_coverage_start character varying(50),\n"
									+ "  time_coverage_end character varying(50),\n"
									+ "  platform_code character varying(500),\n"
									+ "  cdm_data_type character varying(500),\n"
									+ "  geospatial_lon_max character varying(50),\n"
									+ "  geospatial_lat_min character varying(50),\n"
									+ "  quality_control_set character varying(50),\n"
									+ "  geospatial_vertical_min character varying(50),\n"
									+ "  geospatial_lat_max character varying(50),\n"
									+ "  geospatial_lon_min character varying(50),\n"
									+ "  geospatial_vertical_max character varying(50),\n"
									+ "  CONSTRAINT deployments_pkey PRIMARY KEY (file_id ),\n"
									+ "  CONSTRAINT fk_file_id FOREIGN KEY (file_id)\n"
									+ "      REFERENCES indexed_file (id) MATCH SIMPLE\n"
									+ "      ON UPDATE CASCADE ON DELETE CASCADE\n"
									+ ")\n"
									+ "\n"
									+ "       </sql>\n"
									+ "    </changeSet>\n"
									+ "   \n"
									+ "\n"
									+ "    <changeSet author=\"talend\" id=\"1382580250154-8\">\n"
									+ "       <sql>\n"
									+ "    CREATE TABLE measurements\n"
									+ "(\n"
									+ "  measurement bigserial NOT NULL,\n"
									+ "  file_id integer NOT NULL,\n"
									+ "  \"TIME\" timestamp without time zone,\n"
									+ "  \"LATITUDE\" double precision,\n"
									+ "  \"LONGITUDE\" double precision,\n"
									+ "  \"DEPTH\" real,\n"
									+ "  \"PSAL\" real,\n"
									+ "  \"TEMP\" real,\n"
									+ "  \"DOXY\" real,\n"
									+ "  \"FLU2\" real,\n"
									+ "  \"CDOM\" real,\n"
									+ "  \"UCUR\" real,\n"
									+ "  \"VCUR\" real,\n"
									+ "  \"PRES\" real,\n"
									+ "  \"CNDC\" real, \n"
									+ "  \"DOXY_uncertainty\" real,\n"
									+ "  \"FLU2_uncertainty\" real,\n"
									+ "  \"HEAD\" real,\r\n"
									+ "  \"UCUR_GPS\" real,\n"
									+ " \"VCUR_GPS\" real,\n"
									+ " \"VBSC\" real,\r \"VBSC_uncertainty\" real,\n"
									+ "  \"CDOM_uncertainty\" real,\n"
									+ "  geom geometry,\n"
									+ "  \"TIME_quality_control\" character varying(1),\n"
									+ "  \"LATITUDE_quality_control\" character varying(1),\n"
									+ "  \"LONGITUDE_quality_control\" character varying(1),\n"
									+ "  \"DEPTH_quality_control\" character varying(1),\n"
									+ "  \"PRES_quality_control\" character varying(1),\n"
									+ "  \"PSAL_quality_control\" character varying(1),\n"
									+ "  \"TEMP_quality_control\" character varying(1),\n"
									+ "  \"DOXY_quality_control\" character varying(1),\n"
									+ "  \"FLU2_quality_control\" character varying(1),\n"
									+ "  \"HEAD_quality_control\" character varying(1),\n"
									+ "  \"UCUR_quality_control\" character varying(1),\n"
									+ "  \"VCUR_quality_control\" character varying(1),\n"
									+ "  \"CDOM_quality_control\" character varying(1),\n"
									+ " \"CNDC_quality_control\" character varying(1),\n"
									+ " \"VBSC_quality_control\" character varying(1),\n"
									+ " \"VCUR_GPS_quality_control\" character varying(1),\n"
									+ "  \"UCUR_GPS_quality_control\" character varying(1),\n"
									+ "  CONSTRAINT measurements_pkey PRIMARY KEY (measurement),\n"
									+ "  CONSTRAINT fk_file_id FOREIGN KEY (file_id)\n"
									+ "      REFERENCES indexed_file (id) MATCH SIMPLE\n"
									+ "      ON UPDATE CASCADE ON DELETE CASCADE\n"
									+ ")\n"
									+ "       </sql>\n"
									+ "    </changeSet>\n"
									+ "\n"
									+ "</databaseChangeLog>\n" + "");
					out_iPostgresqlDbUpdate_1.flush();

					String fileName_iPostgresqlDbUpdate_1 = "changelog.xml";
					String basePath_iPostgresqlDbUpdate_1 = tempDir_iPostgresqlDbUpdate_1
							.getAbsolutePath();

					System.out.println("***********************");
					System.out.println("conn host:"
							+ context.metadataDb_RT_Server + ", port:"
							+ context.metadataDb_RT_Port + ", schema:"
							+ context.metadataDb_RT_Schema + ", name:"
							+ context.metadataDb_RT_Database + ", user:"
							+ context.metadataDb_RT_Login);

					String url_iPostgresqlDbUpdate_1 = "jdbc:postgresql://"
							+ context.metadataDb_RT_Server + ":"
							+ context.metadataDb_RT_Port + "/"
							+ context.metadataDb_RT_Database;

					String schema_iPostgresqlDbUpdate_1 = context.metadataDb_RT_Schema;

					String userName_iPostgresqlDbUpdate_1 = context.metadataDb_RT_Login;
					String password_iPostgresqlDbUpdate_1 = context.metadataDb_RT_Password;

					System.out.println("url_cid:" + url_iPostgresqlDbUpdate_1);
					System.out.println("schema_cid:"
							+ schema_iPostgresqlDbUpdate_1);
					System.out.println("userName_cid:"
							+ userName_iPostgresqlDbUpdate_1);

					java.sql.Connection conn_iPostgresqlDbUpdate_1 = null;
					liquibase.Liquibase liquibase_iPostgresqlDbUpdate_1 = null;

					try {
						java.lang.Class.forName("org.postgresql.Driver");
						conn_iPostgresqlDbUpdate_1 = java.sql.DriverManager
								.getConnection(url_iPostgresqlDbUpdate_1,
										userName_iPostgresqlDbUpdate_1,
										password_iPostgresqlDbUpdate_1);
						conn_iPostgresqlDbUpdate_1.setAutoCommit(false);

						liquibase.database.Database database_iPostgresqlDbUpdate_1 = liquibase.database.DatabaseFactory
								.getInstance()
								.findCorrectDatabaseImplementation(
										new liquibase.database.jvm.JdbcConnection(
												conn_iPostgresqlDbUpdate_1));
						database_iPostgresqlDbUpdate_1
								.setDefaultSchemaName(schema_iPostgresqlDbUpdate_1);
						liquibase_iPostgresqlDbUpdate_1 = new liquibase.Liquibase(
								fileName_iPostgresqlDbUpdate_1,
								new liquibase.resource.FileSystemResourceAccessor(
										basePath_iPostgresqlDbUpdate_1),
								database_iPostgresqlDbUpdate_1);

						liquibase_iPostgresqlDbUpdate_1.update(null);
					} finally {
						if (conn_iPostgresqlDbUpdate_1 != null) {
							conn_iPostgresqlDbUpdate_1.rollback();
							conn_iPostgresqlDbUpdate_1.close();
						}
						System.out
								.println("***** completed finally block ***********");
					}

				} finally {
					System.out.println("In finally block");
					if (tempFile_iPostgresqlDbUpdate_1 != null)
						tempFile_iPostgresqlDbUpdate_1.delete();
					if (tempDir_iPostgresqlDbUpdate_1 != null)
						tempDir_iPostgresqlDbUpdate_1.delete();
					if (out_iPostgresqlDbUpdate_1 != null)
						out_iPostgresqlDbUpdate_1.close();
				}

				/**
				 * [iPostgresqlDbUpdate_1 begin ] stop
				 */
				/**
				 * [iPostgresqlDbUpdate_1 main ] start
				 */

				currentComponent = "iPostgresqlDbUpdate_1";

				tos_count_iPostgresqlDbUpdate_1++;

				/**
				 * [iPostgresqlDbUpdate_1 main ] stop
				 */
				NB_ITERATE_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.metadataDb_RT_Server + ":"
						+ context.metadataDb_RT_Port + "/"
						+ context.metadataDb_RT_Database;

				String userName_tPostgresqlConnection_1 = context.metadataDb_RT_Login;

				String password_tPostgresqlConnection_1 = context.metadataDb_RT_Password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								userName_tPostgresqlConnection_1,
								password_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1.setAutoCommit(false);

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.metadataDb_RT_Schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());

				tPostgresqlInput_1Process(globalMap);

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

				/**
				 * [iPostgresqlDbUpdate_1 end ] start
				 */

				currentComponent = "iPostgresqlDbUpdate_1";

				ok_Hash.put("iPostgresqlDbUpdate_1", true);
				end_Hash.put("iPostgresqlDbUpdate_1", System
						.currentTimeMillis());

				/**
				 * [iPostgresqlDbUpdate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iPostgresqlDbUpdate_1_SUBPROCESS_STATE", 1);
	}

	public static class deploymentStruct implements
			routines.system.IPersistableRow<deploymentStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DataHarvest_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[0];

		public int file_id;

		public int getFile_id() {
			return this.file_id;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String time_coverage_start;

		public String getTime_coverage_start() {
			return this.time_coverage_start;
		}

		public String time_coverage_end;

		public String getTime_coverage_end() {
			return this.time_coverage_end;
		}

		public String platform_code;

		public String getPlatform_code() {
			return this.platform_code;
		}

		public String cdm_data_type;

		public String getCdm_data_type() {
			return this.cdm_data_type;
		}

		public String geospatial_lon_max;

		public String getGeospatial_lon_max() {
			return this.geospatial_lon_max;
		}

		public String geospatial_lat_min;

		public String getGeospatial_lat_min() {
			return this.geospatial_lat_min;
		}

		public String geospatial_vertical_min;

		public String getGeospatial_vertical_min() {
			return this.geospatial_vertical_min;
		}

		public String geospatial_lat_max;

		public String getGeospatial_lat_max() {
			return this.geospatial_lat_max;
		}

		public String geospatial_lon_min;

		public String getGeospatial_lon_min() {
			return this.geospatial_lon_min;
		}

		public String geospatial_vertical_max;

		public String getGeospatial_vertical_max() {
			return this.geospatial_vertical_max;
		}

		public String quality_control_set;

		public String getQuality_control_set() {
			return this.quality_control_set;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DataHarvest_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DataHarvest_RT.length == 0) {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DataHarvest_RT, 0,
						length);
				strReturn = new String(commonByteArray_ANFOG_DM_DataHarvest_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DataHarvest_RT) {

				try {

					int length = 0;

					this.file_id = dis.readInt();

					this.title = readString(dis);

					this.time_coverage_start = readString(dis);

					this.time_coverage_end = readString(dis);

					this.platform_code = readString(dis);

					this.cdm_data_type = readString(dis);

					this.geospatial_lon_max = readString(dis);

					this.geospatial_lat_min = readString(dis);

					this.geospatial_vertical_min = readString(dis);

					this.geospatial_lat_max = readString(dis);

					this.geospatial_lon_min = readString(dis);

					this.geospatial_vertical_max = readString(dis);

					this.quality_control_set = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.file_id);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.time_coverage_start, dos);

				// String

				writeString(this.time_coverage_end, dos);

				// String

				writeString(this.platform_code, dos);

				// String

				writeString(this.cdm_data_type, dos);

				// String

				writeString(this.geospatial_lon_max, dos);

				// String

				writeString(this.geospatial_lat_min, dos);

				// String

				writeString(this.geospatial_vertical_min, dos);

				// String

				writeString(this.geospatial_lat_max, dos);

				// String

				writeString(this.geospatial_lon_min, dos);

				// String

				writeString(this.geospatial_vertical_max, dos);

				// String

				writeString(this.quality_control_set, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",title=" + title);
			sb.append(",time_coverage_start=" + time_coverage_start);
			sb.append(",time_coverage_end=" + time_coverage_end);
			sb.append(",platform_code=" + platform_code);
			sb.append(",cdm_data_type=" + cdm_data_type);
			sb.append(",geospatial_lon_max=" + geospatial_lon_max);
			sb.append(",geospatial_lat_min=" + geospatial_lat_min);
			sb.append(",geospatial_vertical_min=" + geospatial_vertical_min);
			sb.append(",geospatial_lat_max=" + geospatial_lat_max);
			sb.append(",geospatial_lon_min=" + geospatial_lon_min);
			sb.append(",geospatial_vertical_max=" + geospatial_vertical_max);
			sb.append(",quality_control_set=" + quality_control_set);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(deploymentStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DataHarvest_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[0];

		public String time_coverage_start;

		public String getTime_coverage_start() {
			return this.time_coverage_start;
		}

		public String time_coverage_end;

		public String getTime_coverage_end() {
			return this.time_coverage_end;
		}

		public String platform_code;

		public String getPlatform_code() {
			return this.platform_code;
		}

		public String cdm_data_type;

		public String getCdm_data_type() {
			return this.cdm_data_type;
		}

		public String geospatial_lon_max;

		public String getGeospatial_lon_max() {
			return this.geospatial_lon_max;
		}

		public String geospatial_lat_min;

		public String getGeospatial_lat_min() {
			return this.geospatial_lat_min;
		}

		public String geospatial_vertical_min;

		public String getGeospatial_vertical_min() {
			return this.geospatial_vertical_min;
		}

		public String geospatial_lat_max;

		public String getGeospatial_lat_max() {
			return this.geospatial_lat_max;
		}

		public String geospatial_lon_min;

		public String getGeospatial_lon_min() {
			return this.geospatial_lon_min;
		}

		public String geospatial_vertical_max;

		public String getGeospatial_vertical_max() {
			return this.geospatial_vertical_max;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String quality_control_set;

		public String getQuality_control_set() {
			return this.quality_control_set;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DataHarvest_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DataHarvest_RT.length == 0) {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DataHarvest_RT, 0,
						length);
				strReturn = new String(commonByteArray_ANFOG_DM_DataHarvest_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DataHarvest_RT) {

				try {

					int length = 0;

					this.time_coverage_start = readString(dis);

					this.time_coverage_end = readString(dis);

					this.platform_code = readString(dis);

					this.cdm_data_type = readString(dis);

					this.geospatial_lon_max = readString(dis);

					this.geospatial_lat_min = readString(dis);

					this.geospatial_vertical_min = readString(dis);

					this.geospatial_lat_max = readString(dis);

					this.geospatial_lon_min = readString(dis);

					this.geospatial_vertical_max = readString(dis);

					this.title = readString(dis);

					this.quality_control_set = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.time_coverage_start, dos);

				// String

				writeString(this.time_coverage_end, dos);

				// String

				writeString(this.platform_code, dos);

				// String

				writeString(this.cdm_data_type, dos);

				// String

				writeString(this.geospatial_lon_max, dos);

				// String

				writeString(this.geospatial_lat_min, dos);

				// String

				writeString(this.geospatial_vertical_min, dos);

				// String

				writeString(this.geospatial_lat_max, dos);

				// String

				writeString(this.geospatial_lon_min, dos);

				// String

				writeString(this.geospatial_vertical_max, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.quality_control_set, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("time_coverage_start=" + time_coverage_start);
			sb.append(",time_coverage_end=" + time_coverage_end);
			sb.append(",platform_code=" + platform_code);
			sb.append(",cdm_data_type=" + cdm_data_type);
			sb.append(",geospatial_lon_max=" + geospatial_lon_max);
			sb.append(",geospatial_lat_min=" + geospatial_lat_min);
			sb.append(",geospatial_vertical_min=" + geospatial_vertical_min);
			sb.append(",geospatial_lat_max=" + geospatial_lat_max);
			sb.append(",geospatial_lon_min=" + geospatial_lon_min);
			sb.append(",geospatial_vertical_max=" + geospatial_vertical_max);
			sb.append(",title=" + title);
			sb.append(",quality_control_set=" + quality_control_set);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class measurementStruct implements
			routines.system.IPersistableRow<measurementStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DataHarvest_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[0];

		public int file_id;

		public int getFile_id() {
			return this.file_id;
		}

		public java.util.Date TIME;

		public java.util.Date getTIME() {
			return this.TIME;
		}

		public Geometry geom;

		public Geometry getGeom() {
			return this.geom;
		}

		public Double LATITUDE;

		public Double getLATITUDE() {
			return this.LATITUDE;
		}

		public Double LONGITUDE;

		public Double getLONGITUDE() {
			return this.LONGITUDE;
		}

		public Float FLU2_uncertainty;

		public Float getFLU2_uncertainty() {
			return this.FLU2_uncertainty;
		}

		public Float UCUR_GPS;

		public Float getUCUR_GPS() {
			return this.UCUR_GPS;
		}

		public Float VCUR_GPS;

		public Float getVCUR_GPS() {
			return this.VCUR_GPS;
		}

		public Float CDOM_uncertainty;

		public Float getCDOM_uncertainty() {
			return this.CDOM_uncertainty;
		}

		public Float DEPTH;

		public Float getDEPTH() {
			return this.DEPTH;
		}

		public Float PRES;

		public Float getPRES() {
			return this.PRES;
		}

		public Float PSAL;

		public Float getPSAL() {
			return this.PSAL;
		}

		public Float TEMP;

		public Float getTEMP() {
			return this.TEMP;
		}

		public Float DOXY;

		public Float getDOXY() {
			return this.DOXY;
		}

		public Float DOXY_uncertainty;

		public Float getDOXY_uncertainty() {
			return this.DOXY_uncertainty;
		}

		public Float FLU2;

		public Float getFLU2() {
			return this.FLU2;
		}

		public Float HEAD;

		public Float getHEAD() {
			return this.HEAD;
		}

		public Float UCUR;

		public Float getUCUR() {
			return this.UCUR;
		}

		public Float VCUR;

		public Float getVCUR() {
			return this.VCUR;
		}

		public Float CDOM;

		public Float getCDOM() {
			return this.CDOM;
		}

		public Float CNDC;

		public Float getCNDC() {
			return this.CNDC;
		}

		public Float VBSC;

		public Float getVBSC() {
			return this.VBSC;
		}

		public Float VBSC_uncertainty;

		public Float getVBSC_uncertainty() {
			return this.VBSC_uncertainty;
		}

		public String TIME_quality_control;

		public String getTIME_quality_control() {
			return this.TIME_quality_control;
		}

		public String LATITUDE_quality_control;

		public String getLATITUDE_quality_control() {
			return this.LATITUDE_quality_control;
		}

		public String LONGITUDE_quality_control;

		public String getLONGITUDE_quality_control() {
			return this.LONGITUDE_quality_control;
		}

		public String DEPTH_quality_control;

		public String getDEPTH_quality_control() {
			return this.DEPTH_quality_control;
		}

		public String PRES_quality_control;

		public String getPRES_quality_control() {
			return this.PRES_quality_control;
		}

		public String PSAL_quality_control;

		public String getPSAL_quality_control() {
			return this.PSAL_quality_control;
		}

		public String TEMP_quality_control;

		public String getTEMP_quality_control() {
			return this.TEMP_quality_control;
		}

		public String DOXY_quality_control;

		public String getDOXY_quality_control() {
			return this.DOXY_quality_control;
		}

		public String FLU2_quality_control;

		public String getFLU2_quality_control() {
			return this.FLU2_quality_control;
		}

		public String HEAD_quality_control;

		public String getHEAD_quality_control() {
			return this.HEAD_quality_control;
		}

		public String UCUR_quality_control;

		public String getUCUR_quality_control() {
			return this.UCUR_quality_control;
		}

		public String VCUR_quality_control;

		public String getVCUR_quality_control() {
			return this.VCUR_quality_control;
		}

		public String CDOM_quality_control;

		public String getCDOM_quality_control() {
			return this.CDOM_quality_control;
		}

		public String UCUR_GPS_quality_control;

		public String getUCUR_GPS_quality_control() {
			return this.UCUR_GPS_quality_control;
		}

		public String VCUR_GPS_quality_control;

		public String getVCUR_GPS_quality_control() {
			return this.VCUR_GPS_quality_control;
		}

		public String CNDC_quality_control;

		public String getCNDC_quality_control() {
			return this.CNDC_quality_control;
		}

		public String VBSC_quality_control;

		public String getVBSC_quality_control() {
			return this.VBSC_quality_control;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DataHarvest_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DataHarvest_RT.length == 0) {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DataHarvest_RT, 0,
						length);
				strReturn = new String(commonByteArray_ANFOG_DM_DataHarvest_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DataHarvest_RT) {

				try {

					int length = 0;

					this.file_id = dis.readInt();

					this.TIME = readDate(dis);

					this.geom = (Geometry) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.LATITUDE = null;
					} else {
						this.LATITUDE = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LONGITUDE = null;
					} else {
						this.LONGITUDE = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FLU2_uncertainty = null;
					} else {
						this.FLU2_uncertainty = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UCUR_GPS = null;
					} else {
						this.UCUR_GPS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VCUR_GPS = null;
					} else {
						this.VCUR_GPS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CDOM_uncertainty = null;
					} else {
						this.CDOM_uncertainty = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DEPTH = null;
					} else {
						this.DEPTH = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRES = null;
					} else {
						this.PRES = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PSAL = null;
					} else {
						this.PSAL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TEMP = null;
					} else {
						this.TEMP = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DOXY = null;
					} else {
						this.DOXY = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DOXY_uncertainty = null;
					} else {
						this.DOXY_uncertainty = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FLU2 = null;
					} else {
						this.FLU2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HEAD = null;
					} else {
						this.HEAD = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UCUR = null;
					} else {
						this.UCUR = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VCUR = null;
					} else {
						this.VCUR = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CDOM = null;
					} else {
						this.CDOM = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CNDC = null;
					} else {
						this.CNDC = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VBSC = null;
					} else {
						this.VBSC = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VBSC_uncertainty = null;
					} else {
						this.VBSC_uncertainty = dis.readFloat();
					}

					this.TIME_quality_control = readString(dis);

					this.LATITUDE_quality_control = readString(dis);

					this.LONGITUDE_quality_control = readString(dis);

					this.DEPTH_quality_control = readString(dis);

					this.PRES_quality_control = readString(dis);

					this.PSAL_quality_control = readString(dis);

					this.TEMP_quality_control = readString(dis);

					this.DOXY_quality_control = readString(dis);

					this.FLU2_quality_control = readString(dis);

					this.HEAD_quality_control = readString(dis);

					this.UCUR_quality_control = readString(dis);

					this.VCUR_quality_control = readString(dis);

					this.CDOM_quality_control = readString(dis);

					this.UCUR_GPS_quality_control = readString(dis);

					this.VCUR_GPS_quality_control = readString(dis);

					this.CNDC_quality_control = readString(dis);

					this.VBSC_quality_control = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.file_id);

				// java.util.Date

				writeDate(this.TIME, dos);

				// Geometry

				dos.writeObject(this.geom);

				// Double

				if (this.LATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.LATITUDE);
				}

				// Double

				if (this.LONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.LONGITUDE);
				}

				// Float

				if (this.FLU2_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FLU2_uncertainty);
				}

				// Float

				if (this.UCUR_GPS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UCUR_GPS);
				}

				// Float

				if (this.VCUR_GPS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VCUR_GPS);
				}

				// Float

				if (this.CDOM_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CDOM_uncertainty);
				}

				// Float

				if (this.DEPTH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DEPTH);
				}

				// Float

				if (this.PRES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRES);
				}

				// Float

				if (this.PSAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PSAL);
				}

				// Float

				if (this.TEMP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TEMP);
				}

				// Float

				if (this.DOXY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DOXY);
				}

				// Float

				if (this.DOXY_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DOXY_uncertainty);
				}

				// Float

				if (this.FLU2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FLU2);
				}

				// Float

				if (this.HEAD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.HEAD);
				}

				// Float

				if (this.UCUR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UCUR);
				}

				// Float

				if (this.VCUR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VCUR);
				}

				// Float

				if (this.CDOM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CDOM);
				}

				// Float

				if (this.CNDC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CNDC);
				}

				// Float

				if (this.VBSC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VBSC);
				}

				// Float

				if (this.VBSC_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VBSC_uncertainty);
				}

				// String

				writeString(this.TIME_quality_control, dos);

				// String

				writeString(this.LATITUDE_quality_control, dos);

				// String

				writeString(this.LONGITUDE_quality_control, dos);

				// String

				writeString(this.DEPTH_quality_control, dos);

				// String

				writeString(this.PRES_quality_control, dos);

				// String

				writeString(this.PSAL_quality_control, dos);

				// String

				writeString(this.TEMP_quality_control, dos);

				// String

				writeString(this.DOXY_quality_control, dos);

				// String

				writeString(this.FLU2_quality_control, dos);

				// String

				writeString(this.HEAD_quality_control, dos);

				// String

				writeString(this.UCUR_quality_control, dos);

				// String

				writeString(this.VCUR_quality_control, dos);

				// String

				writeString(this.CDOM_quality_control, dos);

				// String

				writeString(this.UCUR_GPS_quality_control, dos);

				// String

				writeString(this.VCUR_GPS_quality_control, dos);

				// String

				writeString(this.CNDC_quality_control, dos);

				// String

				writeString(this.VBSC_quality_control, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",TIME=" + String.valueOf(TIME));
			sb.append(",geom=" + String.valueOf(geom));
			sb.append(",LATITUDE=" + String.valueOf(LATITUDE));
			sb.append(",LONGITUDE=" + String.valueOf(LONGITUDE));
			sb.append(",FLU2_uncertainty=" + String.valueOf(FLU2_uncertainty));
			sb.append(",UCUR_GPS=" + String.valueOf(UCUR_GPS));
			sb.append(",VCUR_GPS=" + String.valueOf(VCUR_GPS));
			sb.append(",CDOM_uncertainty=" + String.valueOf(CDOM_uncertainty));
			sb.append(",DEPTH=" + String.valueOf(DEPTH));
			sb.append(",PRES=" + String.valueOf(PRES));
			sb.append(",PSAL=" + String.valueOf(PSAL));
			sb.append(",TEMP=" + String.valueOf(TEMP));
			sb.append(",DOXY=" + String.valueOf(DOXY));
			sb.append(",DOXY_uncertainty=" + String.valueOf(DOXY_uncertainty));
			sb.append(",FLU2=" + String.valueOf(FLU2));
			sb.append(",HEAD=" + String.valueOf(HEAD));
			sb.append(",UCUR=" + String.valueOf(UCUR));
			sb.append(",VCUR=" + String.valueOf(VCUR));
			sb.append(",CDOM=" + String.valueOf(CDOM));
			sb.append(",CNDC=" + String.valueOf(CNDC));
			sb.append(",VBSC=" + String.valueOf(VBSC));
			sb.append(",VBSC_uncertainty=" + String.valueOf(VBSC_uncertainty));
			sb.append(",TIME_quality_control=" + TIME_quality_control);
			sb.append(",LATITUDE_quality_control=" + LATITUDE_quality_control);
			sb.append(",LONGITUDE_quality_control=" + LONGITUDE_quality_control);
			sb.append(",DEPTH_quality_control=" + DEPTH_quality_control);
			sb.append(",PRES_quality_control=" + PRES_quality_control);
			sb.append(",PSAL_quality_control=" + PSAL_quality_control);
			sb.append(",TEMP_quality_control=" + TEMP_quality_control);
			sb.append(",DOXY_quality_control=" + DOXY_quality_control);
			sb.append(",FLU2_quality_control=" + FLU2_quality_control);
			sb.append(",HEAD_quality_control=" + HEAD_quality_control);
			sb.append(",UCUR_quality_control=" + UCUR_quality_control);
			sb.append(",VCUR_quality_control=" + VCUR_quality_control);
			sb.append(",CDOM_quality_control=" + CDOM_quality_control);
			sb.append(",UCUR_GPS_quality_control=" + UCUR_GPS_quality_control);
			sb.append(",VCUR_GPS_quality_control=" + VCUR_GPS_quality_control);
			sb.append(",CNDC_quality_control=" + CNDC_quality_control);
			sb.append(",VBSC_quality_control=" + VBSC_quality_control);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(measurementStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class variablesStruct implements
			routines.system.IPersistableRow<variablesStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DataHarvest_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[0];

		public Double TIME;

		public Double getTIME() {
			return this.TIME;
		}

		public Integer TIME_quality_control;

		public Integer getTIME_quality_control() {
			return this.TIME_quality_control;
		}

		public Double LATITUDE;

		public Double getLATITUDE() {
			return this.LATITUDE;
		}

		public Integer LATITUDE_quality_control;

		public Integer getLATITUDE_quality_control() {
			return this.LATITUDE_quality_control;
		}

		public Double LONGITUDE;

		public Double getLONGITUDE() {
			return this.LONGITUDE;
		}

		public Integer LONGITUDE_quality_control;

		public Integer getLONGITUDE_quality_control() {
			return this.LONGITUDE_quality_control;
		}

		public Float FLU2_uncertainty;

		public Float getFLU2_uncertainty() {
			return this.FLU2_uncertainty;
		}

		public Float UCUR_GPS;

		public Float getUCUR_GPS() {
			return this.UCUR_GPS;
		}

		public Float VCUR_GPS;

		public Float getVCUR_GPS() {
			return this.VCUR_GPS;
		}

		public Float CDOM_uncertainty;

		public Float getCDOM_uncertainty() {
			return this.CDOM_uncertainty;
		}

		public Float DEPTH;

		public Float getDEPTH() {
			return this.DEPTH;
		}

		public Float OCR470_3;

		public Float getOCR470_3() {
			return this.OCR470_3;
		}

		public Integer DEPTH_quality_control;

		public Integer getDEPTH_quality_control() {
			return this.DEPTH_quality_control;
		}

		public Float PRES;

		public Float getPRES() {
			return this.PRES;
		}

		public Integer PRES_quality_control;

		public Integer getPRES_quality_control() {
			return this.PRES_quality_control;
		}

		public Float PSAL;

		public Float getPSAL() {
			return this.PSAL;
		}

		public Integer PSAL_quality_control;

		public Integer getPSAL_quality_control() {
			return this.PSAL_quality_control;
		}

		public Float TEMP;

		public Float getTEMP() {
			return this.TEMP;
		}

		public Integer TEMP_quality_control;

		public Integer getTEMP_quality_control() {
			return this.TEMP_quality_control;
		}

		public Float DOXY;

		public Float getDOXY() {
			return this.DOXY;
		}

		public Integer DOXY_quality_control;

		public Integer getDOXY_quality_control() {
			return this.DOXY_quality_control;
		}

		public Float DOXY_uncertainty;

		public Float getDOXY_uncertainty() {
			return this.DOXY_uncertainty;
		}

		public Float FLU2;

		public Float getFLU2() {
			return this.FLU2;
		}

		public Integer FLU2_quality_control;

		public Integer getFLU2_quality_control() {
			return this.FLU2_quality_control;
		}

		public Float HEAD;

		public Float getHEAD() {
			return this.HEAD;
		}

		public Integer HEAD_quality_control;

		public Integer getHEAD_quality_control() {
			return this.HEAD_quality_control;
		}

		public Float UCUR;

		public Float getUCUR() {
			return this.UCUR;
		}

		public Integer UCUR_GPS_quality_control;

		public Integer getUCUR_GPS_quality_control() {
			return this.UCUR_GPS_quality_control;
		}

		public Integer UCUR_quality_control;

		public Integer getUCUR_quality_control() {
			return this.UCUR_quality_control;
		}

		public Float VCUR;

		public Float getVCUR() {
			return this.VCUR;
		}

		public Integer VCUR_GPS_quality_control;

		public Integer getVCUR_GPS_quality_control() {
			return this.VCUR_GPS_quality_control;
		}

		public Integer VCUR_quality_control;

		public Integer getVCUR_quality_control() {
			return this.VCUR_quality_control;
		}

		public Float CDOM;

		public Float getCDOM() {
			return this.CDOM;
		}

		public Integer CDOM_quality_control;

		public Integer getCDOM_quality_control() {
			return this.CDOM_quality_control;
		}

		public Float CNDC;

		public Float getCNDC() {
			return this.CNDC;
		}

		public Float VBSC;

		public Float getVBSC() {
			return this.VBSC;
		}

		public Integer CNDC_quality_control;

		public Integer getCNDC_quality_control() {
			return this.CNDC_quality_control;
		}

		public Float VBSC_uncertainty;

		public Float getVBSC_uncertainty() {
			return this.VBSC_uncertainty;
		}

		public Integer VBSC_quality_control;

		public Integer getVBSC_quality_control() {
			return this.VBSC_quality_control;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DataHarvest_RT) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.TIME = null;
					} else {
						this.TIME = dis.readDouble();
					}

					this.TIME_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LATITUDE = null;
					} else {
						this.LATITUDE = dis.readDouble();
					}

					this.LATITUDE_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LONGITUDE = null;
					} else {
						this.LONGITUDE = dis.readDouble();
					}

					this.LONGITUDE_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FLU2_uncertainty = null;
					} else {
						this.FLU2_uncertainty = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UCUR_GPS = null;
					} else {
						this.UCUR_GPS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VCUR_GPS = null;
					} else {
						this.VCUR_GPS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CDOM_uncertainty = null;
					} else {
						this.CDOM_uncertainty = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DEPTH = null;
					} else {
						this.DEPTH = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.OCR470_3 = null;
					} else {
						this.OCR470_3 = dis.readFloat();
					}

					this.DEPTH_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRES = null;
					} else {
						this.PRES = dis.readFloat();
					}

					this.PRES_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PSAL = null;
					} else {
						this.PSAL = dis.readFloat();
					}

					this.PSAL_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TEMP = null;
					} else {
						this.TEMP = dis.readFloat();
					}

					this.TEMP_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DOXY = null;
					} else {
						this.DOXY = dis.readFloat();
					}

					this.DOXY_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DOXY_uncertainty = null;
					} else {
						this.DOXY_uncertainty = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FLU2 = null;
					} else {
						this.FLU2 = dis.readFloat();
					}

					this.FLU2_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.HEAD = null;
					} else {
						this.HEAD = dis.readFloat();
					}

					this.HEAD_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.UCUR = null;
					} else {
						this.UCUR = dis.readFloat();
					}

					this.UCUR_GPS_quality_control = readInteger(dis);

					this.UCUR_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VCUR = null;
					} else {
						this.VCUR = dis.readFloat();
					}

					this.VCUR_GPS_quality_control = readInteger(dis);

					this.VCUR_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CDOM = null;
					} else {
						this.CDOM = dis.readFloat();
					}

					this.CDOM_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CNDC = null;
					} else {
						this.CNDC = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VBSC = null;
					} else {
						this.VBSC = dis.readFloat();
					}

					this.CNDC_quality_control = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VBSC_uncertainty = null;
					} else {
						this.VBSC_uncertainty = dis.readFloat();
					}

					this.VBSC_quality_control = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.TIME == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TIME);
				}

				// Integer

				writeInteger(this.TIME_quality_control, dos);

				// Double

				if (this.LATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.LATITUDE);
				}

				// Integer

				writeInteger(this.LATITUDE_quality_control, dos);

				// Double

				if (this.LONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.LONGITUDE);
				}

				// Integer

				writeInteger(this.LONGITUDE_quality_control, dos);

				// Float

				if (this.FLU2_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FLU2_uncertainty);
				}

				// Float

				if (this.UCUR_GPS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UCUR_GPS);
				}

				// Float

				if (this.VCUR_GPS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VCUR_GPS);
				}

				// Float

				if (this.CDOM_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CDOM_uncertainty);
				}

				// Float

				if (this.DEPTH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DEPTH);
				}

				// Float

				if (this.OCR470_3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.OCR470_3);
				}

				// Integer

				writeInteger(this.DEPTH_quality_control, dos);

				// Float

				if (this.PRES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRES);
				}

				// Integer

				writeInteger(this.PRES_quality_control, dos);

				// Float

				if (this.PSAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PSAL);
				}

				// Integer

				writeInteger(this.PSAL_quality_control, dos);

				// Float

				if (this.TEMP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TEMP);
				}

				// Integer

				writeInteger(this.TEMP_quality_control, dos);

				// Float

				if (this.DOXY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DOXY);
				}

				// Integer

				writeInteger(this.DOXY_quality_control, dos);

				// Float

				if (this.DOXY_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DOXY_uncertainty);
				}

				// Float

				if (this.FLU2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FLU2);
				}

				// Integer

				writeInteger(this.FLU2_quality_control, dos);

				// Float

				if (this.HEAD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.HEAD);
				}

				// Integer

				writeInteger(this.HEAD_quality_control, dos);

				// Float

				if (this.UCUR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UCUR);
				}

				// Integer

				writeInteger(this.UCUR_GPS_quality_control, dos);

				// Integer

				writeInteger(this.UCUR_quality_control, dos);

				// Float

				if (this.VCUR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VCUR);
				}

				// Integer

				writeInteger(this.VCUR_GPS_quality_control, dos);

				// Integer

				writeInteger(this.VCUR_quality_control, dos);

				// Float

				if (this.CDOM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CDOM);
				}

				// Integer

				writeInteger(this.CDOM_quality_control, dos);

				// Float

				if (this.CNDC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CNDC);
				}

				// Float

				if (this.VBSC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VBSC);
				}

				// Integer

				writeInteger(this.CNDC_quality_control, dos);

				// Float

				if (this.VBSC_uncertainty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.VBSC_uncertainty);
				}

				// Integer

				writeInteger(this.VBSC_quality_control, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TIME=" + String.valueOf(TIME));
			sb.append(",TIME_quality_control="
					+ String.valueOf(TIME_quality_control));
			sb.append(",LATITUDE=" + String.valueOf(LATITUDE));
			sb.append(",LATITUDE_quality_control="
					+ String.valueOf(LATITUDE_quality_control));
			sb.append(",LONGITUDE=" + String.valueOf(LONGITUDE));
			sb.append(",LONGITUDE_quality_control="
					+ String.valueOf(LONGITUDE_quality_control));
			sb.append(",FLU2_uncertainty=" + String.valueOf(FLU2_uncertainty));
			sb.append(",UCUR_GPS=" + String.valueOf(UCUR_GPS));
			sb.append(",VCUR_GPS=" + String.valueOf(VCUR_GPS));
			sb.append(",CDOM_uncertainty=" + String.valueOf(CDOM_uncertainty));
			sb.append(",DEPTH=" + String.valueOf(DEPTH));
			sb.append(",OCR470_3=" + String.valueOf(OCR470_3));
			sb.append(",DEPTH_quality_control="
					+ String.valueOf(DEPTH_quality_control));
			sb.append(",PRES=" + String.valueOf(PRES));
			sb.append(",PRES_quality_control="
					+ String.valueOf(PRES_quality_control));
			sb.append(",PSAL=" + String.valueOf(PSAL));
			sb.append(",PSAL_quality_control="
					+ String.valueOf(PSAL_quality_control));
			sb.append(",TEMP=" + String.valueOf(TEMP));
			sb.append(",TEMP_quality_control="
					+ String.valueOf(TEMP_quality_control));
			sb.append(",DOXY=" + String.valueOf(DOXY));
			sb.append(",DOXY_quality_control="
					+ String.valueOf(DOXY_quality_control));
			sb.append(",DOXY_uncertainty=" + String.valueOf(DOXY_uncertainty));
			sb.append(",FLU2=" + String.valueOf(FLU2));
			sb.append(",FLU2_quality_control="
					+ String.valueOf(FLU2_quality_control));
			sb.append(",HEAD=" + String.valueOf(HEAD));
			sb.append(",HEAD_quality_control="
					+ String.valueOf(HEAD_quality_control));
			sb.append(",UCUR=" + String.valueOf(UCUR));
			sb.append(",UCUR_GPS_quality_control="
					+ String.valueOf(UCUR_GPS_quality_control));
			sb.append(",UCUR_quality_control="
					+ String.valueOf(UCUR_quality_control));
			sb.append(",VCUR=" + String.valueOf(VCUR));
			sb.append(",VCUR_GPS_quality_control="
					+ String.valueOf(VCUR_GPS_quality_control));
			sb.append(",VCUR_quality_control="
					+ String.valueOf(VCUR_quality_control));
			sb.append(",CDOM=" + String.valueOf(CDOM));
			sb.append(",CDOM_quality_control="
					+ String.valueOf(CDOM_quality_control));
			sb.append(",CNDC=" + String.valueOf(CNDC));
			sb.append(",VBSC=" + String.valueOf(VBSC));
			sb.append(",CNDC_quality_control="
					+ String.valueOf(CNDC_quality_control));
			sb.append(",VBSC_uncertainty=" + String.valueOf(VBSC_uncertainty));
			sb.append(",VBSC_quality_control="
					+ String.valueOf(VBSC_quality_control));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(variablesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fileToprocessStruct implements
			routines.system.IPersistableRow<fileToprocessStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_DataHarvest_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fileToprocessStruct other = (fileToprocessStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(fileToprocessStruct other) {

			other.id = this.id;
			other.url = this.url;

		}

		public void copyKeysDataTo(fileToprocessStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_DataHarvest_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_DataHarvest_RT.length == 0) {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_DataHarvest_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_DataHarvest_RT, 0,
						length);
				strReturn = new String(commonByteArray_ANFOG_DM_DataHarvest_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_DataHarvest_RT) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.url = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.url, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",url=" + url);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fileToprocessStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fileToprocessStruct fileToprocess = new fileToprocessStruct();
				row1Struct row1 = new row1Struct();
				deploymentStruct deployment = new deploymentStruct();
				variablesStruct variables = new variablesStruct();
				measurementStruct measurement = new measurementStruct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_iNetCDFGlobalAttributes_1 = 0; // for statistics
				int NB_ITERATE_iNetCDFInput_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT DISTINCT id,url FROM indexed_file where id NOT IN (SELECT DISTINCT file_id from deployments) ;";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					if (colQtyInRs_tPostgresqlInput_1 < 1) {
						fileToprocess.id = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(1) != null) {
							fileToprocess.id = rs_tPostgresqlInput_1.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 2) {
						fileToprocess.url = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(2);
						if (tmpContent_tPostgresqlInput_1 != null) {
							fileToprocess.url = tmpContent_tPostgresqlInput_1;
						} else {
							fileToprocess.url = null;
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tFlowToIterate_1 main ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("fileToprocess.id", fileToprocess.id);
					nb_line_tFlowToIterate_1++;
					globalMap.put("fileToprocess.url", fileToprocess.url);
					nb_line_tFlowToIterate_1++;

					tos_count_tFlowToIterate_1++;

					/**
					 * [tFlowToIterate_1 main ] stop
					 */
					NB_ITERATE_iNetCDFGlobalAttributes_1++;

					/**
					 * [tDBOutput_1 begin ] start
					 */

					ok_Hash.put("tDBOutput_1", false);
					start_Hash.put("tDBOutput_1", System
							.currentTimeMillis());
					currentComponent = "tDBOutput_1";

					int tos_count_tDBOutput_1 = 0;

					String dbschema_tDBOutput_1 = null;
					dbschema_tDBOutput_1 = (String) globalMap
							.get("schema_" + "tPostgresqlConnection_1");

					String tableName_tDBOutput_1 = null;
					if (dbschema_tDBOutput_1 == null
							|| dbschema_tDBOutput_1.trim().length() == 0) {
						tableName_tDBOutput_1 = "deployments";
					} else {
						tableName_tDBOutput_1 = dbschema_tDBOutput_1
								+ "\".\"" + "deployments";
					}

					int nb_line_tDBOutput_1 = 0;
					int nb_line_update_tDBOutput_1 = 0;
					int nb_line_inserted_tDBOutput_1 = 0;
					int nb_line_deleted_tDBOutput_1 = 0;
					int nb_line_rejected_tDBOutput_1 = 0;

					int deletedCount_tDBOutput_1 = 0;
					int updatedCount_tDBOutput_1 = 0;
					int insertedCount_tDBOutput_1 = 0;
					int rejectedCount_tDBOutput_1 = 0;

					boolean whetherReject_tDBOutput_1 = false;

					java.sql.Connection conn_tDBOutput_1 = null;
					conn_tDBOutput_1 = (java.sql.Connection) globalMap
							.get("conn_tPostgresqlConnection_1");

					int batchSize_tDBOutput_1 = 10000;
					int batchSizeCounter_tDBOutput_1 = 0;

					int count_tDBOutput_1 = 0;
					String insert_tDBOutput_1 = "INSERT INTO \""
							+ tableName_tDBOutput_1
							+ "\" (\"file_id\",\"title\",\"time_coverage_start\",\"time_coverage_end\",\"platform_code\",\"cdm_data_type\",\"geospatial_lon_max\",\"geospatial_lat_min\",\"geospatial_vertical_min\",\"geospatial_lat_max\",\"geospatial_lon_min\",\"geospatial_vertical_max\",\"quality_control_set\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
					java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
							.prepareStatement(insert_tDBOutput_1);

					/**
					 * [tDBOutput_1 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					deploymentStruct deployment_tmp = new deploymentStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [iNetCDFGlobalAttributes_1 begin ] start
					 */

					ok_Hash.put("iNetCDFGlobalAttributes_1", false);
					start_Hash.put("iNetCDFGlobalAttributes_1", System
							.currentTimeMillis());
					currentComponent = "iNetCDFGlobalAttributes_1";

					int tos_count_iNetCDFGlobalAttributes_1 = 0;

					int nbLine_iNetCDFGlobalAttributes_1 = 0;
					String filename_iNetCDFGlobalAttributes_1 = ((String) globalMap
							.get("fileToprocess.url"));
					ucar.nc2.NetcdfFile ncfile_iNetCDFGlobalAttributes_1 = null;

					try {
						ncfile_iNetCDFGlobalAttributes_1 = ucar.nc2.dataset.NetcdfDataset
								.openDataset(filename_iNetCDFGlobalAttributes_1);

						/**
						 * [iNetCDFGlobalAttributes_1 begin ] stop
						 */
						/**
						 * [iNetCDFGlobalAttributes_1 main ] start
						 */

						currentComponent = "iNetCDFGlobalAttributes_1";

						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_0 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("time_coverage_start");

						if (attribute_iNetCDFGlobalAttributes_1_0 != null) {
							row1.time_coverage_start = attribute_iNetCDFGlobalAttributes_1_0
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_1 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("time_coverage_end");

						if (attribute_iNetCDFGlobalAttributes_1_1 != null) {
							row1.time_coverage_end = attribute_iNetCDFGlobalAttributes_1_1
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_2 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("platform_code");

						if (attribute_iNetCDFGlobalAttributes_1_2 != null) {
							row1.platform_code = attribute_iNetCDFGlobalAttributes_1_2
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_3 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("cdm_data_type");

						if (attribute_iNetCDFGlobalAttributes_1_3 != null) {
							row1.cdm_data_type = attribute_iNetCDFGlobalAttributes_1_3
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_4 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("geospatial_lon_max");

						if (attribute_iNetCDFGlobalAttributes_1_4 != null) {
							row1.geospatial_lon_max = attribute_iNetCDFGlobalAttributes_1_4
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_5 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("geospatial_lat_min");

						if (attribute_iNetCDFGlobalAttributes_1_5 != null) {
							row1.geospatial_lat_min = attribute_iNetCDFGlobalAttributes_1_5
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_6 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("geospatial_vertical_min");

						if (attribute_iNetCDFGlobalAttributes_1_6 != null) {
							row1.geospatial_vertical_min = attribute_iNetCDFGlobalAttributes_1_6
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_7 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("geospatial_lat_max");

						if (attribute_iNetCDFGlobalAttributes_1_7 != null) {
							row1.geospatial_lat_max = attribute_iNetCDFGlobalAttributes_1_7
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_8 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("geospatial_lon_min");

						if (attribute_iNetCDFGlobalAttributes_1_8 != null) {
							row1.geospatial_lon_min = attribute_iNetCDFGlobalAttributes_1_8
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_9 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("geospatial_vertical_max");

						if (attribute_iNetCDFGlobalAttributes_1_9 != null) {
							row1.geospatial_vertical_max = attribute_iNetCDFGlobalAttributes_1_9
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_10 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("title");

						if (attribute_iNetCDFGlobalAttributes_1_10 != null) {
							row1.title = attribute_iNetCDFGlobalAttributes_1_10
									.getValue(0).toString();
						}
						ucar.nc2.Attribute attribute_iNetCDFGlobalAttributes_1_11 = ncfile_iNetCDFGlobalAttributes_1
								.findGlobalAttribute("quality_control_set");

						if (attribute_iNetCDFGlobalAttributes_1_11 != null) {
							row1.quality_control_set = attribute_iNetCDFGlobalAttributes_1_11
									.getValue(0).toString();
						}

						tos_count_iNetCDFGlobalAttributes_1++;

						/**
						 * [iNetCDFGlobalAttributes_1 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							deployment = null;

							// # Output table : 'deployment'
							deployment_tmp.file_id = ((Integer) globalMap
									.get("fileToprocess.id"));
							deployment_tmp.title = row1.title;
							deployment_tmp.time_coverage_start = row1.time_coverage_start;
							deployment_tmp.time_coverage_end = row1.time_coverage_end;
							deployment_tmp.platform_code = row1.platform_code;
							deployment_tmp.cdm_data_type = row1.cdm_data_type;
							deployment_tmp.geospatial_lon_max = row1.geospatial_lon_max;
							deployment_tmp.geospatial_lat_min = row1.geospatial_lat_min;
							deployment_tmp.geospatial_vertical_min = row1.geospatial_vertical_min;
							deployment_tmp.geospatial_lat_max = row1.geospatial_lat_max;
							deployment_tmp.geospatial_lon_min = row1.geospatial_lon_min;
							deployment_tmp.geospatial_vertical_max = row1.geospatial_vertical_max;
							deployment_tmp.quality_control_set = row1.quality_control_set;
							deployment = deployment_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "deployment"
						if (deployment != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							whetherReject_tDBOutput_1 = false;
							pstmt_tDBOutput_1.setInt(1,
									deployment.file_id);

							if (deployment.title == null) {
								pstmt_tDBOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2,
										deployment.title);
							}

							if (deployment.time_coverage_start == null) {
								pstmt_tDBOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(3,
										deployment.time_coverage_start);
							}

							if (deployment.time_coverage_end == null) {
								pstmt_tDBOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(4,
										deployment.time_coverage_end);
							}

							if (deployment.platform_code == null) {
								pstmt_tDBOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(5,
										deployment.platform_code);
							}

							if (deployment.cdm_data_type == null) {
								pstmt_tDBOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(6,
										deployment.cdm_data_type);
							}

							if (deployment.geospatial_lon_max == null) {
								pstmt_tDBOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(7,
										deployment.geospatial_lon_max);
							}

							if (deployment.geospatial_lat_min == null) {
								pstmt_tDBOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(8,
										deployment.geospatial_lat_min);
							}

							if (deployment.geospatial_vertical_min == null) {
								pstmt_tDBOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(9,
										deployment.geospatial_vertical_min);
							}

							if (deployment.geospatial_lat_max == null) {
								pstmt_tDBOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(10,
										deployment.geospatial_lat_max);
							}

							if (deployment.geospatial_lon_min == null) {
								pstmt_tDBOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(11,
										deployment.geospatial_lon_min);
							}

							if (deployment.geospatial_vertical_max == null) {
								pstmt_tDBOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(12,
										deployment.geospatial_vertical_max);
							}

							if (deployment.quality_control_set == null) {
								pstmt_tDBOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(13,
										deployment.quality_control_set);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;

							if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
								try {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e) {

									System.err
											.println("Contents of BatchUpdateException:");
									System.err.println(" Update counts: ");
									int[] updateCounts = e.getUpdateCounts();
									for (int i = 0; i < updateCounts.length; i++) {
										System.err.println("  Statement " + i
												+ ":" + updateCounts[i]);
									}

									java.sql.SQLException se = e;
									do {
										System.err.println("SQL exception:");
										System.err.println(" Message: "
												+ se.getMessage());
										System.err.println(" SQLSTATE: "
												+ se.getSQLState());
										System.err.println(" Error code: "
												+ se.getErrorCode());
										se = se.getNextException();
									} while (se != null);

									throw (e);

								}

							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

						} // End of branch "deployment"

						/**
						 * [iNetCDFGlobalAttributes_1 end ] start
						 */

						currentComponent = "iNetCDFGlobalAttributes_1";

						nbLine_iNetCDFGlobalAttributes_1++;
					} catch (Exception e) {
						System.out.println("Error: ");
						e.printStackTrace();
					} finally {
						if (null != ncfile_iNetCDFGlobalAttributes_1)
							try {
								ncfile_iNetCDFGlobalAttributes_1.close();
							} catch (Exception e) {
								System.out.println("Error: ");
								e.printStackTrace();
							}
					}
					globalMap.put("iNetCDFGlobalAttributes_1_NB_LINE",
							nbLine_iNetCDFGlobalAttributes_1);

					ok_Hash.put("iNetCDFGlobalAttributes_1", true);
					end_Hash.put("iNetCDFGlobalAttributes_1", System
							.currentTimeMillis());

					/**
					 * [iNetCDFGlobalAttributes_1 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tDBOutput_1 end ] start
					 */

					currentComponent = "tDBOutput_1";

					try {
						int countSum_tDBOutput_1 = 0;
						if (pstmt_tDBOutput_1 != null) {
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
									.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
										: countEach_tDBOutput_1);
							}
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					} catch (java.sql.BatchUpdateException e) {

						System.err.println("Contents of BatchUpdateException:");
						System.err.println(" Update counts: ");
						int[] updateCounts = e.getUpdateCounts();
						for (int i = 0; i < updateCounts.length; i++) {
							System.err.println("  Statement " + i + ":"
									+ updateCounts[i]);
						}

						java.sql.SQLException se = e;
						do {
							System.err.println("SQL exception:");
							System.err.println(" Message: " + se.getMessage());
							System.err
									.println(" SQLSTATE: " + se.getSQLState());
							System.err.println(" Error code: "
									+ se.getErrorCode());
							se = se.getNextException();
						} while (se != null);

						throw (e);

					}

					if (pstmt_tDBOutput_1 != null) {

						pstmt_tDBOutput_1.close();

					}

					nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
							+ deletedCount_tDBOutput_1;
					nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
							+ updatedCount_tDBOutput_1;
					nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
							+ insertedCount_tDBOutput_1;
					nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
							+ rejectedCount_tDBOutput_1;

					globalMap.put("tDBOutput_1_NB_LINE",
							nb_line_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
							nb_line_update_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
							nb_line_inserted_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_DELETED",
							nb_line_deleted_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
							nb_line_rejected_tDBOutput_1);

					ok_Hash.put("tDBOutput_1", true);
					end_Hash.put("tDBOutput_1", System
							.currentTimeMillis());

					/**
					 * [tDBOutput_1 end ] stop
					 */

					NB_ITERATE_iNetCDFInput_1++;

					/**
					 * [tDBOutput_2 begin ] start
					 */

					ok_Hash.put("tDBOutput_2", false);
					start_Hash.put("tDBOutput_2", System
							.currentTimeMillis());
					currentComponent = "tDBOutput_2";

					int tos_count_tDBOutput_2 = 0;

					String dbschema_tDBOutput_2 = null;
					dbschema_tDBOutput_2 = (String) globalMap
							.get("schema_" + "tPostgresqlConnection_1");

					String tableName_tDBOutput_2 = null;
					if (dbschema_tDBOutput_2 == null
							|| dbschema_tDBOutput_2.trim().length() == 0) {
						tableName_tDBOutput_2 = "measurements";
					} else {
						tableName_tDBOutput_2 = dbschema_tDBOutput_2
								+ "\".\"" + "measurements";
					}

					int nb_line_tDBOutput_2 = 0;
					int nb_line_update_tDBOutput_2 = 0;
					int nb_line_inserted_tDBOutput_2 = 0;
					int nb_line_deleted_tDBOutput_2 = 0;
					int nb_line_rejected_tDBOutput_2 = 0;

					int deletedCount_tDBOutput_2 = 0;
					int updatedCount_tDBOutput_2 = 0;
					int insertedCount_tDBOutput_2 = 0;
					int rejectedCount_tDBOutput_2 = 0;

					boolean whetherReject_tDBOutput_2 = false;

					java.sql.Connection conn_tDBOutput_2 = null;
					conn_tDBOutput_2 = (java.sql.Connection) globalMap
							.get("conn_tPostgresqlConnection_1");

					int batchSize_tDBOutput_2 = 10000;
					int batchSizeCounter_tDBOutput_2 = 0;

					int count_tDBOutput_2 = 0;
					String insert_tDBOutput_2 = "INSERT INTO \""
							+ tableName_tDBOutput_2
							+ "\" (\"file_id\",\"TIME\",\"geom\",\"LATITUDE\",\"LONGITUDE\",\"FLU2_uncertainty\",\"UCUR_GPS\",\"VCUR_GPS\",\"CDOM_uncertainty\",\"DEPTH\",\"PRES\",\"PSAL\",\"TEMP\",\"DOXY\",\"DOXY_uncertainty\",\"FLU2\",\"HEAD\",\"UCUR\",\"VCUR\",\"CDOM\",\"CNDC\",\"VBSC\",\"VBSC_uncertainty\",\"TIME_quality_control\",\"LATITUDE_quality_control\",\"LONGITUDE_quality_control\",\"DEPTH_quality_control\",\"PRES_quality_control\",\"PSAL_quality_control\",\"TEMP_quality_control\",\"DOXY_quality_control\",\"FLU2_quality_control\",\"HEAD_quality_control\",\"UCUR_quality_control\",\"VCUR_quality_control\",\"CDOM_quality_control\",\"UCUR_GPS_quality_control\",\"VCUR_GPS_quality_control\",\"CNDC_quality_control\",\"VBSC_quality_control\") VALUES (?,?,GeomFromText(?, ?),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
					java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
							.prepareStatement(insert_tDBOutput_2);

					/**
					 * [tDBOutput_2 begin ] stop
					 */

					/**
					 * [tMap_3 begin ] start
					 */

					ok_Hash.put("tMap_3", false);
					start_Hash.put("tMap_3", System.currentTimeMillis());
					currentComponent = "tMap_3";

					int tos_count_tMap_3 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_3__Struct {
						String TIME_quality_control;
						String LATITUDE_quality_control;
						String LONGITUDE_quality_control;
						String DEPTH_quality_control;
						String PRES_quality_control;
						String PSAL_quality_control;
						String TEMP_quality_control;
						String DOXY_quality_control;
						String FLU2_quality_control;
						String HEAD_quality_control;
						String UCUR_quality_control;
						String VCUR_quality_control;
						String CDOM_quality_control;
						String UCUR_GPS_quality_control;
						String VCUR_GPS_quality_control;
						String CNDC_quality_control;
						String VBSC_quality_control;
					}
					Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					measurementStruct measurement_tmp = new measurementStruct();
					// ###############################

					/**
					 * [tMap_3 begin ] stop
					 */

					/**
					 * [iNetCDFInput_1 begin ] start
					 */

					ok_Hash.put("iNetCDFInput_1", false);
					start_Hash
							.put("iNetCDFInput_1", System.currentTimeMillis());
					currentComponent = "iNetCDFInput_1";

					int tos_count_iNetCDFInput_1 = 0;

					java.util.Map<String, String> columnNameMapping_iNetCDFInput_1 = new java.util.LinkedHashMap<String, String>();
					java.util.Map<String, String> columnTypeMapping_iNetCDFInput_1 = new java.util.LinkedHashMap<String, String>();

					if ("TIME" != null && !"TIME".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("TIME", "TIME");
						columnTypeMapping_iNetCDFInput_1
								.put("TIME", "VARIABLE");
					}

					if ("TIME_quality_control" != null
							&& !"TIME_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"TIME_quality_control", "TIME_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"TIME_quality_control", "VARIABLE");
					}

					if ("LATITUDE" != null && !"LATITUDE".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("LATITUDE",
								"LATITUDE");
						columnTypeMapping_iNetCDFInput_1.put("LATITUDE",
								"VARIABLE");
					}

					if ("LATITUDE_quality_control" != null
							&& !"LATITUDE_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"LATITUDE_quality_control",
								"LATITUDE_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"LATITUDE_quality_control", "VARIABLE");
					}

					if ("LONGITUDE" != null && !"LONGITUDE".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("LONGITUDE",
								"LONGITUDE");
						columnTypeMapping_iNetCDFInput_1.put("LONGITUDE",
								"VARIABLE");
					}

					if ("LONGITUDE_quality_control" != null
							&& !"LONGITUDE_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"LONGITUDE_quality_control",
								"LONGITUDE_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"LONGITUDE_quality_control", "VARIABLE");
					}

					if ("FLU2_uncertainty" != null
							&& !"FLU2_uncertainty".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"FLU2_uncertainty", "FLU2_uncertainty");
						columnTypeMapping_iNetCDFInput_1.put(
								"FLU2_uncertainty", "VARIABLE");
					}

					if ("UCUR_GPS" != null && !"UCUR_GPS".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("UCUR_GPS",
								"UCUR_GPS");
						columnTypeMapping_iNetCDFInput_1.put("UCUR_GPS",
								"VARIABLE");
					}

					if ("VCUR_GPS" != null && !"VCUR_GPS".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("VCUR_GPS",
								"VCUR_GPS");
						columnTypeMapping_iNetCDFInput_1.put("VCUR_GPS",
								"VARIABLE");
					}

					if ("CDOM_uncertainty" != null
							&& !"CDOM_uncertainty".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"CDOM_uncertainty", "CDOM_uncertainty");
						columnTypeMapping_iNetCDFInput_1.put(
								"CDOM_uncertainty", "VARIABLE");
					}

					if ("DEPTH" != null && !"DEPTH".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("DEPTH", "DEPTH");
						columnTypeMapping_iNetCDFInput_1.put("DEPTH",
								"VARIABLE");
					}

					if ("OCR470_3" != null && !"OCR470_3".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("OCR470_3",
								"OCR470_3");
						columnTypeMapping_iNetCDFInput_1.put("OCR470_3",
								"VARIABLE");
					}

					if ("DEPTH_quality_control" != null
							&& !"DEPTH_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"DEPTH_quality_control",
								"DEPTH_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"DEPTH_quality_control", "VARIABLE");
					}

					if ("PRES" != null && !"PRES".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("PRES", "PRES");
						columnTypeMapping_iNetCDFInput_1
								.put("PRES", "VARIABLE");
					}

					if ("PRES_quality_control" != null
							&& !"PRES_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"PRES_quality_control", "PRES_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"PRES_quality_control", "VARIABLE");
					}

					if ("PSAL" != null && !"PSAL".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("PSAL", "PSAL");
						columnTypeMapping_iNetCDFInput_1
								.put("PSAL", "VARIABLE");
					}

					if ("PSAL_quality_control" != null
							&& !"PSAL_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"PSAL_quality_control", "PSAL_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"PSAL_quality_control", "VARIABLE");
					}

					if ("TEMP" != null && !"TEMP".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("TEMP", "TEMP");
						columnTypeMapping_iNetCDFInput_1
								.put("TEMP", "VARIABLE");
					}

					if ("TEMP_quality_control" != null
							&& !"TEMP_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"TEMP_quality_control", "TEMP_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"TEMP_quality_control", "VARIABLE");
					}

					if ("DOXY" != null && !"DOXY".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("DOXY", "DOXY");
						columnTypeMapping_iNetCDFInput_1
								.put("DOXY", "VARIABLE");
					}

					if ("DOXY_quality_control" != null
							&& !"DOXY_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"DOXY_quality_control", "DOXY_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"DOXY_quality_control", "VARIABLE");
					}

					if ("DOXY_uncertainty" != null
							&& !"DOXY_uncertainty".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"DOXY_uncertainty", "DOXY_uncertainty");
						columnTypeMapping_iNetCDFInput_1.put(
								"DOXY_uncertainty", "VARIABLE");
					}

					if ("FLU2" != null && !"FLU2".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("FLU2", "FLU2");
						columnTypeMapping_iNetCDFInput_1
								.put("FLU2", "VARIABLE");
					}

					if ("FLU2_quality_control" != null
							&& !"FLU2_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"FLU2_quality_control", "FLU2_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"FLU2_quality_control", "VARIABLE");
					}

					if ("HEAD" != null && !"HEAD".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("HEAD", "HEAD");
						columnTypeMapping_iNetCDFInput_1
								.put("HEAD", "VARIABLE");
					}

					if ("HEAD_quality_control" != null
							&& !"HEAD_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"HEAD_quality_control", "HEAD_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"HEAD_quality_control", "VARIABLE");
					}

					if ("UCUR" != null && !"UCUR".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("UCUR", "UCUR");
						columnTypeMapping_iNetCDFInput_1
								.put("UCUR", "VARIABLE");
					}

					if ("UCUR_GPS_quality_control" != null
							&& !"UCUR_GPS_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"UCUR_GPS_quality_control",
								"UCUR_GPS_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"UCUR_GPS_quality_control", "VARIABLE");
					}

					if ("UCUR_quality_control" != null
							&& !"UCUR_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"UCUR_quality_control", "UCUR_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"UCUR_quality_control", "VARIABLE");
					}

					if ("VCUR" != null && !"VCUR".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("VCUR", "VCUR");
						columnTypeMapping_iNetCDFInput_1
								.put("VCUR", "VARIABLE");
					}

					if ("VCUR_GPS_quality_control" != null
							&& !"VCUR_GPS_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"VCUR_GPS_quality_control",
								"VCUR_GPS_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"VCUR_GPS_quality_control", "VARIABLE");
					}

					if ("VCUR_quality_control" != null
							&& !"VCUR_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"VCUR_quality_control", "VCUR_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"VCUR_quality_control", "VARIABLE");
					}

					if ("CDOM" != null && !"CDOM".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("CDOM", "CDOM");
						columnTypeMapping_iNetCDFInput_1
								.put("CDOM", "VARIABLE");
					}

					if ("CDOM_quality_control" != null
							&& !"CDOM_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"CDOM_quality_control", "CDOM_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"CDOM_quality_control", "VARIABLE");
					}

					if ("CNDC" != null && !"CNDC".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("CNDC", "CNDC");
						columnTypeMapping_iNetCDFInput_1
								.put("CNDC", "VARIABLE");
					}

					if ("VBSC" != null && !"VBSC".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put("VBSC", "VBSC");
						columnTypeMapping_iNetCDFInput_1
								.put("VBSC", "VARIABLE");
					}

					if ("CNDC_quality_control" != null
							&& !"CNDC_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"CNDC_quality_control", "CNDC_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"CNDC_quality_control", "VARIABLE");
					}

					if ("VBSC_uncertainty" != null
							&& !"VBSC_uncertainty".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"VBSC_uncertainty", "VBSC_uncertainty");
						columnTypeMapping_iNetCDFInput_1.put(
								"VBSC_uncertainty", "VARIABLE");
					}

					if ("VBSC_quality_control" != null
							&& !"VBSC_quality_control".trim().equals("")) {
						columnNameMapping_iNetCDFInput_1.put(
								"VBSC_quality_control", "VBSC_quality_control");
						columnTypeMapping_iNetCDFInput_1.put(
								"VBSC_quality_control", "VARIABLE");
					}

					int nbFeature_iNetCDFInput_1 = 0;

					String filename_iNetCDFInput_1 = ((String) globalMap
							.get("fileToprocess.url"));

					boolean error_iNetCDFInput_1 = false;
					String errorTrace_iNetCDFInput_1 = "";
					ucar.nc2.dataset.NetcdfDataset.setFillValueIsMissing(true);
					ucar.nc2.dataset.NetcdfDataset
							.setInvalidDataIsMissing(false);
					ucar.nc2.dataset.NetcdfDataset
							.setMissingDataIsMissing(true);
					ucar.nc2.dataset.NetcdfDataset.setUseNaNs(false);

					ucar.nc2.dataset.NetcdfDataset ncDataset_iNetCDFInput_1 = null;

					try {
						java.util.Set<ucar.nc2.dataset.NetcdfDataset.Enhance> enhanceMode_iNetCDFInput_1 = new java.util.HashSet<ucar.nc2.dataset.NetcdfDataset.Enhance>();
						enhanceMode_iNetCDFInput_1
								.add(ucar.nc2.dataset.NetcdfDataset.Enhance.ScaleMissing);
						enhanceMode_iNetCDFInput_1
								.add(ucar.nc2.dataset.NetcdfDataset.Enhance.ConvertEnums);

						ncDataset_iNetCDFInput_1 = ucar.nc2.dataset.NetcdfDataset
								.openDataset(filename_iNetCDFInput_1,
										enhanceMode_iNetCDFInput_1, 0, null,
										null);

						// Create readers for each variable. Readers return the
						// value of the variable for particular index values

						java.util.Map<String, au.org.emii.talend.dap.reader.NetcdfReader> readers_iNetCDFInput_1 = new java.util.LinkedHashMap<String, au.org.emii.talend.dap.reader.NetcdfReader>();

						for (java.util.Map.Entry<String, String> typeMapping : columnTypeMapping_iNetCDFInput_1
								.entrySet()) {
							if (typeMapping.getValue().equals("VARIABLE")) {
								String name = columnNameMapping_iNetCDFInput_1
										.get(typeMapping.getKey());
								ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
										.findVariable(name);
								if (variable != null) {
									readers_iNetCDFInput_1
											.put(
													name,
													new au.org.emii.talend.dap.reader.NetcdfReader(
															variable));
								}
							}
						}

						java.util.Map<String, java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>>> connIterators_iNetCDFInput_1 = new java.util.LinkedHashMap<String, java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>>>();

						au.org.emii.talend.dap.IndexRangesBuilder indexRangesBuilder_iNetCDFInput_1;

						indexRangesBuilder_iNetCDFInput_1 = new au.org.emii.talend.dap.IndexRangesBuilder();

						String iNetCDFInput_1_name_variables_TIME = columnNameMapping_iNetCDFInput_1
								.get("TIME");
						String iNetCDFInput_1_type_variables_TIME = columnTypeMapping_iNetCDFInput_1
								.get("TIME");

						if (iNetCDFInput_1_type_variables_TIME
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_TIME != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_TIME);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_TIME_quality_control = columnNameMapping_iNetCDFInput_1
								.get("TIME_quality_control");
						String iNetCDFInput_1_type_variables_TIME_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("TIME_quality_control");

						if (iNetCDFInput_1_type_variables_TIME_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_TIME_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_TIME_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_LATITUDE = columnNameMapping_iNetCDFInput_1
								.get("LATITUDE");
						String iNetCDFInput_1_type_variables_LATITUDE = columnTypeMapping_iNetCDFInput_1
								.get("LATITUDE");

						if (iNetCDFInput_1_type_variables_LATITUDE
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_LATITUDE != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_LATITUDE);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_LATITUDE_quality_control = columnNameMapping_iNetCDFInput_1
								.get("LATITUDE_quality_control");
						String iNetCDFInput_1_type_variables_LATITUDE_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("LATITUDE_quality_control");

						if (iNetCDFInput_1_type_variables_LATITUDE_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_LATITUDE_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_LATITUDE_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_LONGITUDE = columnNameMapping_iNetCDFInput_1
								.get("LONGITUDE");
						String iNetCDFInput_1_type_variables_LONGITUDE = columnTypeMapping_iNetCDFInput_1
								.get("LONGITUDE");

						if (iNetCDFInput_1_type_variables_LONGITUDE
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_LONGITUDE != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_LONGITUDE);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_LONGITUDE_quality_control = columnNameMapping_iNetCDFInput_1
								.get("LONGITUDE_quality_control");
						String iNetCDFInput_1_type_variables_LONGITUDE_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("LONGITUDE_quality_control");

						if (iNetCDFInput_1_type_variables_LONGITUDE_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_LONGITUDE_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_LONGITUDE_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_FLU2_uncertainty = columnNameMapping_iNetCDFInput_1
								.get("FLU2_uncertainty");
						String iNetCDFInput_1_type_variables_FLU2_uncertainty = columnTypeMapping_iNetCDFInput_1
								.get("FLU2_uncertainty");

						if (iNetCDFInput_1_type_variables_FLU2_uncertainty
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_FLU2_uncertainty != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_FLU2_uncertainty);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_UCUR_GPS = columnNameMapping_iNetCDFInput_1
								.get("UCUR_GPS");
						String iNetCDFInput_1_type_variables_UCUR_GPS = columnTypeMapping_iNetCDFInput_1
								.get("UCUR_GPS");

						if (iNetCDFInput_1_type_variables_UCUR_GPS
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_UCUR_GPS != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_UCUR_GPS);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VCUR_GPS = columnNameMapping_iNetCDFInput_1
								.get("VCUR_GPS");
						String iNetCDFInput_1_type_variables_VCUR_GPS = columnTypeMapping_iNetCDFInput_1
								.get("VCUR_GPS");

						if (iNetCDFInput_1_type_variables_VCUR_GPS
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VCUR_GPS != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VCUR_GPS);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_CDOM_uncertainty = columnNameMapping_iNetCDFInput_1
								.get("CDOM_uncertainty");
						String iNetCDFInput_1_type_variables_CDOM_uncertainty = columnTypeMapping_iNetCDFInput_1
								.get("CDOM_uncertainty");

						if (iNetCDFInput_1_type_variables_CDOM_uncertainty
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_CDOM_uncertainty != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_CDOM_uncertainty);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_DEPTH = columnNameMapping_iNetCDFInput_1
								.get("DEPTH");
						String iNetCDFInput_1_type_variables_DEPTH = columnTypeMapping_iNetCDFInput_1
								.get("DEPTH");

						if (iNetCDFInput_1_type_variables_DEPTH
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_DEPTH != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_DEPTH);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_OCR470_3 = columnNameMapping_iNetCDFInput_1
								.get("OCR470_3");
						String iNetCDFInput_1_type_variables_OCR470_3 = columnTypeMapping_iNetCDFInput_1
								.get("OCR470_3");

						if (iNetCDFInput_1_type_variables_OCR470_3
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_OCR470_3 != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_OCR470_3);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_DEPTH_quality_control = columnNameMapping_iNetCDFInput_1
								.get("DEPTH_quality_control");
						String iNetCDFInput_1_type_variables_DEPTH_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("DEPTH_quality_control");

						if (iNetCDFInput_1_type_variables_DEPTH_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_DEPTH_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_DEPTH_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_PRES = columnNameMapping_iNetCDFInput_1
								.get("PRES");
						String iNetCDFInput_1_type_variables_PRES = columnTypeMapping_iNetCDFInput_1
								.get("PRES");

						if (iNetCDFInput_1_type_variables_PRES
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_PRES != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_PRES);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_PRES_quality_control = columnNameMapping_iNetCDFInput_1
								.get("PRES_quality_control");
						String iNetCDFInput_1_type_variables_PRES_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("PRES_quality_control");

						if (iNetCDFInput_1_type_variables_PRES_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_PRES_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_PRES_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_PSAL = columnNameMapping_iNetCDFInput_1
								.get("PSAL");
						String iNetCDFInput_1_type_variables_PSAL = columnTypeMapping_iNetCDFInput_1
								.get("PSAL");

						if (iNetCDFInput_1_type_variables_PSAL
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_PSAL != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_PSAL);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_PSAL_quality_control = columnNameMapping_iNetCDFInput_1
								.get("PSAL_quality_control");
						String iNetCDFInput_1_type_variables_PSAL_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("PSAL_quality_control");

						if (iNetCDFInput_1_type_variables_PSAL_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_PSAL_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_PSAL_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_TEMP = columnNameMapping_iNetCDFInput_1
								.get("TEMP");
						String iNetCDFInput_1_type_variables_TEMP = columnTypeMapping_iNetCDFInput_1
								.get("TEMP");

						if (iNetCDFInput_1_type_variables_TEMP
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_TEMP != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_TEMP);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_TEMP_quality_control = columnNameMapping_iNetCDFInput_1
								.get("TEMP_quality_control");
						String iNetCDFInput_1_type_variables_TEMP_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("TEMP_quality_control");

						if (iNetCDFInput_1_type_variables_TEMP_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_TEMP_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_TEMP_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_DOXY = columnNameMapping_iNetCDFInput_1
								.get("DOXY");
						String iNetCDFInput_1_type_variables_DOXY = columnTypeMapping_iNetCDFInput_1
								.get("DOXY");

						if (iNetCDFInput_1_type_variables_DOXY
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_DOXY != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_DOXY);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_DOXY_quality_control = columnNameMapping_iNetCDFInput_1
								.get("DOXY_quality_control");
						String iNetCDFInput_1_type_variables_DOXY_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("DOXY_quality_control");

						if (iNetCDFInput_1_type_variables_DOXY_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_DOXY_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_DOXY_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_DOXY_uncertainty = columnNameMapping_iNetCDFInput_1
								.get("DOXY_uncertainty");
						String iNetCDFInput_1_type_variables_DOXY_uncertainty = columnTypeMapping_iNetCDFInput_1
								.get("DOXY_uncertainty");

						if (iNetCDFInput_1_type_variables_DOXY_uncertainty
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_DOXY_uncertainty != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_DOXY_uncertainty);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_FLU2 = columnNameMapping_iNetCDFInput_1
								.get("FLU2");
						String iNetCDFInput_1_type_variables_FLU2 = columnTypeMapping_iNetCDFInput_1
								.get("FLU2");

						if (iNetCDFInput_1_type_variables_FLU2
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_FLU2 != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_FLU2);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_FLU2_quality_control = columnNameMapping_iNetCDFInput_1
								.get("FLU2_quality_control");
						String iNetCDFInput_1_type_variables_FLU2_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("FLU2_quality_control");

						if (iNetCDFInput_1_type_variables_FLU2_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_FLU2_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_FLU2_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_HEAD = columnNameMapping_iNetCDFInput_1
								.get("HEAD");
						String iNetCDFInput_1_type_variables_HEAD = columnTypeMapping_iNetCDFInput_1
								.get("HEAD");

						if (iNetCDFInput_1_type_variables_HEAD
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_HEAD != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_HEAD);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_HEAD_quality_control = columnNameMapping_iNetCDFInput_1
								.get("HEAD_quality_control");
						String iNetCDFInput_1_type_variables_HEAD_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("HEAD_quality_control");

						if (iNetCDFInput_1_type_variables_HEAD_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_HEAD_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_HEAD_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_UCUR = columnNameMapping_iNetCDFInput_1
								.get("UCUR");
						String iNetCDFInput_1_type_variables_UCUR = columnTypeMapping_iNetCDFInput_1
								.get("UCUR");

						if (iNetCDFInput_1_type_variables_UCUR
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_UCUR != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_UCUR);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_UCUR_GPS_quality_control = columnNameMapping_iNetCDFInput_1
								.get("UCUR_GPS_quality_control");
						String iNetCDFInput_1_type_variables_UCUR_GPS_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("UCUR_GPS_quality_control");

						if (iNetCDFInput_1_type_variables_UCUR_GPS_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_UCUR_GPS_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_UCUR_GPS_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_UCUR_quality_control = columnNameMapping_iNetCDFInput_1
								.get("UCUR_quality_control");
						String iNetCDFInput_1_type_variables_UCUR_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("UCUR_quality_control");

						if (iNetCDFInput_1_type_variables_UCUR_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_UCUR_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_UCUR_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VCUR = columnNameMapping_iNetCDFInput_1
								.get("VCUR");
						String iNetCDFInput_1_type_variables_VCUR = columnTypeMapping_iNetCDFInput_1
								.get("VCUR");

						if (iNetCDFInput_1_type_variables_VCUR
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VCUR != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VCUR);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VCUR_GPS_quality_control = columnNameMapping_iNetCDFInput_1
								.get("VCUR_GPS_quality_control");
						String iNetCDFInput_1_type_variables_VCUR_GPS_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("VCUR_GPS_quality_control");

						if (iNetCDFInput_1_type_variables_VCUR_GPS_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VCUR_GPS_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VCUR_GPS_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VCUR_quality_control = columnNameMapping_iNetCDFInput_1
								.get("VCUR_quality_control");
						String iNetCDFInput_1_type_variables_VCUR_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("VCUR_quality_control");

						if (iNetCDFInput_1_type_variables_VCUR_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VCUR_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VCUR_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_CDOM = columnNameMapping_iNetCDFInput_1
								.get("CDOM");
						String iNetCDFInput_1_type_variables_CDOM = columnTypeMapping_iNetCDFInput_1
								.get("CDOM");

						if (iNetCDFInput_1_type_variables_CDOM
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_CDOM != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_CDOM);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_CDOM_quality_control = columnNameMapping_iNetCDFInput_1
								.get("CDOM_quality_control");
						String iNetCDFInput_1_type_variables_CDOM_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("CDOM_quality_control");

						if (iNetCDFInput_1_type_variables_CDOM_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_CDOM_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_CDOM_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_CNDC = columnNameMapping_iNetCDFInput_1
								.get("CNDC");
						String iNetCDFInput_1_type_variables_CNDC = columnTypeMapping_iNetCDFInput_1
								.get("CNDC");

						if (iNetCDFInput_1_type_variables_CNDC
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_CNDC != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_CNDC);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VBSC = columnNameMapping_iNetCDFInput_1
								.get("VBSC");
						String iNetCDFInput_1_type_variables_VBSC = columnTypeMapping_iNetCDFInput_1
								.get("VBSC");

						if (iNetCDFInput_1_type_variables_VBSC
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VBSC != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VBSC);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_CNDC_quality_control = columnNameMapping_iNetCDFInput_1
								.get("CNDC_quality_control");
						String iNetCDFInput_1_type_variables_CNDC_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("CNDC_quality_control");

						if (iNetCDFInput_1_type_variables_CNDC_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_CNDC_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_CNDC_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VBSC_uncertainty = columnNameMapping_iNetCDFInput_1
								.get("VBSC_uncertainty");
						String iNetCDFInput_1_type_variables_VBSC_uncertainty = columnTypeMapping_iNetCDFInput_1
								.get("VBSC_uncertainty");

						if (iNetCDFInput_1_type_variables_VBSC_uncertainty
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VBSC_uncertainty != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VBSC_uncertainty);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}
						String iNetCDFInput_1_name_variables_VBSC_quality_control = columnNameMapping_iNetCDFInput_1
								.get("VBSC_quality_control");
						String iNetCDFInput_1_type_variables_VBSC_quality_control = columnTypeMapping_iNetCDFInput_1
								.get("VBSC_quality_control");

						if (iNetCDFInput_1_type_variables_VBSC_quality_control
								.equals("VARIABLE")
								&& iNetCDFInput_1_name_variables_VBSC_quality_control != null) {
							ucar.nc2.Variable variable = ncDataset_iNetCDFInput_1
									.findVariable(iNetCDFInput_1_name_variables_VBSC_quality_control);
							if (variable != null) {
								indexRangesBuilder_iNetCDFInput_1
										.addDimensions(variable);
							}
						}

						connIterators_iNetCDFInput_1
								.put("variables",
										indexRangesBuilder_iNetCDFInput_1
												.getIterator());

						for (String connName_iNetCDFInput_1 : connIterators_iNetCDFInput_1
								.keySet()) {
							java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>> connIterator_iNetCDFInput_1 = connIterators_iNetCDFInput_1
									.get(connName_iNetCDFInput_1);

							while (connIterator_iNetCDFInput_1.hasNext()) {
								java.util.Set<au.org.emii.talend.dap.IndexValue> indexValues_iNetCDFInput_1 = connIterator_iNetCDFInput_1
										.next();

								/**
								 * [iNetCDFInput_1 begin ] stop
								 */
								/**
								 * [iNetCDFInput_1 main ] start
								 */

								currentComponent = "iNetCDFInput_1";

								if (connName_iNetCDFInput_1.equals("variables")) {
									variables = new variablesStruct();
									String iNetCDFInput_1_name_TIME = columnNameMapping_iNetCDFInput_1
											.get("TIME");
									String iNetCDFInput_1_type_TIME = columnTypeMapping_iNetCDFInput_1
											.get("TIME");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_TIME = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_TIME);

									if (iNetCDFInput_1_name_TIME == null
											|| (iNetCDFInput_1_type_TIME
													.equals("VARIABLE") && reader_iNetCDFInput_1_TIME == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_TIME
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_TIME);

										if (variable
												.isMissing(reader_iNetCDFInput_1_TIME
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.TIME = null;
										} else {
											variables.TIME = new Double(
													reader_iNetCDFInput_1_TIME
															.getDouble(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_TIME)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_TIME_quality_control = columnNameMapping_iNetCDFInput_1
											.get("TIME_quality_control");
									String iNetCDFInput_1_type_TIME_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("TIME_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_TIME_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_TIME_quality_control);

									if (iNetCDFInput_1_name_TIME_quality_control == null
											|| (iNetCDFInput_1_type_TIME_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_TIME_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_TIME_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_TIME_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_TIME_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.TIME_quality_control = null;
										} else {
											variables.TIME_quality_control = new Integer(
													reader_iNetCDFInput_1_TIME_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_TIME_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.TIME_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_LATITUDE = columnNameMapping_iNetCDFInput_1
											.get("LATITUDE");
									String iNetCDFInput_1_type_LATITUDE = columnTypeMapping_iNetCDFInput_1
											.get("LATITUDE");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_LATITUDE = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_LATITUDE);

									if (iNetCDFInput_1_name_LATITUDE == null
											|| (iNetCDFInput_1_type_LATITUDE
													.equals("VARIABLE") && reader_iNetCDFInput_1_LATITUDE == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_LATITUDE
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_LATITUDE);

										if (variable
												.isMissing(reader_iNetCDFInput_1_LATITUDE
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.LATITUDE = null;
										} else {
											variables.LATITUDE = new Double(
													reader_iNetCDFInput_1_LATITUDE
															.getDouble(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_LATITUDE)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_LATITUDE_quality_control = columnNameMapping_iNetCDFInput_1
											.get("LATITUDE_quality_control");
									String iNetCDFInput_1_type_LATITUDE_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("LATITUDE_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_LATITUDE_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_LATITUDE_quality_control);

									if (iNetCDFInput_1_name_LATITUDE_quality_control == null
											|| (iNetCDFInput_1_type_LATITUDE_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_LATITUDE_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_LATITUDE_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_LATITUDE_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_LATITUDE_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.LATITUDE_quality_control = null;
										} else {
											variables.LATITUDE_quality_control = new Integer(
													reader_iNetCDFInput_1_LATITUDE_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_LATITUDE_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.LATITUDE_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_LONGITUDE = columnNameMapping_iNetCDFInput_1
											.get("LONGITUDE");
									String iNetCDFInput_1_type_LONGITUDE = columnTypeMapping_iNetCDFInput_1
											.get("LONGITUDE");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_LONGITUDE = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_LONGITUDE);

									if (iNetCDFInput_1_name_LONGITUDE == null
											|| (iNetCDFInput_1_type_LONGITUDE
													.equals("VARIABLE") && reader_iNetCDFInput_1_LONGITUDE == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_LONGITUDE
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_LONGITUDE);

										if (variable
												.isMissing(reader_iNetCDFInput_1_LONGITUDE
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.LONGITUDE = null;
										} else {
											variables.LONGITUDE = new Double(
													reader_iNetCDFInput_1_LONGITUDE
															.getDouble(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_LONGITUDE)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_LONGITUDE_quality_control = columnNameMapping_iNetCDFInput_1
											.get("LONGITUDE_quality_control");
									String iNetCDFInput_1_type_LONGITUDE_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("LONGITUDE_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_LONGITUDE_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_LONGITUDE_quality_control);

									if (iNetCDFInput_1_name_LONGITUDE_quality_control == null
											|| (iNetCDFInput_1_type_LONGITUDE_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_LONGITUDE_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_LONGITUDE_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_LONGITUDE_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_LONGITUDE_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.LONGITUDE_quality_control = null;
										} else {
											variables.LONGITUDE_quality_control = new Integer(
													reader_iNetCDFInput_1_LONGITUDE_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_LONGITUDE_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.LONGITUDE_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_FLU2_uncertainty = columnNameMapping_iNetCDFInput_1
											.get("FLU2_uncertainty");
									String iNetCDFInput_1_type_FLU2_uncertainty = columnTypeMapping_iNetCDFInput_1
											.get("FLU2_uncertainty");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_FLU2_uncertainty = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_FLU2_uncertainty);

									if (iNetCDFInput_1_name_FLU2_uncertainty == null
											|| (iNetCDFInput_1_type_FLU2_uncertainty
													.equals("VARIABLE") && reader_iNetCDFInput_1_FLU2_uncertainty == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_FLU2_uncertainty
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_FLU2_uncertainty);

										if (variable
												.isMissing(reader_iNetCDFInput_1_FLU2_uncertainty
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.FLU2_uncertainty = null;
										} else {
											variables.FLU2_uncertainty = new Float(
													reader_iNetCDFInput_1_FLU2_uncertainty
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_FLU2_uncertainty)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_UCUR_GPS = columnNameMapping_iNetCDFInput_1
											.get("UCUR_GPS");
									String iNetCDFInput_1_type_UCUR_GPS = columnTypeMapping_iNetCDFInput_1
											.get("UCUR_GPS");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_UCUR_GPS = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_UCUR_GPS);

									if (iNetCDFInput_1_name_UCUR_GPS == null
											|| (iNetCDFInput_1_type_UCUR_GPS
													.equals("VARIABLE") && reader_iNetCDFInput_1_UCUR_GPS == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_UCUR_GPS
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_UCUR_GPS);

										if (variable
												.isMissing(reader_iNetCDFInput_1_UCUR_GPS
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.UCUR_GPS = null;
										} else {
											variables.UCUR_GPS = new Float(
													reader_iNetCDFInput_1_UCUR_GPS
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_UCUR_GPS)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_VCUR_GPS = columnNameMapping_iNetCDFInput_1
											.get("VCUR_GPS");
									String iNetCDFInput_1_type_VCUR_GPS = columnTypeMapping_iNetCDFInput_1
											.get("VCUR_GPS");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VCUR_GPS = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VCUR_GPS);

									if (iNetCDFInput_1_name_VCUR_GPS == null
											|| (iNetCDFInput_1_type_VCUR_GPS
													.equals("VARIABLE") && reader_iNetCDFInput_1_VCUR_GPS == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VCUR_GPS
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VCUR_GPS);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VCUR_GPS
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VCUR_GPS = null;
										} else {
											variables.VCUR_GPS = new Float(
													reader_iNetCDFInput_1_VCUR_GPS
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_VCUR_GPS)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_CDOM_uncertainty = columnNameMapping_iNetCDFInput_1
											.get("CDOM_uncertainty");
									String iNetCDFInput_1_type_CDOM_uncertainty = columnTypeMapping_iNetCDFInput_1
											.get("CDOM_uncertainty");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_CDOM_uncertainty = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_CDOM_uncertainty);

									if (iNetCDFInput_1_name_CDOM_uncertainty == null
											|| (iNetCDFInput_1_type_CDOM_uncertainty
													.equals("VARIABLE") && reader_iNetCDFInput_1_CDOM_uncertainty == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_CDOM_uncertainty
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_CDOM_uncertainty);

										if (variable
												.isMissing(reader_iNetCDFInput_1_CDOM_uncertainty
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.CDOM_uncertainty = null;
										} else {
											variables.CDOM_uncertainty = new Float(
													reader_iNetCDFInput_1_CDOM_uncertainty
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_CDOM_uncertainty)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_DEPTH = columnNameMapping_iNetCDFInput_1
											.get("DEPTH");
									String iNetCDFInput_1_type_DEPTH = columnTypeMapping_iNetCDFInput_1
											.get("DEPTH");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_DEPTH = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_DEPTH);

									if (iNetCDFInput_1_name_DEPTH == null
											|| (iNetCDFInput_1_type_DEPTH
													.equals("VARIABLE") && reader_iNetCDFInput_1_DEPTH == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_DEPTH
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_DEPTH);

										if (variable
												.isMissing(reader_iNetCDFInput_1_DEPTH
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.DEPTH = null;
										} else {
											variables.DEPTH = new Float(
													reader_iNetCDFInput_1_DEPTH
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_DEPTH)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_OCR470_3 = columnNameMapping_iNetCDFInput_1
											.get("OCR470_3");
									String iNetCDFInput_1_type_OCR470_3 = columnTypeMapping_iNetCDFInput_1
											.get("OCR470_3");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_OCR470_3 = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_OCR470_3);

									if (iNetCDFInput_1_name_OCR470_3 == null
											|| (iNetCDFInput_1_type_OCR470_3
													.equals("VARIABLE") && reader_iNetCDFInput_1_OCR470_3 == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_OCR470_3
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_OCR470_3);

										if (variable
												.isMissing(reader_iNetCDFInput_1_OCR470_3
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.OCR470_3 = null;
										} else {
											variables.OCR470_3 = new Float(
													reader_iNetCDFInput_1_OCR470_3
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_OCR470_3)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_DEPTH_quality_control = columnNameMapping_iNetCDFInput_1
											.get("DEPTH_quality_control");
									String iNetCDFInput_1_type_DEPTH_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("DEPTH_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_DEPTH_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_DEPTH_quality_control);

									if (iNetCDFInput_1_name_DEPTH_quality_control == null
											|| (iNetCDFInput_1_type_DEPTH_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_DEPTH_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_DEPTH_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_DEPTH_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_DEPTH_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.DEPTH_quality_control = null;
										} else {
											variables.DEPTH_quality_control = new Integer(
													reader_iNetCDFInput_1_DEPTH_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_DEPTH_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.DEPTH_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_PRES = columnNameMapping_iNetCDFInput_1
											.get("PRES");
									String iNetCDFInput_1_type_PRES = columnTypeMapping_iNetCDFInput_1
											.get("PRES");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_PRES = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_PRES);

									if (iNetCDFInput_1_name_PRES == null
											|| (iNetCDFInput_1_type_PRES
													.equals("VARIABLE") && reader_iNetCDFInput_1_PRES == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_PRES
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_PRES);

										if (variable
												.isMissing(reader_iNetCDFInput_1_PRES
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.PRES = null;
										} else {
											variables.PRES = new Float(
													reader_iNetCDFInput_1_PRES
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_PRES)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_PRES_quality_control = columnNameMapping_iNetCDFInput_1
											.get("PRES_quality_control");
									String iNetCDFInput_1_type_PRES_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("PRES_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_PRES_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_PRES_quality_control);

									if (iNetCDFInput_1_name_PRES_quality_control == null
											|| (iNetCDFInput_1_type_PRES_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_PRES_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_PRES_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_PRES_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_PRES_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.PRES_quality_control = null;
										} else {
											variables.PRES_quality_control = new Integer(
													reader_iNetCDFInput_1_PRES_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_PRES_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.PRES_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_PSAL = columnNameMapping_iNetCDFInput_1
											.get("PSAL");
									String iNetCDFInput_1_type_PSAL = columnTypeMapping_iNetCDFInput_1
											.get("PSAL");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_PSAL = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_PSAL);

									if (iNetCDFInput_1_name_PSAL == null
											|| (iNetCDFInput_1_type_PSAL
													.equals("VARIABLE") && reader_iNetCDFInput_1_PSAL == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_PSAL
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_PSAL);

										if (variable
												.isMissing(reader_iNetCDFInput_1_PSAL
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.PSAL = null;
										} else {
											variables.PSAL = new Float(
													reader_iNetCDFInput_1_PSAL
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_PSAL)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_PSAL_quality_control = columnNameMapping_iNetCDFInput_1
											.get("PSAL_quality_control");
									String iNetCDFInput_1_type_PSAL_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("PSAL_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_PSAL_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_PSAL_quality_control);

									if (iNetCDFInput_1_name_PSAL_quality_control == null
											|| (iNetCDFInput_1_type_PSAL_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_PSAL_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_PSAL_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_PSAL_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_PSAL_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.PSAL_quality_control = null;
										} else {
											variables.PSAL_quality_control = new Integer(
													reader_iNetCDFInput_1_PSAL_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_PSAL_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.PSAL_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_TEMP = columnNameMapping_iNetCDFInput_1
											.get("TEMP");
									String iNetCDFInput_1_type_TEMP = columnTypeMapping_iNetCDFInput_1
											.get("TEMP");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_TEMP = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_TEMP);

									if (iNetCDFInput_1_name_TEMP == null
											|| (iNetCDFInput_1_type_TEMP
													.equals("VARIABLE") && reader_iNetCDFInput_1_TEMP == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_TEMP
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_TEMP);

										if (variable
												.isMissing(reader_iNetCDFInput_1_TEMP
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.TEMP = null;
										} else {
											variables.TEMP = new Float(
													reader_iNetCDFInput_1_TEMP
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_TEMP)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_TEMP_quality_control = columnNameMapping_iNetCDFInput_1
											.get("TEMP_quality_control");
									String iNetCDFInput_1_type_TEMP_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("TEMP_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_TEMP_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_TEMP_quality_control);

									if (iNetCDFInput_1_name_TEMP_quality_control == null
											|| (iNetCDFInput_1_type_TEMP_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_TEMP_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_TEMP_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_TEMP_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_TEMP_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.TEMP_quality_control = null;
										} else {
											variables.TEMP_quality_control = new Integer(
													reader_iNetCDFInput_1_TEMP_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_TEMP_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.TEMP_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_DOXY = columnNameMapping_iNetCDFInput_1
											.get("DOXY");
									String iNetCDFInput_1_type_DOXY = columnTypeMapping_iNetCDFInput_1
											.get("DOXY");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_DOXY = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_DOXY);

									if (iNetCDFInput_1_name_DOXY == null
											|| (iNetCDFInput_1_type_DOXY
													.equals("VARIABLE") && reader_iNetCDFInput_1_DOXY == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_DOXY
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_DOXY);

										if (variable
												.isMissing(reader_iNetCDFInput_1_DOXY
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.DOXY = null;
										} else {
											variables.DOXY = new Float(
													reader_iNetCDFInput_1_DOXY
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_DOXY)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_DOXY_quality_control = columnNameMapping_iNetCDFInput_1
											.get("DOXY_quality_control");
									String iNetCDFInput_1_type_DOXY_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("DOXY_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_DOXY_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_DOXY_quality_control);

									if (iNetCDFInput_1_name_DOXY_quality_control == null
											|| (iNetCDFInput_1_type_DOXY_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_DOXY_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_DOXY_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_DOXY_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_DOXY_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.DOXY_quality_control = null;
										} else {
											variables.DOXY_quality_control = new Integer(
													reader_iNetCDFInput_1_DOXY_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_DOXY_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.DOXY_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_DOXY_uncertainty = columnNameMapping_iNetCDFInput_1
											.get("DOXY_uncertainty");
									String iNetCDFInput_1_type_DOXY_uncertainty = columnTypeMapping_iNetCDFInput_1
											.get("DOXY_uncertainty");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_DOXY_uncertainty = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_DOXY_uncertainty);

									if (iNetCDFInput_1_name_DOXY_uncertainty == null
											|| (iNetCDFInput_1_type_DOXY_uncertainty
													.equals("VARIABLE") && reader_iNetCDFInput_1_DOXY_uncertainty == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_DOXY_uncertainty
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_DOXY_uncertainty);

										if (variable
												.isMissing(reader_iNetCDFInput_1_DOXY_uncertainty
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.DOXY_uncertainty = null;
										} else {
											variables.DOXY_uncertainty = new Float(
													reader_iNetCDFInput_1_DOXY_uncertainty
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_DOXY_uncertainty)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_FLU2 = columnNameMapping_iNetCDFInput_1
											.get("FLU2");
									String iNetCDFInput_1_type_FLU2 = columnTypeMapping_iNetCDFInput_1
											.get("FLU2");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_FLU2 = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_FLU2);

									if (iNetCDFInput_1_name_FLU2 == null
											|| (iNetCDFInput_1_type_FLU2
													.equals("VARIABLE") && reader_iNetCDFInput_1_FLU2 == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_FLU2
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_FLU2);

										if (variable
												.isMissing(reader_iNetCDFInput_1_FLU2
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.FLU2 = null;
										} else {
											variables.FLU2 = new Float(
													reader_iNetCDFInput_1_FLU2
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_FLU2)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_FLU2_quality_control = columnNameMapping_iNetCDFInput_1
											.get("FLU2_quality_control");
									String iNetCDFInput_1_type_FLU2_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("FLU2_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_FLU2_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_FLU2_quality_control);

									if (iNetCDFInput_1_name_FLU2_quality_control == null
											|| (iNetCDFInput_1_type_FLU2_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_FLU2_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_FLU2_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_FLU2_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_FLU2_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.FLU2_quality_control = null;
										} else {
											variables.FLU2_quality_control = new Integer(
													reader_iNetCDFInput_1_FLU2_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_FLU2_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.FLU2_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_HEAD = columnNameMapping_iNetCDFInput_1
											.get("HEAD");
									String iNetCDFInput_1_type_HEAD = columnTypeMapping_iNetCDFInput_1
											.get("HEAD");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_HEAD = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_HEAD);

									if (iNetCDFInput_1_name_HEAD == null
											|| (iNetCDFInput_1_type_HEAD
													.equals("VARIABLE") && reader_iNetCDFInput_1_HEAD == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_HEAD
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_HEAD);

										if (variable
												.isMissing(reader_iNetCDFInput_1_HEAD
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.HEAD = null;
										} else {
											variables.HEAD = new Float(
													reader_iNetCDFInput_1_HEAD
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_HEAD)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_HEAD_quality_control = columnNameMapping_iNetCDFInput_1
											.get("HEAD_quality_control");
									String iNetCDFInput_1_type_HEAD_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("HEAD_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_HEAD_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_HEAD_quality_control);

									if (iNetCDFInput_1_name_HEAD_quality_control == null
											|| (iNetCDFInput_1_type_HEAD_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_HEAD_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_HEAD_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_HEAD_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_HEAD_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.HEAD_quality_control = null;
										} else {
											variables.HEAD_quality_control = new Integer(
													reader_iNetCDFInput_1_HEAD_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_HEAD_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.HEAD_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_UCUR = columnNameMapping_iNetCDFInput_1
											.get("UCUR");
									String iNetCDFInput_1_type_UCUR = columnTypeMapping_iNetCDFInput_1
											.get("UCUR");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_UCUR = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_UCUR);

									if (iNetCDFInput_1_name_UCUR == null
											|| (iNetCDFInput_1_type_UCUR
													.equals("VARIABLE") && reader_iNetCDFInput_1_UCUR == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_UCUR
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_UCUR);

										if (variable
												.isMissing(reader_iNetCDFInput_1_UCUR
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.UCUR = null;
										} else {
											variables.UCUR = new Float(
													reader_iNetCDFInput_1_UCUR
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_UCUR)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_UCUR_GPS_quality_control = columnNameMapping_iNetCDFInput_1
											.get("UCUR_GPS_quality_control");
									String iNetCDFInput_1_type_UCUR_GPS_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("UCUR_GPS_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_UCUR_GPS_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_UCUR_GPS_quality_control);

									if (iNetCDFInput_1_name_UCUR_GPS_quality_control == null
											|| (iNetCDFInput_1_type_UCUR_GPS_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_UCUR_GPS_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_UCUR_GPS_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_UCUR_GPS_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_UCUR_GPS_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.UCUR_GPS_quality_control = null;
										} else {
											variables.UCUR_GPS_quality_control = new Integer(
													reader_iNetCDFInput_1_UCUR_GPS_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_UCUR_GPS_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.UCUR_GPS_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_UCUR_quality_control = columnNameMapping_iNetCDFInput_1
											.get("UCUR_quality_control");
									String iNetCDFInput_1_type_UCUR_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("UCUR_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_UCUR_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_UCUR_quality_control);

									if (iNetCDFInput_1_name_UCUR_quality_control == null
											|| (iNetCDFInput_1_type_UCUR_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_UCUR_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_UCUR_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_UCUR_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_UCUR_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.UCUR_quality_control = null;
										} else {
											variables.UCUR_quality_control = new Integer(
													reader_iNetCDFInput_1_UCUR_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_UCUR_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.UCUR_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_VCUR = columnNameMapping_iNetCDFInput_1
											.get("VCUR");
									String iNetCDFInput_1_type_VCUR = columnTypeMapping_iNetCDFInput_1
											.get("VCUR");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VCUR = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VCUR);

									if (iNetCDFInput_1_name_VCUR == null
											|| (iNetCDFInput_1_type_VCUR
													.equals("VARIABLE") && reader_iNetCDFInput_1_VCUR == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VCUR
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VCUR);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VCUR
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VCUR = null;
										} else {
											variables.VCUR = new Float(
													reader_iNetCDFInput_1_VCUR
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_VCUR)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_VCUR_GPS_quality_control = columnNameMapping_iNetCDFInput_1
											.get("VCUR_GPS_quality_control");
									String iNetCDFInput_1_type_VCUR_GPS_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("VCUR_GPS_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VCUR_GPS_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VCUR_GPS_quality_control);

									if (iNetCDFInput_1_name_VCUR_GPS_quality_control == null
											|| (iNetCDFInput_1_type_VCUR_GPS_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_VCUR_GPS_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VCUR_GPS_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VCUR_GPS_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VCUR_GPS_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VCUR_GPS_quality_control = null;
										} else {
											variables.VCUR_GPS_quality_control = new Integer(
													reader_iNetCDFInput_1_VCUR_GPS_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_VCUR_GPS_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.VCUR_GPS_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_VCUR_quality_control = columnNameMapping_iNetCDFInput_1
											.get("VCUR_quality_control");
									String iNetCDFInput_1_type_VCUR_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("VCUR_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VCUR_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VCUR_quality_control);

									if (iNetCDFInput_1_name_VCUR_quality_control == null
											|| (iNetCDFInput_1_type_VCUR_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_VCUR_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VCUR_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VCUR_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VCUR_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VCUR_quality_control = null;
										} else {
											variables.VCUR_quality_control = new Integer(
													reader_iNetCDFInput_1_VCUR_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_VCUR_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.VCUR_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_CDOM = columnNameMapping_iNetCDFInput_1
											.get("CDOM");
									String iNetCDFInput_1_type_CDOM = columnTypeMapping_iNetCDFInput_1
											.get("CDOM");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_CDOM = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_CDOM);

									if (iNetCDFInput_1_name_CDOM == null
											|| (iNetCDFInput_1_type_CDOM
													.equals("VARIABLE") && reader_iNetCDFInput_1_CDOM == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_CDOM
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_CDOM);

										if (variable
												.isMissing(reader_iNetCDFInput_1_CDOM
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.CDOM = null;
										} else {
											variables.CDOM = new Float(
													reader_iNetCDFInput_1_CDOM
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_CDOM)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_CDOM_quality_control = columnNameMapping_iNetCDFInput_1
											.get("CDOM_quality_control");
									String iNetCDFInput_1_type_CDOM_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("CDOM_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_CDOM_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_CDOM_quality_control);

									if (iNetCDFInput_1_name_CDOM_quality_control == null
											|| (iNetCDFInput_1_type_CDOM_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_CDOM_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_CDOM_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_CDOM_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_CDOM_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.CDOM_quality_control = null;
										} else {
											variables.CDOM_quality_control = new Integer(
													reader_iNetCDFInput_1_CDOM_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_CDOM_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.CDOM_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_CNDC = columnNameMapping_iNetCDFInput_1
											.get("CNDC");
									String iNetCDFInput_1_type_CNDC = columnTypeMapping_iNetCDFInput_1
											.get("CNDC");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_CNDC = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_CNDC);

									if (iNetCDFInput_1_name_CNDC == null
											|| (iNetCDFInput_1_type_CNDC
													.equals("VARIABLE") && reader_iNetCDFInput_1_CNDC == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_CNDC
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_CNDC);

										if (variable
												.isMissing(reader_iNetCDFInput_1_CNDC
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.CNDC = null;
										} else {
											variables.CNDC = new Float(
													reader_iNetCDFInput_1_CNDC
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_CNDC)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_VBSC = columnNameMapping_iNetCDFInput_1
											.get("VBSC");
									String iNetCDFInput_1_type_VBSC = columnTypeMapping_iNetCDFInput_1
											.get("VBSC");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VBSC = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VBSC);

									if (iNetCDFInput_1_name_VBSC == null
											|| (iNetCDFInput_1_type_VBSC
													.equals("VARIABLE") && reader_iNetCDFInput_1_VBSC == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VBSC
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VBSC);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VBSC
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VBSC = null;
										} else {
											variables.VBSC = new Float(
													reader_iNetCDFInput_1_VBSC
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue.getName().equals(
													iNetCDFInput_1_name_VBSC)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_CNDC_quality_control = columnNameMapping_iNetCDFInput_1
											.get("CNDC_quality_control");
									String iNetCDFInput_1_type_CNDC_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("CNDC_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_CNDC_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_CNDC_quality_control);

									if (iNetCDFInput_1_name_CNDC_quality_control == null
											|| (iNetCDFInput_1_type_CNDC_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_CNDC_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_CNDC_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_CNDC_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_CNDC_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.CNDC_quality_control = null;
										} else {
											variables.CNDC_quality_control = new Integer(
													reader_iNetCDFInput_1_CNDC_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_CNDC_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.CNDC_quality_control = new Integer(
													index);
										}
									}
									String iNetCDFInput_1_name_VBSC_uncertainty = columnNameMapping_iNetCDFInput_1
											.get("VBSC_uncertainty");
									String iNetCDFInput_1_type_VBSC_uncertainty = columnTypeMapping_iNetCDFInput_1
											.get("VBSC_uncertainty");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VBSC_uncertainty = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VBSC_uncertainty);

									if (iNetCDFInput_1_name_VBSC_uncertainty == null
											|| (iNetCDFInput_1_type_VBSC_uncertainty
													.equals("VARIABLE") && reader_iNetCDFInput_1_VBSC_uncertainty == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VBSC_uncertainty
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VBSC_uncertainty);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VBSC_uncertainty
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VBSC_uncertainty = null;
										} else {
											variables.VBSC_uncertainty = new Float(
													reader_iNetCDFInput_1_VBSC_uncertainty
															.getFloat(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_VBSC_uncertainty)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
										}
									}
									String iNetCDFInput_1_name_VBSC_quality_control = columnNameMapping_iNetCDFInput_1
											.get("VBSC_quality_control");
									String iNetCDFInput_1_type_VBSC_quality_control = columnTypeMapping_iNetCDFInput_1
											.get("VBSC_quality_control");

									au.org.emii.talend.dap.reader.NetcdfReader reader_iNetCDFInput_1_VBSC_quality_control = readers_iNetCDFInput_1
											.get(iNetCDFInput_1_name_VBSC_quality_control);

									if (iNetCDFInput_1_name_VBSC_quality_control == null
											|| (iNetCDFInput_1_type_VBSC_quality_control
													.equals("VARIABLE") && reader_iNetCDFInput_1_VBSC_quality_control == null)) {
										// skip this column - no mapping or the
										// variable doesn't exist
									} else if (iNetCDFInput_1_type_VBSC_quality_control
											.equals("VARIABLE")) {
										ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS) ncDataset_iNetCDFInput_1
												.findVariable(iNetCDFInput_1_name_VBSC_quality_control);

										if (variable
												.isMissing(reader_iNetCDFInput_1_VBSC_quality_control
														.getDouble(indexValues_iNetCDFInput_1))) {
											variables.VBSC_quality_control = null;
										} else {
											variables.VBSC_quality_control = new Integer(
													reader_iNetCDFInput_1_VBSC_quality_control
															.getInt(indexValues_iNetCDFInput_1));
										}
									} else {
										au.org.emii.talend.dap.IndexValue dimensionValue = null;

										for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_iNetCDFInput_1) {
											if (indexValue
													.getName()
													.equals(
															iNetCDFInput_1_name_VBSC_quality_control)) {
												dimensionValue = indexValue;
												break;
											}
										}

										if (dimensionValue != null) {
											int index = dimensionValue
													.getValue();
											variables.VBSC_quality_control = new Integer(
													index);
										}
									}
								} else {
									variables = null;
								}

								tos_count_iNetCDFInput_1++;

								/**
								 * [iNetCDFInput_1 main ] stop
								 */
								// Start of branch "variables"
								if (variables != null) {

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;
										Var.TIME_quality_control = variables.TIME_quality_control == null ? null
												: variables.TIME_quality_control
														.toString();
										Var.LATITUDE_quality_control = variables.LATITUDE_quality_control == null ? null
												: variables.LATITUDE_quality_control
														.toString();
										Var.LONGITUDE_quality_control = variables.LONGITUDE_quality_control == null ? null
												: variables.LONGITUDE_quality_control
														.toString();
										Var.DEPTH_quality_control = variables.DEPTH_quality_control == null ? null
												: variables.DEPTH_quality_control
														.toString();
										Var.PRES_quality_control = variables.PRES_quality_control == null ? null
												: variables.PRES_quality_control
														.toString();
										Var.PSAL_quality_control = variables.PSAL_quality_control == null ? null
												: variables.PSAL_quality_control
														.toString();
										Var.TEMP_quality_control = variables.TEMP_quality_control == null ? null
												: variables.TEMP_quality_control
														.toString();
										Var.DOXY_quality_control = variables.DOXY_quality_control == null ? null
												: variables.DOXY_quality_control
														.toString();
										Var.FLU2_quality_control = variables.FLU2_quality_control == null ? null
												: variables.FLU2_quality_control
														.toString();
										Var.HEAD_quality_control = variables.HEAD_quality_control == null ? null
												: variables.HEAD_quality_control
														.toString();
										Var.UCUR_quality_control = variables.UCUR_quality_control == null ? null
												: variables.UCUR_quality_control
														.toString();
										Var.VCUR_quality_control = variables.VCUR_quality_control == null ? null
												: variables.VCUR_quality_control
														.toString();
										Var.CDOM_quality_control = variables.CDOM_quality_control == null ? null
												: variables.CDOM_quality_control
														.toString();
										Var.UCUR_GPS_quality_control = variables.UCUR_GPS_quality_control == null ? null
												: variables.UCUR_GPS_quality_control
														.toString();
										Var.VCUR_GPS_quality_control = variables.VCUR_GPS_quality_control == null ? null
												: variables.VCUR_GPS_quality_control
														.toString();
										Var.CNDC_quality_control = variables.CNDC_quality_control == null ? null
												: variables.CNDC_quality_control
														.toString();
										Var.VBSC_quality_control = variables.VBSC_quality_control == null ? null
												: variables.VBSC_quality_control
														.toString();// ###############################
										// ###############################
										// # Output tables

										measurement = null;

										// # Output table : 'measurement'
										measurement_tmp.file_id = ((Integer) globalMap
												.get("fileToprocess.id"));
										measurement_tmp.TIME = NetCDFUtils
												.addDays("1950-01-01 00:00:00",
														"yyyy-MM-dd HH:mm:ss",
														variables.TIME, true);
										measurement_tmp.geom = ArgoUtils
												.makePoint(variables.LONGITUDE,
														variables.LATITUDE,
														"EPSG:4326");
										measurement_tmp.LATITUDE = variables.LATITUDE;
										measurement_tmp.LONGITUDE = variables.LONGITUDE;
										measurement_tmp.FLU2_uncertainty = variables.FLU2_uncertainty;
										measurement_tmp.UCUR_GPS = variables.UCUR_GPS;
										measurement_tmp.VCUR_GPS = variables.VCUR_GPS;
										measurement_tmp.CDOM_uncertainty = variables.CDOM_uncertainty;
										measurement_tmp.DEPTH = variables.DEPTH;
										measurement_tmp.PRES = variables.PRES;
										measurement_tmp.PSAL = variables.PSAL;
										measurement_tmp.TEMP = variables.TEMP;
										measurement_tmp.DOXY = variables.DOXY;
										measurement_tmp.DOXY_uncertainty = variables.DOXY_uncertainty;
										measurement_tmp.FLU2 = variables.FLU2;
										measurement_tmp.HEAD = variables.HEAD;
										measurement_tmp.UCUR = variables.UCUR;
										measurement_tmp.VCUR = variables.VCUR;
										measurement_tmp.CDOM = variables.CDOM;
										measurement_tmp.CNDC = variables.CNDC;
										measurement_tmp.VBSC = variables.VBSC;
										measurement_tmp.VBSC_uncertainty = variables.VBSC_uncertainty;
										measurement_tmp.TIME_quality_control = Var.TIME_quality_control;
										measurement_tmp.LATITUDE_quality_control = Var.LATITUDE_quality_control;
										measurement_tmp.LONGITUDE_quality_control = Var.LONGITUDE_quality_control;
										measurement_tmp.DEPTH_quality_control = Var.DEPTH_quality_control;
										measurement_tmp.PRES_quality_control = Var.PRES_quality_control;
										measurement_tmp.PSAL_quality_control = Var.PSAL_quality_control;
										measurement_tmp.TEMP_quality_control = Var.TEMP_quality_control;
										measurement_tmp.DOXY_quality_control = Var.DOXY_quality_control;
										measurement_tmp.FLU2_quality_control = Var.FLU2_quality_control;
										measurement_tmp.HEAD_quality_control = Var.HEAD_quality_control;
										measurement_tmp.UCUR_quality_control = Var.UCUR_quality_control;
										measurement_tmp.VCUR_quality_control = Var.VCUR_quality_control;
										measurement_tmp.CDOM_quality_control = Var.CDOM_quality_control;
										measurement_tmp.UCUR_GPS_quality_control = Var.UCUR_GPS_quality_control;
										measurement_tmp.VCUR_GPS_quality_control = Var.VCUR_GPS_quality_control;
										measurement_tmp.CNDC_quality_control = Var.CNDC_quality_control;
										measurement_tmp.VBSC_quality_control = Var.VBSC_quality_control;
										measurement = measurement_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */
									// Start of branch "measurement"
									if (measurement != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										whetherReject_tDBOutput_2 = false;
										pstmt_tDBOutput_2.setInt(1,
												measurement.file_id);

										if (measurement.TIME != null) {
											pstmt_tDBOutput_2
													.setTimestamp(
															2,
															new java.sql.Timestamp(
																	measurement.TIME
																			.getTime()));
										} else {
											pstmt_tDBOutput_2
													.setNull(
															2,
															java.sql.Types.TIMESTAMP);
										}

										if (measurement.geom != null) {
											pstmt_tDBOutput_2
													.setString(
															3,
															((org.talend.sdi.geometry.Geometry) (measurement.geom))
																	.toString());
											pstmt_tDBOutput_2
													.setInt(
															3 + 1,
															((org.talend.sdi.geometry.Geometry) (measurement.geom))
																	.getSRID());
										} else {
											pstmt_tDBOutput_2.setNull(
													3, java.sql.Types.VARCHAR);
											pstmt_tDBOutput_2.setNull(
													3 + 1,
													java.sql.Types.INTEGER);
										}

										if (measurement.LATITUDE == null) {
											pstmt_tDBOutput_2.setNull(
													5, java.sql.Types.DOUBLE);
										} else {
											pstmt_tDBOutput_2
													.setDouble(
															5,
															measurement.LATITUDE);
										}

										if (measurement.LONGITUDE == null) {
											pstmt_tDBOutput_2.setNull(
													6, java.sql.Types.DOUBLE);
										} else {
											pstmt_tDBOutput_2
													.setDouble(
															6,
															measurement.LONGITUDE);
										}

										if (measurement.FLU2_uncertainty == null) {
											pstmt_tDBOutput_2.setNull(
													7, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2
													.setFloat(
															7,
															measurement.FLU2_uncertainty);
										}

										if (measurement.UCUR_GPS == null) {
											pstmt_tDBOutput_2.setNull(
													8, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													8, measurement.UCUR_GPS);
										}

										if (measurement.VCUR_GPS == null) {
											pstmt_tDBOutput_2.setNull(
													9, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													9, measurement.VCUR_GPS);
										}

										if (measurement.CDOM_uncertainty == null) {
											pstmt_tDBOutput_2.setNull(
													10, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2
													.setFloat(
															10,
															measurement.CDOM_uncertainty);
										}

										if (measurement.DEPTH == null) {
											pstmt_tDBOutput_2.setNull(
													11, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													11, measurement.DEPTH);
										}

										if (measurement.PRES == null) {
											pstmt_tDBOutput_2.setNull(
													12, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													12, measurement.PRES);
										}

										if (measurement.PSAL == null) {
											pstmt_tDBOutput_2.setNull(
													13, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													13, measurement.PSAL);
										}

										if (measurement.TEMP == null) {
											pstmt_tDBOutput_2.setNull(
													14, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													14, measurement.TEMP);
										}

										if (measurement.DOXY == null) {
											pstmt_tDBOutput_2.setNull(
													15, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													15, measurement.DOXY);
										}

										if (measurement.DOXY_uncertainty == null) {
											pstmt_tDBOutput_2.setNull(
													16, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2
													.setFloat(
															16,
															measurement.DOXY_uncertainty);
										}

										if (measurement.FLU2 == null) {
											pstmt_tDBOutput_2.setNull(
													17, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													17, measurement.FLU2);
										}

										if (measurement.HEAD == null) {
											pstmt_tDBOutput_2.setNull(
													18, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													18, measurement.HEAD);
										}

										if (measurement.UCUR == null) {
											pstmt_tDBOutput_2.setNull(
													19, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													19, measurement.UCUR);
										}

										if (measurement.VCUR == null) {
											pstmt_tDBOutput_2.setNull(
													20, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													20, measurement.VCUR);
										}

										if (measurement.CDOM == null) {
											pstmt_tDBOutput_2.setNull(
													21, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													21, measurement.CDOM);
										}

										if (measurement.CNDC == null) {
											pstmt_tDBOutput_2.setNull(
													22, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													22, measurement.CNDC);
										}

										if (measurement.VBSC == null) {
											pstmt_tDBOutput_2.setNull(
													23, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(
													23, measurement.VBSC);
										}

										if (measurement.VBSC_uncertainty == null) {
											pstmt_tDBOutput_2.setNull(
													24, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2
													.setFloat(
															24,
															measurement.VBSC_uncertainty);
										}

										if (measurement.TIME_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															25,
															measurement.TIME_quality_control);
										}

										if (measurement.LATITUDE_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													26, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															26,
															measurement.LATITUDE_quality_control);
										}

										if (measurement.LONGITUDE_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													27, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															27,
															measurement.LONGITUDE_quality_control);
										}

										if (measurement.DEPTH_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													28, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															28,
															measurement.DEPTH_quality_control);
										}

										if (measurement.PRES_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													29, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															29,
															measurement.PRES_quality_control);
										}

										if (measurement.PSAL_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													30, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															30,
															measurement.PSAL_quality_control);
										}

										if (measurement.TEMP_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													31, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															31,
															measurement.TEMP_quality_control);
										}

										if (measurement.DOXY_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													32, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															32,
															measurement.DOXY_quality_control);
										}

										if (measurement.FLU2_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													33, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															33,
															measurement.FLU2_quality_control);
										}

										if (measurement.HEAD_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													34, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															34,
															measurement.HEAD_quality_control);
										}

										if (measurement.UCUR_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													35, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															35,
															measurement.UCUR_quality_control);
										}

										if (measurement.VCUR_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													36, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															36,
															measurement.VCUR_quality_control);
										}

										if (measurement.CDOM_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													37, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															37,
															measurement.CDOM_quality_control);
										}

										if (measurement.UCUR_GPS_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													38, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															38,
															measurement.UCUR_GPS_quality_control);
										}

										if (measurement.VCUR_GPS_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													39, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															39,
															measurement.VCUR_GPS_quality_control);
										}

										if (measurement.CNDC_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													40, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															40,
															measurement.CNDC_quality_control);
										}

										if (measurement.VBSC_quality_control == null) {
											pstmt_tDBOutput_2.setNull(
													41, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2
													.setString(
															41,
															measurement.VBSC_quality_control);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if (!whetherReject_tDBOutput_2) {
										}
										if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
											try {
												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
														.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e) {

												System.err
														.println("Contents of BatchUpdateException:");
												System.err
														.println(" Update counts: ");
												int[] updateCounts = e
														.getUpdateCounts();
												for (int i = 0; i < updateCounts.length; i++) {
													System.err
															.println("  Statement "
																	+ i
																	+ ":"
																	+ updateCounts[i]);
												}

												java.sql.SQLException se = e;
												do {
													System.err
															.println("SQL exception:");
													System.err
															.println(" Message: "
																	+ se.getMessage());
													System.err
															.println(" SQLSTATE: "
																	+ se.getSQLState());
													System.err
															.println(" Error code: "
																	+ se.getErrorCode());
													se = se.getNextException();
												} while (se != null);

												throw (e);

											}

										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

									} // End of branch "measurement"

								} // End of branch "variables"

								/**
								 * [iNetCDFInput_1 end ] start
								 */

								currentComponent = "iNetCDFInput_1";

							}
						}

					} catch (java.io.IOException ioe) {
						ioe.printStackTrace();

						error_iNetCDFInput_1 = true;
						errorTrace_iNetCDFInput_1 = ioe.toString();

					} finally {
						if (null != ncDataset_iNetCDFInput_1)
							try {
								ncDataset_iNetCDFInput_1.close();
							} catch (java.io.IOException ioe) {
								ioe.printStackTrace();

								error_iNetCDFInput_1 = true;
								errorTrace_iNetCDFInput_1 = ioe.toString();

							}
					}

					globalMap.put("_NB_FEATURE", nbFeature_iNetCDFInput_1);

					globalMap.put("_ERROR", new Boolean(error_iNetCDFInput_1));
					globalMap.put("_ERROR_STACK_TRACE",
							errorTrace_iNetCDFInput_1);

					ok_Hash.put("iNetCDFInput_1", true);
					end_Hash.put("iNetCDFInput_1", System.currentTimeMillis());

					/**
					 * [iNetCDFInput_1 end ] stop
					 */

					/**
					 * [tMap_3 end ] start
					 */

					currentComponent = "tMap_3";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_3", true);
					end_Hash.put("tMap_3", System.currentTimeMillis());

					/**
					 * [tMap_3 end ] stop
					 */

					/**
					 * [tDBOutput_2 end ] start
					 */

					currentComponent = "tDBOutput_2";

					try {
						int countSum_tDBOutput_2 = 0;
						if (pstmt_tDBOutput_2 != null) {
							for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
									.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
										: countEach_tDBOutput_2);
							}
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					} catch (java.sql.BatchUpdateException e) {

						System.err.println("Contents of BatchUpdateException:");
						System.err.println(" Update counts: ");
						int[] updateCounts = e.getUpdateCounts();
						for (int i = 0; i < updateCounts.length; i++) {
							System.err.println("  Statement " + i + ":"
									+ updateCounts[i]);
						}

						java.sql.SQLException se = e;
						do {
							System.err.println("SQL exception:");
							System.err.println(" Message: " + se.getMessage());
							System.err
									.println(" SQLSTATE: " + se.getSQLState());
							System.err.println(" Error code: "
									+ se.getErrorCode());
							se = se.getNextException();
						} while (se != null);

						throw (e);

					}

					if (pstmt_tDBOutput_2 != null) {

						pstmt_tDBOutput_2.close();

					}

					nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
							+ deletedCount_tDBOutput_2;
					nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
							+ updatedCount_tDBOutput_2;
					nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
							+ insertedCount_tDBOutput_2;
					nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
							+ rejectedCount_tDBOutput_2;

					globalMap.put("tDBOutput_2_NB_LINE",
							nb_line_tDBOutput_2);
					globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
							nb_line_update_tDBOutput_2);
					globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
							nb_line_inserted_tDBOutput_2);
					globalMap.put("tDBOutput_2_NB_LINE_DELETED",
							nb_line_deleted_tDBOutput_2);
					globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
							nb_line_rejected_tDBOutput_2);

					ok_Hash.put("tDBOutput_2", true);
					end_Hash.put("tDBOutput_2", System
							.currentTimeMillis());

					tPostgresqlCommit_1Process(globalMap);

					/**
					 * [tDBOutput_2 end ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					conn_tPostgresqlCommit_1.commit();
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_1", false);
				start_Hash
						.put("tPostgresqlClose_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlClose_1";

				int tos_count_tPostgresqlClose_1 = 0;

				/**
				 * [tPostgresqlClose_1 begin ] stop
				 */
				/**
				 * [tPostgresqlClose_1 main ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlClose_1 != null
						&& !conn_tPostgresqlClose_1.isClosed()) {
					conn_tPostgresqlClose_1.close();
				}

				tos_count_tPostgresqlClose_1++;

				/**
				 * [tPostgresqlClose_1 main ] stop
				 */
				/**
				 * [tPostgresqlClose_1 end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				ok_Hash.put("tPostgresqlClose_1", true);
				end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final DataHarvest_RT DataHarvest_RTClass = new DataHarvest_RT();

		int exitCode = DataHarvest_RTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = DataHarvest_RT.class
					.getClassLoader().getResourceAsStream(
							"anfog_dm/dataharvest_rt_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.logDir = (String) context.getProperty("logDir");

			context.paramFile = (String) context.getProperty("paramFile");

			context.metadataDb_RT_Database = (String) context
					.getProperty("metadataDb_RT_Database");

			context.metadataDb_RT_Login = (String) context
					.getProperty("metadataDb_RT_Login");

			context.metadataDb_RT_Password = (java.lang.String) context
					.getProperty("metadataDb_RT_Password");

			context.metadataDb_RT_Port = (String) context
					.getProperty("metadataDb_RT_Port");

			context.metadataDb_RT_Schema = (String) context
					.getProperty("metadataDb_RT_Schema");

			context.metadataDb_RT_Server = (String) context
					.getProperty("metadataDb_RT_Server");

			context.exclude = (String) context.getProperty("exclude");

			try {
				context.fileId = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("fileId"));
			} catch (NumberFormatException e) {
				context.fileId = null;
			}

			context.include = (String) context.getProperty("include");

			context.sourceDir = (String) context.getProperty("sourceDir");

			context.url = (String) context.getProperty("url");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("logDir")) {
				context.logDir = (String) parentContextMap.get("logDir");
			}
			if (parentContextMap.containsKey("paramFile")) {
				context.paramFile = (String) parentContextMap.get("paramFile");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Database")) {
				context.metadataDb_RT_Database = (String) parentContextMap
						.get("metadataDb_RT_Database");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Login")) {
				context.metadataDb_RT_Login = (String) parentContextMap
						.get("metadataDb_RT_Login");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Password")) {
				context.metadataDb_RT_Password = (java.lang.String) parentContextMap
						.get("metadataDb_RT_Password");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Port")) {
				context.metadataDb_RT_Port = (String) parentContextMap
						.get("metadataDb_RT_Port");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Schema")) {
				context.metadataDb_RT_Schema = (String) parentContextMap
						.get("metadataDb_RT_Schema");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Server")) {
				context.metadataDb_RT_Server = (String) parentContextMap
						.get("metadataDb_RT_Server");
			}
			if (parentContextMap.containsKey("exclude")) {
				context.exclude = (String) parentContextMap.get("exclude");
			}
			if (parentContextMap.containsKey("fileId")) {
				context.fileId = (Long) parentContextMap.get("fileId");
			}
			if (parentContextMap.containsKey("include")) {
				context.include = (String) parentContextMap.get("include");
			}
			if (parentContextMap.containsKey("sourceDir")) {
				context.sourceDir = (String) parentContextMap.get("sourceDir");
			}
			if (parentContextMap.containsKey("url")) {
				context.url = (String) parentContextMap.get("url");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			iIncludeSdiLibraries_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_iIncludeSdiLibraries_1) {

			e_iIncludeSdiLibraries_1.printStackTrace();
			globalMap.put("iIncludeSdiLibraries_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : DataHarvest_RT");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 243999 characters generated by Talend Open Studio for Data Integration on the
 * January 15, 2014 1:09:04 PM EST
 ************************************************************************************************/
