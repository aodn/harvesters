// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.3.r96646)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package anfog_dm.createwms_rt_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.GeometryUtility;
import routines.Numeric;
import routines.NetCDFUtils;
import routines.GeoOperation;
import routines.DAPUtils;
import routines.Mathematical;
import routines.ArgoUtils;
import routines.Relational;
import routines.TalendDate;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of iIncludeSdiLibraries_1
import org.talend.sdi.geometry.Geometry;

@SuppressWarnings("unused")
/**
 * Job: CreateWMS_RT Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.3.r96646
 * @status 
 */
public class CreateWMS_RT implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (logDir != null) {

				this.setProperty("logDir", logDir.toString());

			}

			if (paramFile != null) {

				this.setProperty("paramFile", paramFile.toString());

			}

			if (metadataDb_RT_Database != null) {

				this.setProperty("metadataDb_RT_Database",
						metadataDb_RT_Database.toString());

			}

			if (metadataDb_RT_Login != null) {

				this.setProperty("metadataDb_RT_Login", metadataDb_RT_Login
						.toString());

			}

			if (metadataDb_RT_Password != null) {

				this.setProperty("metadataDb_RT_Password",
						metadataDb_RT_Password.toString());

			}

			if (metadataDb_RT_Port != null) {

				this.setProperty("metadataDb_RT_Port", metadataDb_RT_Port
						.toString());

			}

			if (metadataDb_RT_Schema != null) {

				this.setProperty("metadataDb_RT_Schema", metadataDb_RT_Schema
						.toString());

			}

			if (metadataDb_RT_Server != null) {

				this.setProperty("metadataDb_RT_Server", metadataDb_RT_Server
						.toString());

			}

			if (exclude != null) {

				this.setProperty("exclude", exclude.toString());

			}

			if (fileId != null) {

				this.setProperty("fileId", fileId.toString());

			}

			if (include != null) {

				this.setProperty("include", include.toString());

			}

			if (sourceDir != null) {

				this.setProperty("sourceDir", sourceDir.toString());

			}

			if (url != null) {

				this.setProperty("url", url.toString());

			}

			if (metadataDb_Password != null) {

				this.setProperty("metadataDb_Password", metadataDb_Password
						.toString());

			}

			if (metadataDb_Server != null) {

				this.setProperty("metadataDb_Server", metadataDb_Server
						.toString());

			}

			if (metadataDb_Schema != null) {

				this.setProperty("metadataDb_Schema", metadataDb_Schema
						.toString());

			}

			if (metadataDb_Database != null) {

				this.setProperty("metadataDb_Database", metadataDb_Database
						.toString());

			}

			if (metadataDb_Login != null) {

				this.setProperty("metadataDb_Login", metadataDb_Login
						.toString());

			}

			if (metadataDb_Port != null) {

				this.setProperty("metadataDb_Port", metadataDb_Port.toString());

			}

		}

		public String logDir;

		public String getLogDir() {
			return this.logDir;
		}

		public String paramFile;

		public String getParamFile() {
			return this.paramFile;
		}

		public String metadataDb_RT_Database;

		public String getMetadataDb_RT_Database() {
			return this.metadataDb_RT_Database;
		}

		public String metadataDb_RT_Login;

		public String getMetadataDb_RT_Login() {
			return this.metadataDb_RT_Login;
		}

		public java.lang.String metadataDb_RT_Password;

		public java.lang.String getMetadataDb_RT_Password() {
			return this.metadataDb_RT_Password;
		}

		public String metadataDb_RT_Port;

		public String getMetadataDb_RT_Port() {
			return this.metadataDb_RT_Port;
		}

		public String metadataDb_RT_Schema;

		public String getMetadataDb_RT_Schema() {
			return this.metadataDb_RT_Schema;
		}

		public String metadataDb_RT_Server;

		public String getMetadataDb_RT_Server() {
			return this.metadataDb_RT_Server;
		}

		public String exclude;

		public String getExclude() {
			return this.exclude;
		}

		public Long fileId;

		public Long getFileId() {
			return this.fileId;
		}

		public String include;

		public String getInclude() {
			return this.include;
		}

		public String sourceDir;

		public String getSourceDir() {
			return this.sourceDir;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public java.lang.String metadataDb_Password;

		public java.lang.String getMetadataDb_Password() {
			return this.metadataDb_Password;
		}

		public String metadataDb_Server;

		public String getMetadataDb_Server() {
			return this.metadataDb_Server;
		}

		public String metadataDb_Schema;

		public String getMetadataDb_Schema() {
			return this.metadataDb_Schema;
		}

		public String metadataDb_Database;

		public String getMetadataDb_Database() {
			return this.metadataDb_Database;
		}

		public String metadataDb_Login;

		public String getMetadataDb_Login() {
			return this.metadataDb_Login;
		}

		public String metadataDb_Port;

		public String getMetadataDb_Port() {
			return this.metadataDb_Port;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "CreateWMS_RT";
	private final String projectName = "ANFOG_DM";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					CreateWMS_RT.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(CreateWMS_RT.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void iIncludeSdiLibraries_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iIncludeSdiLibraries_1", System.currentTimeMillis());

		status = "failure";

		iIncludeSdiLibraries_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void iPostgresqlDbUpdate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iPostgresqlDbUpdate_1", System.currentTimeMillis());

		status = "failure";

		iPostgresqlDbUpdate_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		iPostgresqlDbUpdate_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void iIncludeSdiLibraries_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void iPostgresqlDbUpdate_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public void iIncludeSdiLibraries_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iIncludeSdiLibraries_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [iIncludeSdiLibraries_1 begin ] start
				 */

				ok_Hash.put("iIncludeSdiLibraries_1", false);
				start_Hash.put("iIncludeSdiLibraries_1", System
						.currentTimeMillis());
				currentComponent = "iIncludeSdiLibraries_1";

				int tos_count_iIncludeSdiLibraries_1 = 0;

				/**
				 * [iIncludeSdiLibraries_1 begin ] stop
				 */
				/**
				 * [iIncludeSdiLibraries_1 main ] start
				 */

				currentComponent = "iIncludeSdiLibraries_1";

				tos_count_iIncludeSdiLibraries_1++;

				/**
				 * [iIncludeSdiLibraries_1 main ] stop
				 */
				/**
				 * [iIncludeSdiLibraries_1 end ] start
				 */

				currentComponent = "iIncludeSdiLibraries_1";

				ok_Hash.put("iIncludeSdiLibraries_1", true);
				end_Hash.put("iIncludeSdiLibraries_1", System
						.currentTimeMillis());

				iPostgresqlDbUpdate_1Process(globalMap);

				/**
				 * [iIncludeSdiLibraries_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iIncludeSdiLibraries_1_SUBPROCESS_STATE", 1);
	}

	public void iPostgresqlDbUpdate_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iPostgresqlDbUpdate_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [iPostgresqlDbUpdate_1 begin ] start
				 */

				int NB_ITERATE_tPostgresqlConnection_1 = 0; // for statistics

				ok_Hash.put("iPostgresqlDbUpdate_1", false);
				start_Hash.put("iPostgresqlDbUpdate_1", System
						.currentTimeMillis());
				currentComponent = "iPostgresqlDbUpdate_1";

				int tos_count_iPostgresqlDbUpdate_1 = 0;
				java.io.File tempFile_iPostgresqlDbUpdate_1 = null;
				java.io.PrintStream out_iPostgresqlDbUpdate_1 = null;
				java.io.File tempDir_iPostgresqlDbUpdate_1 = null;

				try {
					System.out.println("Start of try block");
					tempDir_iPostgresqlDbUpdate_1 = java.io.File
							.createTempFile("talend-temp-", "");
					tempDir_iPostgresqlDbUpdate_1.delete();
					tempDir_iPostgresqlDbUpdate_1.mkdir();

					tempFile_iPostgresqlDbUpdate_1 = new java.io.File(
							tempDir_iPostgresqlDbUpdate_1, "changelog.xml");

					System.out.println("tempFile_cid "
							+ tempFile_iPostgresqlDbUpdate_1);

					out_iPostgresqlDbUpdate_1 = new java.io.PrintStream(
							new java.io.FileOutputStream(
									tempFile_iPostgresqlDbUpdate_1));
					out_iPostgresqlDbUpdate_1
							.print("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"
									+ "<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd\">\n"
									+ "  \n"
									+ " <changeSet author=\"talend\" id=\"1382580250144-13\">\n"
									+ "       <sql>\n"
									+ " CREATE TABLE deployment_id\n"
									+ "(\n"
									+ "file_id integer NOT NULL, \n"
									+ "deployment_name character varying(50) NOT NULL,\n"
									+ "platform_type character varying(20) NOT NULL,\n"
									+ "platform_code character varying(10) NOT NULL,\n"
									+ "dive_number character varying(10) NOT NULL,\n"
									+ "CONSTRAINT deployment_id_pkey PRIMARY KEY (file_id),\n"
									+ "CONSTRAINT deployment_id_fkey FOREIGN KEY(file_id)\n"
									+ "REFERENCES indexed_file (id) MATCH SIMPLE\n"
									+ " )\n"
									+ "       </sql>\n"
									+ "    </changeSet>\n"
									+ "\n"
									+ " <changeSet author=\"talend\" id=\"1382580250144-14\">\n"
									+ "        <sql>\n"
									+ "CREATE TABLE anfog_rt_trajectory_wms\n"
									+ "(\n"
									+ "file_id integer NOT NULL,\n"
									+ "deployment_name character varying(50) NOT NULL,\n"
									+ "platform_code character varying(10) NOT NULL,\n"
									+ "platform_type character varying(20) NOT NULL,\n"
									+ "dive_number character varying(10) NOT NULL,\n"
									+ "geospatial_vertical_max character varying(50),\n"
									+ "geospatial_vertical_min character varying(50),\n"
									+ "time_coverage_start character varying(50),\n"
									+ "time_coverage_end character varying(50),\n"
									+ "\"TEMP_b\" boolean, \n"
									+ "\"PSAL_b\" boolean,\n"
									+ "\"DOXY_b\" boolean,\n"
									+ "\"DEPTH_b\" boolean,\n"
									+ "\"FLU2_b\" boolean,\n"
									+ "\"CDOM_b\" boolean,\n"
									+ "\"UCUR_b\" boolean,\n"
									+ "\"VCUR_b\" boolean,\n"
									+ "\"PRES_b\" boolean,\n"
									+ "\"CNDC_b\" boolean,\n"
									+ "\"HEAD_b\" boolean,\n"
									+ "\"UCUR_GPS_b\" boolean,\n"
									+ "\"VCUR_GPS_b\" boolean,\n"
									+ "\"VBSC_b\" boolean,\n"
									+ "geom geometry,\n"
									+ "CONSTRAINT anfog_rt_trajectory_wms_pkey PRIMARY KEY (file_id),\n"
									+ "CONSTRAINT anfog_rt_trajectory_wms_fkey FOREIGN KEY(file_id)\n"
									+ "REFERENCES indexed_file (id) MATCH SIMPLE)\n"
									+ "	</sql>\n"
									+ " </changeSet>\n"
									+ "\n"
									+ "\n"
									+ "<changeSet author=\"talend\" id=\"1382580250144-10\">\n"
									+ "        <sql>\n"
									+ "ALTER TABLE anfog_rt_trajectory_wms\n"
									+ "ALTER COLUMN geom TYPE geometry(GEOMETRY, 4326)\n"
									+ "USING ST_SetSRID(geom,4326);\n"
									+ "CREATE INDEX anfog_rt_trajectory_wms_gist_idx ON anfog_rt_trajectory_wms USING GIST (geom); \n"
									+ "	</sql>\n"
									+ " </changeSet>\n"
									+ "\n"
									+ "<!-- Make sure only valid geometries can be inserted -->\n"
									+ "	<changeSet author=\"talend\" id=\"1382580250144-1\">\n"
									+ "     \n"
									+ "    		<sql>\n"
									+ "ALTER TABLE  anfog_rt_trajectory_wms ADD CHECK (ST_IsValid(geom))</sql>\n"
									+ "	</changeSet>\n"
									+ "\n"
									+ "<changeSet author=\"talend\" id=\"1382580250144-6\">\n"
									+ "        <sql>\n"
									+ "CREATE OR REPLACE VIEW anfog_rt_trajectory_data AS \n"
									+ " SELECT file_id, \n"
									+ "	\"TIME\", \n"
									+ "	\"LATITUDE\", \n"
									+ "	\"LONGITUDE\",\n"
									+ "	\"DEPTH\", \n"
									+ "	\"TEMP\",\n"
									+ "	\"PSAL\",   \n"
									+ "	\"DOXY\",\n"
									+ "	\"CDOM\", \n"
									+ "	\"FLU2\", \n"
									+ "	\"UCUR\", \n"
									+ "	\"VCUR\",\n"
									+ " 	\"PRES\" ,\n"
									+ "	\"CNDC\" ,\n"
									+ "	\"HEAD\" ,\n"
									+ "	\"UCUR_GPS\" ,\n"
									+ "	\"VCUR_GPS\" ,\n"
									+ "	\"VBSC\" ,\n"
									+ "	geom\n"
									+ "	FROM measurements\n"
									+ "  ORDER BY measurements.\"TIME\";\n"
									+ "	</sql>\n"
									+ " </changeSet>\n"
									+ "\n"
									+ "<changeSet author=\"talend\" id=\"1382580250144-9\">\n"
									+ "        <sql>\n"
									+ "CREATE OR REPLACE VIEW anfog_rt_trajectory_map AS \n"
									+ " SELECT file_id,\n"
									+ "	deployment_name,\n"
									+ "	platform_type,\n"
									+ "	platform_code,\n"
									+ "	dive_number,\n"
									+ "	time_coverage_start,\n"
									+ "	time_coverage_end,\n"
									+ "	\"TEMP_b\" , \n"
									+ "	\"PSAL_b\" ,\n"
									+ "	\"DOXY_b\" ,\n"
									+ "	\"DEPTH_b\",\n"
									+ "	\"FLU2_b\" ,\n"
									+ "	\"CDOM_b\" ,\n"
									+ "	\"UCUR_b\" ,\n"
									+ "	\"VCUR_b\" ,\n"
									+ "	\"PRES_b\" ,\n"
									+ "	\"CNDC_b\" ,\n"
									+ "	\"HEAD_b\" ,\n"
									+ "	\"UCUR_GPS_b\" ,\n"
									+ "	\"VCUR_GPS_b\" ,\n"
									+ "	\"VBSC_b\" ,\n"
									+ "	 geom\n"
									+ "   FROM anfog_rt_trajectory_wms\n"
									+ "	</sql>\n"
									+ " </changeSet>\n"
									+ "\n"
									+ "\n"
									+ "\n"
									+ "</databaseChangeLog>\n"
									+ "");
					out_iPostgresqlDbUpdate_1.flush();

					String fileName_iPostgresqlDbUpdate_1 = "changelog.xml";
					String basePath_iPostgresqlDbUpdate_1 = tempDir_iPostgresqlDbUpdate_1
							.getAbsolutePath();

					System.out.println("***********************");
					System.out.println("conn host:"
							+ context.metadataDb_RT_Server + ", port:"
							+ context.metadataDb_RT_Port + ", schema:"
							+ context.metadataDb_RT_Schema + ", name:"
							+ context.metadataDb_RT_Database + ", user:"
							+ context.metadataDb_RT_Login);

					String url_iPostgresqlDbUpdate_1 = "jdbc:postgresql://"
							+ context.metadataDb_RT_Server + ":"
							+ context.metadataDb_RT_Port + "/"
							+ context.metadataDb_RT_Database;

					String schema_iPostgresqlDbUpdate_1 = context.metadataDb_RT_Schema;

					String userName_iPostgresqlDbUpdate_1 = context.metadataDb_RT_Login;
					String password_iPostgresqlDbUpdate_1 = context.metadataDb_RT_Password;

					System.out.println("url_cid:" + url_iPostgresqlDbUpdate_1);
					System.out.println("schema_cid:"
							+ schema_iPostgresqlDbUpdate_1);
					System.out.println("userName_cid:"
							+ userName_iPostgresqlDbUpdate_1);

					java.sql.Connection conn_iPostgresqlDbUpdate_1 = null;
					liquibase.Liquibase liquibase_iPostgresqlDbUpdate_1 = null;

					try {
						java.lang.Class.forName("org.postgresql.Driver");
						conn_iPostgresqlDbUpdate_1 = java.sql.DriverManager
								.getConnection(url_iPostgresqlDbUpdate_1,
										userName_iPostgresqlDbUpdate_1,
										password_iPostgresqlDbUpdate_1);
						conn_iPostgresqlDbUpdate_1.setAutoCommit(false);

						liquibase.database.Database database_iPostgresqlDbUpdate_1 = liquibase.database.DatabaseFactory
								.getInstance()
								.findCorrectDatabaseImplementation(
										new liquibase.database.jvm.JdbcConnection(
												conn_iPostgresqlDbUpdate_1));
						database_iPostgresqlDbUpdate_1
								.setDefaultSchemaName(schema_iPostgresqlDbUpdate_1);
						liquibase_iPostgresqlDbUpdate_1 = new liquibase.Liquibase(
								fileName_iPostgresqlDbUpdate_1,
								new liquibase.resource.FileSystemResourceAccessor(
										basePath_iPostgresqlDbUpdate_1),
								database_iPostgresqlDbUpdate_1);

						liquibase_iPostgresqlDbUpdate_1.update(null);
					} finally {
						if (conn_iPostgresqlDbUpdate_1 != null) {
							conn_iPostgresqlDbUpdate_1.rollback();
							conn_iPostgresqlDbUpdate_1.close();
						}
						System.out
								.println("***** completed finally block ***********");
					}

				} finally {
					System.out.println("In finally block");
					if (tempFile_iPostgresqlDbUpdate_1 != null)
						tempFile_iPostgresqlDbUpdate_1.delete();
					if (tempDir_iPostgresqlDbUpdate_1 != null)
						tempDir_iPostgresqlDbUpdate_1.delete();
					if (out_iPostgresqlDbUpdate_1 != null)
						out_iPostgresqlDbUpdate_1.close();
				}

				/**
				 * [iPostgresqlDbUpdate_1 begin ] stop
				 */
				/**
				 * [iPostgresqlDbUpdate_1 main ] start
				 */

				currentComponent = "iPostgresqlDbUpdate_1";

				tos_count_iPostgresqlDbUpdate_1++;

				/**
				 * [iPostgresqlDbUpdate_1 main ] stop
				 */
				NB_ITERATE_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.metadataDb_RT_Server + ":"
						+ context.metadataDb_RT_Port + "/"
						+ context.metadataDb_RT_Database;

				String userName_tPostgresqlConnection_1 = context.metadataDb_RT_Login;

				String password_tPostgresqlConnection_1 = context.metadataDb_RT_Password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								userName_tPostgresqlConnection_1,
								password_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1.setAutoCommit(false);

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.metadataDb_RT_Schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());

				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_2Process(globalMap);
				tPostgresqlClose_1Process(globalMap);

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

				/**
				 * [iPostgresqlDbUpdate_1 end ] start
				 */

				currentComponent = "iPostgresqlDbUpdate_1";

				ok_Hash.put("iPostgresqlDbUpdate_1", true);
				end_Hash.put("iPostgresqlDbUpdate_1", System
						.currentTimeMillis());

				/**
				 * [iPostgresqlDbUpdate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iPostgresqlDbUpdate_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_CreateWMS_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_CreateWMS_RT = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int file_id;

		public int getFile_id() {
			return this.file_id;
		}

		public String deployment_name;

		public String getDeployment_name() {
			return this.deployment_name;
		}

		public String platform_type;

		public String getPlatform_type() {
			return this.platform_type;
		}

		public String platform_code;

		public String getPlatform_code() {
			return this.platform_code;
		}

		public String dive_number;

		public String getDive_number() {
			return this.dive_number;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.file_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.file_id != other.file_id)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.file_id = this.file_id;
			other.deployment_name = this.deployment_name;
			other.platform_type = this.platform_type;
			other.platform_code = this.platform_code;
			other.dive_number = this.dive_number;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.file_id = this.file_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_CreateWMS_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_CreateWMS_RT.length == 0) {
						commonByteArray_ANFOG_DM_CreateWMS_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_CreateWMS_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_CreateWMS_RT, 0, length);
				strReturn = new String(commonByteArray_ANFOG_DM_CreateWMS_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_CreateWMS_RT) {

				try {

					int length = 0;

					this.file_id = dis.readInt();

					this.deployment_name = readString(dis);

					this.platform_type = readString(dis);

					this.platform_code = readString(dis);

					this.dive_number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.file_id);

				// String

				writeString(this.deployment_name, dos);

				// String

				writeString(this.platform_type, dos);

				// String

				writeString(this.platform_code, dos);

				// String

				writeString(this.dive_number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",deployment_name=" + deployment_name);
			sb.append(",platform_type=" + platform_type);
			sb.append(",platform_code=" + platform_code);
			sb.append(",dive_number=" + dive_number);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.file_id, other.file_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System
						.currentTimeMillis());
				currentComponent = "tDBOutput_1";

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "deployment_id";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1
							+ "\".\"" + "deployment_id";
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tDBOutput_1
								+ "\" WHERE \"file_id\" = ?");
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"file_id\",\"deployment_name\",\"platform_type\",\"platform_code\",\"dive_number\") VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \""
						+ tableName_tDBOutput_1
						+ "\" SET \"deployment_name\" = ?,\"platform_type\" = ?,\"platform_code\" = ?,\"dive_number\" = ? WHERE \"file_id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "  WITH table_1 AS (SELECT file_id, substring(value from '[^ ]*$') AS deployment_name FROM attribute WHERE name='title' ), table_2 AS (SELECT file_id,platform_code,platform_id,        CASE WHEN platform_id='SG' THEN  'seaglider'             ELSE  'slocum glider'               END AS platform_type     FROM (select file_id, value as platform_code, 	substring(value from '^[A-Z]{2}') as platform_id  	 FROM attribute WHERE name='platform_code'   	ORDER BY file_id) as platfrom_id), table_a AS (SELECT file_id, substring(value from '[0-9]{3}') AS comment FROM attribute WHERE container = 'global' AND name = 'comment'), table_b AS (SELECT file_id, substring(value from '[0-9]{4}') AS year FROM attribute WHERE name = 'date_created'), table_c AS (SELECT file_id, substring(value from '[0-9]{3}') AS title FROM attribute WHERE name='title') SELECT table_1.file_id,table_1.deployment_name,table_2.platform_type,table_2.platform_code, year::numeric, CASE WHEN year::numeric >= 2013 THEN title ELSE comment END AS dive_number FROM table_b JOIN table_a ON table_b.file_id = table_a.file_id JOIN table_c ON table_b.file_id = table_c.file_id JOIN table_1 ON table_b.file_id = table_1.file_id  JOIN table_2 ON table_b.file_id=table_2.file_id";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					if (colQtyInRs_tPostgresqlInput_1 < 1) {
						row2.file_id = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(1) != null) {
							row2.file_id = rs_tPostgresqlInput_1.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 2) {
						row2.deployment_name = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(2);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2.deployment_name = tmpContent_tPostgresqlInput_1;
						} else {
							row2.deployment_name = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 3) {
						row2.platform_type = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(3);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2.platform_type = tmpContent_tPostgresqlInput_1;
						} else {
							row2.platform_type = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 4) {
						row2.platform_code = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(4);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2.platform_code = tmpContent_tPostgresqlInput_1;
						} else {
							row2.platform_code = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 5) {
						row2.dive_number = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(5);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2.dive_number = tmpContent_tPostgresqlInput_1;
						} else {
							row2.dive_number = null;
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					whetherReject_tDBOutput_1 = false;

					pstmt_tDBOutput_1.setInt(1, row2.file_id);

					java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1
							.executeQuery();
					int checkCount_tDBOutput_1 = -1;
					while (rs_tDBOutput_1.next()) {
						checkCount_tDBOutput_1 = rs_tDBOutput_1
								.getInt(1);
					}
					if (checkCount_tDBOutput_1 > 0) {
						if (row2.deployment_name == null) {
							pstmtUpdate_tDBOutput_1.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(1,
									row2.deployment_name);
						}

						if (row2.platform_type == null) {
							pstmtUpdate_tDBOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(2,
									row2.platform_type);
						}

						if (row2.platform_code == null) {
							pstmtUpdate_tDBOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(3,
									row2.platform_code);
						}

						if (row2.dive_number == null) {
							pstmtUpdate_tDBOutput_1.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tDBOutput_1.setString(4,
									row2.dive_number);
						}

						pstmtUpdate_tDBOutput_1.setInt(
								5 + count_tDBOutput_1, row2.file_id);

						try {
							updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
									+ pstmtUpdate_tDBOutput_1
											.executeUpdate();
						} catch (java.lang.Exception e) {
							whetherReject_tDBOutput_1 = true;
							throw (e);
						}
					} else {
						pstmtInsert_tDBOutput_1.setInt(1, row2.file_id);

						if (row2.deployment_name == null) {
							pstmtInsert_tDBOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(2,
									row2.deployment_name);
						}

						if (row2.platform_type == null) {
							pstmtInsert_tDBOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(3,
									row2.platform_type);
						}

						if (row2.platform_code == null) {
							pstmtInsert_tDBOutput_1.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(4,
									row2.platform_code);
						}

						if (row2.dive_number == null) {
							pstmtInsert_tDBOutput_1.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmtInsert_tDBOutput_1.setString(5,
									row2.dive_number);
						}

						try {
							insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
									+ pstmtInsert_tDBOutput_1
											.executeUpdate();
						} catch (java.lang.Exception e) {
							whetherReject_tDBOutput_1 = true;
							throw (e);
						}
					}
					nb_line_tDBOutput_1++;
					if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {

					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {

					pstmtUpdate_tDBOutput_1.close();

				}
				if (pstmtInsert_tDBOutput_1 != null) {

					pstmtInsert_tDBOutput_1.close();

				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();

				}

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE",
						nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_CreateWMS_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_CreateWMS_RT = new byte[0];

		public int file_id;

		public int getFile_id() {
			return this.file_id;
		}

		public String deployment_name;

		public String getDeployment_name() {
			return this.deployment_name;
		}

		public String platform_type;

		public String getPlatform_type() {
			return this.platform_type;
		}

		public String platform_code;

		public String getPlatform_code() {
			return this.platform_code;
		}

		public String dive_number;

		public String getDive_number() {
			return this.dive_number;
		}

		public String time_coverage_start;

		public String getTime_coverage_start() {
			return this.time_coverage_start;
		}

		public String time_coverage_end;

		public String getTime_coverage_end() {
			return this.time_coverage_end;
		}

		public String geospatial_vertical_min;

		public String getGeospatial_vertical_min() {
			return this.geospatial_vertical_min;
		}

		public String geospatial_vertical_max;

		public String getGeospatial_vertical_max() {
			return this.geospatial_vertical_max;
		}

		public Boolean TEMP_b;

		public Boolean getTEMP_b() {
			return this.TEMP_b;
		}

		public Boolean PSAL_b;

		public Boolean getPSAL_b() {
			return this.PSAL_b;
		}

		public Boolean FLU2_b;

		public Boolean getFLU2_b() {
			return this.FLU2_b;
		}

		public Boolean DOXY_b;

		public Boolean getDOXY_b() {
			return this.DOXY_b;
		}

		public Boolean CDOM_b;

		public Boolean getCDOM_b() {
			return this.CDOM_b;
		}

		public Boolean UCUR_b;

		public Boolean getUCUR_b() {
			return this.UCUR_b;
		}

		public Boolean VCUR_b;

		public Boolean getVCUR_b() {
			return this.VCUR_b;
		}

		public Boolean DEPTH_b;

		public Boolean getDEPTH_b() {
			return this.DEPTH_b;
		}

		public Boolean PRES_b;

		public Boolean getPRES_b() {
			return this.PRES_b;
		}

		public Boolean CNDC_b;

		public Boolean getCNDC_b() {
			return this.CNDC_b;
		}

		public Boolean HEAD_b;

		public Boolean getHEAD_b() {
			return this.HEAD_b;
		}

		public Boolean UCUR_GPS_b;

		public Boolean getUCUR_GPS_b() {
			return this.UCUR_GPS_b;
		}

		public Boolean VCUR_GPS_b;

		public Boolean getVCUR_GPS_b() {
			return this.VCUR_GPS_b;
		}

		public Boolean VBSC_b;

		public Boolean getVBSC_b() {
			return this.VBSC_b;
		}

		public Object geom;

		public Object getGeom() {
			return this.geom;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_CreateWMS_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_CreateWMS_RT.length == 0) {
						commonByteArray_ANFOG_DM_CreateWMS_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_CreateWMS_RT = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANFOG_DM_CreateWMS_RT, 0, length);
				strReturn = new String(commonByteArray_ANFOG_DM_CreateWMS_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_CreateWMS_RT) {

				try {

					int length = 0;

					this.file_id = dis.readInt();

					this.deployment_name = readString(dis);

					this.platform_type = readString(dis);

					this.platform_code = readString(dis);

					this.dive_number = readString(dis);

					this.time_coverage_start = readString(dis);

					this.time_coverage_end = readString(dis);

					this.geospatial_vertical_min = readString(dis);

					this.geospatial_vertical_max = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TEMP_b = null;
					} else {
						this.TEMP_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PSAL_b = null;
					} else {
						this.PSAL_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FLU2_b = null;
					} else {
						this.FLU2_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DOXY_b = null;
					} else {
						this.DOXY_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CDOM_b = null;
					} else {
						this.CDOM_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UCUR_b = null;
					} else {
						this.UCUR_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VCUR_b = null;
					} else {
						this.VCUR_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DEPTH_b = null;
					} else {
						this.DEPTH_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRES_b = null;
					} else {
						this.PRES_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CNDC_b = null;
					} else {
						this.CNDC_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.HEAD_b = null;
					} else {
						this.HEAD_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UCUR_GPS_b = null;
					} else {
						this.UCUR_GPS_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VCUR_GPS_b = null;
					} else {
						this.VCUR_GPS_b = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.VBSC_b = null;
					} else {
						this.VBSC_b = dis.readBoolean();
					}

					this.geom = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.file_id);

				// String

				writeString(this.deployment_name, dos);

				// String

				writeString(this.platform_type, dos);

				// String

				writeString(this.platform_code, dos);

				// String

				writeString(this.dive_number, dos);

				// String

				writeString(this.time_coverage_start, dos);

				// String

				writeString(this.time_coverage_end, dos);

				// String

				writeString(this.geospatial_vertical_min, dos);

				// String

				writeString(this.geospatial_vertical_max, dos);

				// Boolean

				if (this.TEMP_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.TEMP_b);
				}

				// Boolean

				if (this.PSAL_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.PSAL_b);
				}

				// Boolean

				if (this.FLU2_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.FLU2_b);
				}

				// Boolean

				if (this.DOXY_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.DOXY_b);
				}

				// Boolean

				if (this.CDOM_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CDOM_b);
				}

				// Boolean

				if (this.UCUR_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.UCUR_b);
				}

				// Boolean

				if (this.VCUR_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.VCUR_b);
				}

				// Boolean

				if (this.DEPTH_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.DEPTH_b);
				}

				// Boolean

				if (this.PRES_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.PRES_b);
				}

				// Boolean

				if (this.CNDC_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CNDC_b);
				}

				// Boolean

				if (this.HEAD_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.HEAD_b);
				}

				// Boolean

				if (this.UCUR_GPS_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.UCUR_GPS_b);
				}

				// Boolean

				if (this.VCUR_GPS_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.VCUR_GPS_b);
				}

				// Boolean

				if (this.VBSC_b == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.VBSC_b);
				}

				// Object

				dos.writeObject(this.geom);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",deployment_name=" + deployment_name);
			sb.append(",platform_type=" + platform_type);
			sb.append(",platform_code=" + platform_code);
			sb.append(",dive_number=" + dive_number);
			sb.append(",time_coverage_start=" + time_coverage_start);
			sb.append(",time_coverage_end=" + time_coverage_end);
			sb.append(",geospatial_vertical_min=" + geospatial_vertical_min);
			sb.append(",geospatial_vertical_max=" + geospatial_vertical_max);
			sb.append(",TEMP_b=" + String.valueOf(TEMP_b));
			sb.append(",PSAL_b=" + String.valueOf(PSAL_b));
			sb.append(",FLU2_b=" + String.valueOf(FLU2_b));
			sb.append(",DOXY_b=" + String.valueOf(DOXY_b));
			sb.append(",CDOM_b=" + String.valueOf(CDOM_b));
			sb.append(",UCUR_b=" + String.valueOf(UCUR_b));
			sb.append(",VCUR_b=" + String.valueOf(VCUR_b));
			sb.append(",DEPTH_b=" + String.valueOf(DEPTH_b));
			sb.append(",PRES_b=" + String.valueOf(PRES_b));
			sb.append(",CNDC_b=" + String.valueOf(CNDC_b));
			sb.append(",HEAD_b=" + String.valueOf(HEAD_b));
			sb.append(",UCUR_GPS_b=" + String.valueOf(UCUR_GPS_b));
			sb.append(",VCUR_GPS_b=" + String.valueOf(VCUR_GPS_b));
			sb.append(",VBSC_b=" + String.valueOf(VBSC_b));
			sb.append(",geom=" + String.valueOf(geom));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System
						.currentTimeMillis());
				currentComponent = "tDBOutput_2";

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "anfog_rt_trajectory_wms";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2
							+ "\".\"" + "anfog_rt_trajectory_wms";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				conn_tDBOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"file_id\",\"deployment_name\",\"platform_type\",\"platform_code\",\"dive_number\",\"time_coverage_start\",\"time_coverage_end\",\"geospatial_vertical_min\",\"geospatial_vertical_max\",\"TEMP_b\",\"PSAL_b\",\"FLU2_b\",\"DOXY_b\",\"CDOM_b\",\"UCUR_b\",\"VCUR_b\",\"DEPTH_b\",\"PRES_b\",\"CNDC_b\",\"HEAD_b\",\"UCUR_GPS_b\",\"VCUR_GPS_b\",\"VBSC_b\",\"geom\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = " WITH  table_a AS(SELECT file_id, deployment_name,platform_type,platform_code,dive_number FROM deployment_id), table_b AS(SELECT file_id,time_coverage_start,time_coverage_end,geospatial_vertical_min,geospatial_vertical_max FROM deployments), data AS (SELECT file_id,  COUNT (\"TEMP\") AS \"TEMP\", COUNT(\"PSAL\") AS \"PSAL\", COUNT(\"FLU2\") AS \"FLU2\", COUNT(\"DOXY\") AS \"DOXY\", COUNT(\"CDOM\") AS \"CDOM\", COUNT(\"UCUR\") AS \"UCUR\", COUNT(\"VCUR\") AS \"VCUR\", COUNT(\"DEPTH\") AS \"DEPTH\",  COUNT(\"PRES\") AS \"PRES\", COUNT(\"CNDC\") AS \"CNDC\", COUNT(\"HEAD\") AS \"HEAD\", COUNT(\"UCUR_GPS\") AS \"UCUR_GPS\", COUNT(\"VCUR_GPS\") AS \"VCUR_GPS\", COUNT(\"VBSC\") AS \"VBSC\", ST_SimplifyPreserveTopology(make_trajectory(geom),0.005) AS geom FROM  measurements LEFT JOIN indexed_file ON measurements.file_id = indexed_file.id GROUP BY file_id)  SELECT data.file_id, table_a.deployment_name, table_a.platform_type, table_a.platform_code, table_a.dive_number, table_b.time_coverage_start, table_b.time_coverage_end, table_b.geospatial_vertical_min, table_b.geospatial_vertical_max, \"TEMP\" > 0  AS \"TEMP_b\", \"PSAL\" > 0  AS \"PSAL_b\", \"FLU2\" > 0  AS \"FLU2_b\", \"DOXY\" > 0  AS \"DOXY_b\", \"CDOM\" > 0  AS \"CDOM_b\", \"UCUR\" > 0  AS \"UCUR_b\", \"VCUR\" > 0  AS \"VCUR_b\", \"DEPTH\" > 0  AS \"DEPTH_b\", \"PRES\" > 0  AS \"PRES_b\", \"CNDC\" > 0  AS \"CNDC_b\", \"HEAD\" > 0  AS \"HEAD_b\",  \"UCUR_GPS\" > 0  AS \"UCUR_GPS_b\", \"VCUR_GPS\" > 0  AS \"VCUR_GPS_b\", \"VBSC\" > 0  AS \"VBSC_b\", geom FROM data  LEFT JOIN table_a ON data.file_id = table_a.file_id LEFT JOIN table_b ON data.file_id = table_b.file_id ";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
						.executeQuery(dbquery_tPostgresqlInput_2);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
						.getColumnCount();

				String tmpContent_tPostgresqlInput_2 = null;
				while (rs_tPostgresqlInput_2.next()) {
					nb_line_tPostgresqlInput_2++;

					if (colQtyInRs_tPostgresqlInput_2 < 1) {
						row1.file_id = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(1) != null) {
							row1.file_id = rs_tPostgresqlInput_2.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 2) {
						row1.deployment_name = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.deployment_name = tmpContent_tPostgresqlInput_2;
						} else {
							row1.deployment_name = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 3) {
						row1.platform_type = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(3);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.platform_type = tmpContent_tPostgresqlInput_2;
						} else {
							row1.platform_type = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 4) {
						row1.platform_code = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(4);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.platform_code = tmpContent_tPostgresqlInput_2;
						} else {
							row1.platform_code = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 5) {
						row1.dive_number = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(5);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.dive_number = tmpContent_tPostgresqlInput_2;
						} else {
							row1.dive_number = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 6) {
						row1.time_coverage_start = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(6);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.time_coverage_start = tmpContent_tPostgresqlInput_2;
						} else {
							row1.time_coverage_start = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 7) {
						row1.time_coverage_end = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(7);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.time_coverage_end = tmpContent_tPostgresqlInput_2;
						} else {
							row1.time_coverage_end = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 8) {
						row1.geospatial_vertical_min = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(8);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.geospatial_vertical_min = tmpContent_tPostgresqlInput_2;
						} else {
							row1.geospatial_vertical_min = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 9) {
						row1.geospatial_vertical_max = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(9);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row1.geospatial_vertical_max = tmpContent_tPostgresqlInput_2;
						} else {
							row1.geospatial_vertical_max = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 10) {
						row1.TEMP_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(10) != null) {
							row1.TEMP_b = rs_tPostgresqlInput_2.getBoolean(10);
						} else {
							row1.TEMP_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 11) {
						row1.PSAL_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(11) != null) {
							row1.PSAL_b = rs_tPostgresqlInput_2.getBoolean(11);
						} else {
							row1.PSAL_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 12) {
						row1.FLU2_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(12) != null) {
							row1.FLU2_b = rs_tPostgresqlInput_2.getBoolean(12);
						} else {
							row1.FLU2_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 13) {
						row1.DOXY_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(13) != null) {
							row1.DOXY_b = rs_tPostgresqlInput_2.getBoolean(13);
						} else {
							row1.DOXY_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 14) {
						row1.CDOM_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(14) != null) {
							row1.CDOM_b = rs_tPostgresqlInput_2.getBoolean(14);
						} else {
							row1.CDOM_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 15) {
						row1.UCUR_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(15) != null) {
							row1.UCUR_b = rs_tPostgresqlInput_2.getBoolean(15);
						} else {
							row1.UCUR_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 16) {
						row1.VCUR_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(16) != null) {
							row1.VCUR_b = rs_tPostgresqlInput_2.getBoolean(16);
						} else {
							row1.VCUR_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 17) {
						row1.DEPTH_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(17) != null) {
							row1.DEPTH_b = rs_tPostgresqlInput_2.getBoolean(17);
						} else {
							row1.DEPTH_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 18) {
						row1.PRES_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(18) != null) {
							row1.PRES_b = rs_tPostgresqlInput_2.getBoolean(18);
						} else {
							row1.PRES_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 19) {
						row1.CNDC_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(19) != null) {
							row1.CNDC_b = rs_tPostgresqlInput_2.getBoolean(19);
						} else {
							row1.CNDC_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 20) {
						row1.HEAD_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(20) != null) {
							row1.HEAD_b = rs_tPostgresqlInput_2.getBoolean(20);
						} else {
							row1.HEAD_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 21) {
						row1.UCUR_GPS_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(21) != null) {
							row1.UCUR_GPS_b = rs_tPostgresqlInput_2
									.getBoolean(21);
						} else {
							row1.UCUR_GPS_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 22) {
						row1.VCUR_GPS_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(22) != null) {
							row1.VCUR_GPS_b = rs_tPostgresqlInput_2
									.getBoolean(22);
						} else {
							row1.VCUR_GPS_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 23) {
						row1.VBSC_b = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(23) != null) {
							row1.VBSC_b = rs_tPostgresqlInput_2.getBoolean(23);
						} else {
							row1.VBSC_b = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 24) {
						row1.geom = null;
					} else {

						if (rs_tPostgresqlInput_2.getObject(24) != null) {
							row1.geom = rs_tPostgresqlInput_2.getObject(24);
						} else {
							row1.geom = null;
						}

					}

					/**
					 * [tPostgresqlInput_2 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_2 main ] start
					 */

					currentComponent = "tPostgresqlInput_2";

					tos_count_tPostgresqlInput_2++;

					/**
					 * [tPostgresqlInput_2 main ] stop
					 */

					/**
					 * [tDBOutput_2 main ] start
					 */

					currentComponent = "tDBOutput_2";

					whetherReject_tDBOutput_2 = false;
					pstmt_tDBOutput_2.setInt(1, row1.file_id);

					if (row1.deployment_name == null) {
						pstmt_tDBOutput_2.setNull(2,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(2,
								row1.deployment_name);
					}

					if (row1.platform_type == null) {
						pstmt_tDBOutput_2.setNull(3,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(3,
								row1.platform_type);
					}

					if (row1.platform_code == null) {
						pstmt_tDBOutput_2.setNull(4,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(4,
								row1.platform_code);
					}

					if (row1.dive_number == null) {
						pstmt_tDBOutput_2.setNull(5,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2
								.setString(5, row1.dive_number);
					}

					if (row1.time_coverage_start == null) {
						pstmt_tDBOutput_2.setNull(6,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(6,
								row1.time_coverage_start);
					}

					if (row1.time_coverage_end == null) {
						pstmt_tDBOutput_2.setNull(7,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(7,
								row1.time_coverage_end);
					}

					if (row1.geospatial_vertical_min == null) {
						pstmt_tDBOutput_2.setNull(8,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(8,
								row1.geospatial_vertical_min);
					}

					if (row1.geospatial_vertical_max == null) {
						pstmt_tDBOutput_2.setNull(9,
								java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_2.setString(9,
								row1.geospatial_vertical_max);
					}

					if (row1.TEMP_b == null) {
						pstmt_tDBOutput_2.setNull(10,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(10, row1.TEMP_b);
					}

					if (row1.PSAL_b == null) {
						pstmt_tDBOutput_2.setNull(11,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(11, row1.PSAL_b);
					}

					if (row1.FLU2_b == null) {
						pstmt_tDBOutput_2.setNull(12,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(12, row1.FLU2_b);
					}

					if (row1.DOXY_b == null) {
						pstmt_tDBOutput_2.setNull(13,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(13, row1.DOXY_b);
					}

					if (row1.CDOM_b == null) {
						pstmt_tDBOutput_2.setNull(14,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(14, row1.CDOM_b);
					}

					if (row1.UCUR_b == null) {
						pstmt_tDBOutput_2.setNull(15,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(15, row1.UCUR_b);
					}

					if (row1.VCUR_b == null) {
						pstmt_tDBOutput_2.setNull(16,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(16, row1.VCUR_b);
					}

					if (row1.DEPTH_b == null) {
						pstmt_tDBOutput_2.setNull(17,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(17, row1.DEPTH_b);
					}

					if (row1.PRES_b == null) {
						pstmt_tDBOutput_2.setNull(18,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(18, row1.PRES_b);
					}

					if (row1.CNDC_b == null) {
						pstmt_tDBOutput_2.setNull(19,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(19, row1.CNDC_b);
					}

					if (row1.HEAD_b == null) {
						pstmt_tDBOutput_2.setNull(20,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(20, row1.HEAD_b);
					}

					if (row1.UCUR_GPS_b == null) {
						pstmt_tDBOutput_2.setNull(21,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(21,
								row1.UCUR_GPS_b);
					}

					if (row1.VCUR_GPS_b == null) {
						pstmt_tDBOutput_2.setNull(22,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(22,
								row1.VCUR_GPS_b);
					}

					if (row1.VBSC_b == null) {
						pstmt_tDBOutput_2.setNull(23,
								java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_2.setBoolean(23, row1.VBSC_b);
					}

					if (row1.geom == null) {
						pstmt_tDBOutput_2.setNull(24,
								java.sql.Types.OTHER);
					} else {
						pstmt_tDBOutput_2.setObject(24, row1.geom);
					}

					pstmt_tDBOutput_2.addBatch();
					nb_line_tDBOutput_2++;

					batchSizeCounter_tDBOutput_2++;

					if (!whetherReject_tDBOutput_2) {
					}
					if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
						try {
							int countSum_tDBOutput_2 = 0;
							for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
									.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
										: countEach_tDBOutput_2);
							}

							insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

							batchSizeCounter_tDBOutput_2 = 0;
						} catch (java.sql.BatchUpdateException e) {

							System.err
									.println("Contents of BatchUpdateException:");
							System.err.println(" Update counts: ");
							int[] updateCounts = e.getUpdateCounts();
							for (int i = 0; i < updateCounts.length; i++) {
								System.err.println("  Statement " + i + ":"
										+ updateCounts[i]);
							}

							java.sql.SQLException se = e;
							do {
								System.err.println("SQL exception:");
								System.err.println(" Message: "
										+ se.getMessage());
								System.err.println(" SQLSTATE: "
										+ se.getSQLState());
								System.err.println(" Error code: "
										+ se.getErrorCode());
								se = se.getNextException();
							} while (se != null);

							throw (e);

						}

					}

					tos_count_tDBOutput_2++;

					/**
					 * [tDBOutput_2 main ] stop
					 */

					/**
					 * [tPostgresqlInput_2 end ] start
					 */

					currentComponent = "tPostgresqlInput_2";

				}
				stmt_tPostgresqlInput_2.close();

				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null) {
						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e) {

					System.err.println("Contents of BatchUpdateException:");
					System.err.println(" Update counts: ");
					int[] updateCounts = e.getUpdateCounts();
					for (int i = 0; i < updateCounts.length; i++) {
						System.err.println("  Statement " + i + ":"
								+ updateCounts[i]);
					}

					java.sql.SQLException se = e;
					do {
						System.err.println("SQL exception:");
						System.err.println(" Message: " + se.getMessage());
						System.err.println(" SQLSTATE: " + se.getSQLState());
						System.err.println(" Error code: " + se.getErrorCode());
						se = se.getNextException();
					} while (se != null);

					throw (e);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();

				}

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE",
						nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tPostgresqlCommit_1Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					conn_tPostgresqlCommit_1.commit();
					conn_tPostgresqlCommit_1.close();
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_1", false);
				start_Hash
						.put("tPostgresqlClose_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlClose_1";

				int tos_count_tPostgresqlClose_1 = 0;

				/**
				 * [tPostgresqlClose_1 begin ] stop
				 */
				/**
				 * [tPostgresqlClose_1 main ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlClose_1 != null
						&& !conn_tPostgresqlClose_1.isClosed()) {
					conn_tPostgresqlClose_1.close();
				}

				tos_count_tPostgresqlClose_1++;

				/**
				 * [tPostgresqlClose_1 main ] stop
				 */
				/**
				 * [tPostgresqlClose_1 end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				ok_Hash.put("tPostgresqlClose_1", true);
				end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final CreateWMS_RT CreateWMS_RTClass = new CreateWMS_RT();

		int exitCode = CreateWMS_RTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = CreateWMS_RT.class.getClassLoader()
					.getResourceAsStream(
							"anfog_dm/createwms_rt_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.logDir = (String) context.getProperty("logDir");

			context.paramFile = (String) context.getProperty("paramFile");

			context.metadataDb_RT_Database = (String) context
					.getProperty("metadataDb_RT_Database");

			context.metadataDb_RT_Login = (String) context
					.getProperty("metadataDb_RT_Login");

			context.metadataDb_RT_Password = (java.lang.String) context
					.getProperty("metadataDb_RT_Password");

			context.metadataDb_RT_Port = (String) context
					.getProperty("metadataDb_RT_Port");

			context.metadataDb_RT_Schema = (String) context
					.getProperty("metadataDb_RT_Schema");

			context.metadataDb_RT_Server = (String) context
					.getProperty("metadataDb_RT_Server");

			context.exclude = (String) context.getProperty("exclude");

			try {
				context.fileId = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("fileId"));
			} catch (NumberFormatException e) {
				context.fileId = null;
			}

			context.include = (String) context.getProperty("include");

			context.sourceDir = (String) context.getProperty("sourceDir");

			context.url = (String) context.getProperty("url");

			context.metadataDb_Password = (java.lang.String) context
					.getProperty("metadataDb_Password");

			context.metadataDb_Server = (String) context
					.getProperty("metadataDb_Server");

			context.metadataDb_Schema = (String) context
					.getProperty("metadataDb_Schema");

			context.metadataDb_Database = (String) context
					.getProperty("metadataDb_Database");

			context.metadataDb_Login = (String) context
					.getProperty("metadataDb_Login");

			context.metadataDb_Port = (String) context
					.getProperty("metadataDb_Port");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("logDir")) {
				context.logDir = (String) parentContextMap.get("logDir");
			}
			if (parentContextMap.containsKey("paramFile")) {
				context.paramFile = (String) parentContextMap.get("paramFile");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Database")) {
				context.metadataDb_RT_Database = (String) parentContextMap
						.get("metadataDb_RT_Database");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Login")) {
				context.metadataDb_RT_Login = (String) parentContextMap
						.get("metadataDb_RT_Login");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Password")) {
				context.metadataDb_RT_Password = (java.lang.String) parentContextMap
						.get("metadataDb_RT_Password");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Port")) {
				context.metadataDb_RT_Port = (String) parentContextMap
						.get("metadataDb_RT_Port");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Schema")) {
				context.metadataDb_RT_Schema = (String) parentContextMap
						.get("metadataDb_RT_Schema");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Server")) {
				context.metadataDb_RT_Server = (String) parentContextMap
						.get("metadataDb_RT_Server");
			}
			if (parentContextMap.containsKey("exclude")) {
				context.exclude = (String) parentContextMap.get("exclude");
			}
			if (parentContextMap.containsKey("fileId")) {
				context.fileId = (Long) parentContextMap.get("fileId");
			}
			if (parentContextMap.containsKey("include")) {
				context.include = (String) parentContextMap.get("include");
			}
			if (parentContextMap.containsKey("sourceDir")) {
				context.sourceDir = (String) parentContextMap.get("sourceDir");
			}
			if (parentContextMap.containsKey("url")) {
				context.url = (String) parentContextMap.get("url");
			}
			if (parentContextMap.containsKey("metadataDb_Password")) {
				context.metadataDb_Password = (java.lang.String) parentContextMap
						.get("metadataDb_Password");
			}
			if (parentContextMap.containsKey("metadataDb_Server")) {
				context.metadataDb_Server = (String) parentContextMap
						.get("metadataDb_Server");
			}
			if (parentContextMap.containsKey("metadataDb_Schema")) {
				context.metadataDb_Schema = (String) parentContextMap
						.get("metadataDb_Schema");
			}
			if (parentContextMap.containsKey("metadataDb_Database")) {
				context.metadataDb_Database = (String) parentContextMap
						.get("metadataDb_Database");
			}
			if (parentContextMap.containsKey("metadataDb_Login")) {
				context.metadataDb_Login = (String) parentContextMap
						.get("metadataDb_Login");
			}
			if (parentContextMap.containsKey("metadataDb_Port")) {
				context.metadataDb_Port = (String) parentContextMap
						.get("metadataDb_Port");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			iIncludeSdiLibraries_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_iIncludeSdiLibraries_1) {

			e_iIncludeSdiLibraries_1.printStackTrace();
			globalMap.put("iIncludeSdiLibraries_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : CreateWMS_RT");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 103689 characters generated by Talend Open Studio for Data Integration on the
 * January 15, 2014 1:09:04 PM EST
 ************************************************************************************************/
