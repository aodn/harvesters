// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.3.r96646)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package anfog_dm.harvestfilesystemmetadata_rt_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.GeometryUtility;
import routines.Numeric;
import routines.NetCDFUtils;
import routines.GeoOperation;
import routines.DAPUtils;
import routines.Mathematical;
import routines.ArgoUtils;
import routines.Relational;
import routines.TalendDate;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: HarvestFileSystemMetadata_RT Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.3.r96646
 * @status 
 */
public class HarvestFileSystemMetadata_RT implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (logDir != null) {

				this.setProperty("logDir", logDir.toString());

			}

			if (paramFile != null) {

				this.setProperty("paramFile", paramFile.toString());

			}

			if (metadataDb_RT_Database != null) {

				this.setProperty("metadataDb_RT_Database",
						metadataDb_RT_Database.toString());

			}

			if (metadataDb_RT_Login != null) {

				this.setProperty("metadataDb_RT_Login", metadataDb_RT_Login
						.toString());

			}

			if (metadataDb_RT_Password != null) {

				this.setProperty("metadataDb_RT_Password",
						metadataDb_RT_Password.toString());

			}

			if (metadataDb_RT_Port != null) {

				this.setProperty("metadataDb_RT_Port", metadataDb_RT_Port
						.toString());

			}

			if (metadataDb_RT_Schema != null) {

				this.setProperty("metadataDb_RT_Schema", metadataDb_RT_Schema
						.toString());

			}

			if (metadataDb_RT_Server != null) {

				this.setProperty("metadataDb_RT_Server", metadataDb_RT_Server
						.toString());

			}

			if (exclude != null) {

				this.setProperty("exclude", exclude.toString());

			}

			if (fileId != null) {

				this.setProperty("fileId", fileId.toString());

			}

			if (include != null) {

				this.setProperty("include", include.toString());

			}

			if (sourceDir != null) {

				this.setProperty("sourceDir", sourceDir.toString());

			}

			if (url != null) {

				this.setProperty("url", url.toString());

			}

		}

		public String logDir;

		public String getLogDir() {
			return this.logDir;
		}

		public String paramFile;

		public String getParamFile() {
			return this.paramFile;
		}

		public String metadataDb_RT_Database;

		public String getMetadataDb_RT_Database() {
			return this.metadataDb_RT_Database;
		}

		public String metadataDb_RT_Login;

		public String getMetadataDb_RT_Login() {
			return this.metadataDb_RT_Login;
		}

		public java.lang.String metadataDb_RT_Password;

		public java.lang.String getMetadataDb_RT_Password() {
			return this.metadataDb_RT_Password;
		}

		public String metadataDb_RT_Port;

		public String getMetadataDb_RT_Port() {
			return this.metadataDb_RT_Port;
		}

		public String metadataDb_RT_Schema;

		public String getMetadataDb_RT_Schema() {
			return this.metadataDb_RT_Schema;
		}

		public String metadataDb_RT_Server;

		public String getMetadataDb_RT_Server() {
			return this.metadataDb_RT_Server;
		}

		public String exclude;

		public String getExclude() {
			return this.exclude;
		}

		public Long fileId;

		public Long getFileId() {
			return this.fileId;
		}

		public String include;

		public String getInclude() {
			return this.include;
		}

		public String sourceDir;

		public String getSourceDir() {
			return this.sourceDir;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "HarvestFileSystemMetadata_RT";
	private final String projectName = "ANFOG_DM";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					HarvestFileSystemMetadata_RT.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(HarvestFileSystemMetadata_RT.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void iNetCDFGlobalAttribute_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iNetCDFGlobalAttribute_1", System.currentTimeMillis());

		status = "failure";

		iNetCDFGlobalAttribute_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		iNetCDFGlobalAttribute_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_1", System.currentTimeMillis());

		status = "failure";

		iNetCDFGlobalAttribute_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void iNetCDFVariable_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iNetCDFVariable_1", System.currentTimeMillis());

		status = "failure";

		iNetCDFVariable_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		iNetCDFVariable_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_3", System.currentTimeMillis());

		status = "failure";

		iNetCDFVariable_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void iNetCDFVariableAttribute_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("iNetCDFVariableAttribute_1", System.currentTimeMillis());

		status = "failure";

		iNetCDFVariableAttribute_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		iNetCDFVariableAttribute_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_4", System.currentTimeMillis());

		status = "failure";

		iNetCDFVariableAttribute_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void iNetCDFGlobalAttribute_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void iNetCDFVariable_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void iNetCDFVariableAttribute_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.metadataDb_RT_Server + ":"
						+ context.metadataDb_RT_Port + "/"
						+ context.metadataDb_RT_Database;

				String userName_tPostgresqlConnection_1 = context.metadataDb_RT_Login;

				String password_tPostgresqlConnection_1 = context.metadataDb_RT_Password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								userName_tPostgresqlConnection_1,
								password_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1.setAutoCommit(false);

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.metadataDb_RT_Schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1", System
						.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_1", false);
				start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlRow_1";

				int tos_count_tPostgresqlRow_1 = 0;

				java.sql.Connection conn_tPostgresqlRow_1 = null;
				conn_tPostgresqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1
						.createStatement();
				String query_tPostgresqlRow_1 = "";
				boolean whetherReject_tPostgresqlRow_1 = false;

				/**
				 * [tPostgresqlRow_1 begin ] stop
				 */
				/**
				 * [tPostgresqlRow_1 main ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				query_tPostgresqlRow_1 = "delete from attribute where file_id = '"
						+ context.fileId + "'";
				whetherReject_tPostgresqlRow_1 = false;

				globalMap.put("tPostgresqlRow_1_QUERY", query_tPostgresqlRow_1);
				try {
					stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_1 = true;
					throw (e);
				}
				if (!whetherReject_tPostgresqlRow_1) {
				}

				tos_count_tPostgresqlRow_1++;

				/**
				 * [tPostgresqlRow_1 main ] stop
				 */
				/**
				 * [tPostgresqlRow_1 end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				stmt_tPostgresqlRow_1.close();

				ok_Hash.put("tPostgresqlRow_1", true);
				end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlRow_2Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			iNetCDFGlobalAttribute_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_2", false);
				start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlRow_2";

				int tos_count_tPostgresqlRow_2 = 0;

				java.sql.Connection conn_tPostgresqlRow_2 = null;
				conn_tPostgresqlRow_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2
						.createStatement();
				String query_tPostgresqlRow_2 = "";
				boolean whetherReject_tPostgresqlRow_2 = false;

				/**
				 * [tPostgresqlRow_2 begin ] stop
				 */
				/**
				 * [tPostgresqlRow_2 main ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				query_tPostgresqlRow_2 = "delete from variable where file_id = '"
						+ context.fileId + "'";
				whetherReject_tPostgresqlRow_2 = false;

				globalMap.put("tPostgresqlRow_2_QUERY", query_tPostgresqlRow_2);
				try {
					stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_2 = true;
					throw (e);
				}

				tos_count_tPostgresqlRow_2++;

				/**
				 * [tPostgresqlRow_2 main ] stop
				 */
				/**
				 * [tPostgresqlRow_2 end ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				stmt_tPostgresqlRow_2.close();

				ok_Hash.put("tPostgresqlRow_2", true);
				end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}

	public static class attributeStruct implements
			routines.system.IPersistableRow<attributeStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];

		public Long file_id;

		public Long getFile_id() {
			return this.file_id;
		}

		public String container;

		public String getContainer() {
			return this.container;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.file_id = null;
					} else {
						this.file_id = dis.readLong();
					}

					this.container = readString(dis);

					this.name = readString(dis);

					this.value = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.file_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.file_id);
				}

				// String

				writeString(this.container, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",container=" + container);
			sb.append(",name=" + name);
			sb.append(",value=" + value);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(attributeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.value = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",value=" + value);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void iNetCDFGlobalAttribute_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iNetCDFGlobalAttribute_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				attributeStruct attribute = new attributeStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System
						.currentTimeMillis());
				currentComponent = "tDBOutput_1";

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "attribute";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1
							+ "\".\"" + "attribute";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"file_id\",\"container\",\"name\",\"value\",\"type\") VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				attributeStruct attribute_tmp = new attributeStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [iNetCDFGlobalAttribute_1 begin ] start
				 */

				ok_Hash.put("iNetCDFGlobalAttribute_1", false);
				start_Hash.put("iNetCDFGlobalAttribute_1", System
						.currentTimeMillis());
				currentComponent = "iNetCDFGlobalAttribute_1";

				int tos_count_iNetCDFGlobalAttribute_1 = 0;

				int nbLine_iNetCDFGlobalAttribute_1 = 0;
				String filename_iNetCDFGlobalAttribute_1 = context.url;
				ucar.nc2.NetcdfFile ncfile_iNetCDFGlobalAttribute_1 = null;

				try {
					ncfile_iNetCDFGlobalAttribute_1 = ucar.nc2.dataset.NetcdfDataset
							.openDataset(filename_iNetCDFGlobalAttribute_1);

					for (ucar.nc2.Attribute attribute_iNetCDFGlobalAttribute_1 : ncfile_iNetCDFGlobalAttribute_1
							.getGlobalAttributes()) {

						/**
						 * [iNetCDFGlobalAttribute_1 begin ] stop
						 */
						/**
						 * [iNetCDFGlobalAttribute_1 main ] start
						 */

						currentComponent = "iNetCDFGlobalAttribute_1";

						row1.name = attribute_iNetCDFGlobalAttribute_1
								.getName();
						row1.value = attribute_iNetCDFGlobalAttribute_1
								.getValue(0).toString();
						row1.type = attribute_iNetCDFGlobalAttribute_1
								.getDataType().toString();

						tos_count_iNetCDFGlobalAttribute_1++;

						/**
						 * [iNetCDFGlobalAttribute_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							attribute = null;

							// # Output table : 'attribute'
							attribute_tmp.file_id = context.fileId;
							attribute_tmp.container = "global";
							attribute_tmp.name = row1.name;
							attribute_tmp.value = row1.value;
							attribute_tmp.type = row1.type;
							attribute = attribute_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "attribute"
						if (attribute != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							whetherReject_tDBOutput_1 = false;
							if (attribute.file_id == null) {
								pstmt_tDBOutput_1.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setLong(1,
										attribute.file_id);
							}

							if (attribute.container == null) {
								pstmt_tDBOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2,
										attribute.container);
							}

							if (attribute.name == null) {
								pstmt_tDBOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(3,
										attribute.name);
							}

							if (attribute.value == null) {
								pstmt_tDBOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(4,
										attribute.value);
							}

							if (attribute.type == null) {
								pstmt_tDBOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(5,
										attribute.type);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;

							if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
								try {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e) {

									System.err
											.println("Contents of BatchUpdateException:");
									System.err.println(" Update counts: ");
									int[] updateCounts = e.getUpdateCounts();
									for (int i = 0; i < updateCounts.length; i++) {
										System.err.println("  Statement " + i
												+ ":" + updateCounts[i]);
									}

									java.sql.SQLException se = e;
									do {
										System.err.println("SQL exception:");
										System.err.println(" Message: "
												+ se.getMessage());
										System.err.println(" SQLSTATE: "
												+ se.getSQLState());
										System.err.println(" Error code: "
												+ se.getErrorCode());
										se = se.getNextException();
									} while (se != null);

									throw (e);

								}

							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

						} // End of branch "attribute"

						/**
						 * [iNetCDFGlobalAttribute_1 end ] start
						 */

						currentComponent = "iNetCDFGlobalAttribute_1";

						nbLine_iNetCDFGlobalAttribute_1++;
					}
				} catch (Exception e) {
					System.out.println("Error: ");
					e.printStackTrace();
				} finally {
					if (null != ncfile_iNetCDFGlobalAttribute_1)
						try {
							ncfile_iNetCDFGlobalAttribute_1.close();
						} catch (Exception e) {
							System.out.println("Error: ");
							e.printStackTrace();
						}
				}
				globalMap.put("iNetCDFGlobalAttribute_1_NB_LINE",
						nbLine_iNetCDFGlobalAttribute_1);

				ok_Hash.put("iNetCDFGlobalAttribute_1", true);
				end_Hash.put("iNetCDFGlobalAttribute_1", System
						.currentTimeMillis());

				/**
				 * [iNetCDFGlobalAttribute_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null) {
						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					System.err.println("Contents of BatchUpdateException:");
					System.err.println(" Update counts: ");
					int[] updateCounts = e.getUpdateCounts();
					for (int i = 0; i < updateCounts.length; i++) {
						System.err.println("  Statement " + i + ":"
								+ updateCounts[i]);
					}

					java.sql.SQLException se = e;
					do {
						System.err.println("SQL exception:");
						System.err.println(" Message: " + se.getMessage());
						System.err.println(" SQLSTATE: " + se.getSQLState());
						System.err.println(" Error code: " + se.getErrorCode());
						se = se.getNextException();
					} while (se != null);

					throw (e);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();

				}

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE",
						nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:iNetCDFGlobalAttribute_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			iNetCDFVariable_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iNetCDFGlobalAttribute_1_SUBPROCESS_STATE", 1);
	}

	public static class variableStruct implements
			routines.system.IPersistableRow<variableStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];

		public Long file_id;

		public Long getFile_id() {
			return this.file_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String dimensions;

		public String getDimensions() {
			return this.dimensions;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.file_id = null;
					} else {
						this.file_id = dis.readLong();
					}

					this.name = readString(dis);

					this.type = readString(dis);

					this.dimensions = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.file_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.file_id);
				}

				// String

				writeString(this.name, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.dimensions, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",name=" + name);
			sb.append(",type=" + type);
			sb.append(",dimensions=" + dimensions);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(variableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String dimensions;

		public String getDimensions() {
			return this.dimensions;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.type = readString(dis);

					this.dimensions = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.dimensions, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",type=" + type);
			sb.append(",dimensions=" + dimensions);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void iNetCDFVariable_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iNetCDFVariable_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				variableStruct variable = new variableStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System
						.currentTimeMillis());
				currentComponent = "tDBOutput_3";

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "variable";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3
							+ "\".\"" + "variable";
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				conn_tDBOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"file_id\",\"name\",\"type\",\"dimensions\") VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				variableStruct variable_tmp = new variableStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [iNetCDFVariable_1 begin ] start
				 */

				ok_Hash.put("iNetCDFVariable_1", false);
				start_Hash.put("iNetCDFVariable_1", System.currentTimeMillis());
				currentComponent = "iNetCDFVariable_1";

				int tos_count_iNetCDFVariable_1 = 0;

				int nbLine_iNetCDFVariable_1 = 0;
				String filename_iNetCDFVariable_1 = context.url;
				ucar.nc2.dataset.NetcdfDataset ncDataset_iNetCDFVariable_1 = null;

				try {
					ncDataset_iNetCDFVariable_1 = ucar.nc2.dataset.NetcdfDataset
							.openDataset(filename_iNetCDFVariable_1);

					for (ucar.nc2.Variable variable_iNetCDFVariable_1 : ncDataset_iNetCDFVariable_1
							.getVariables()) {

						/**
						 * [iNetCDFVariable_1 begin ] stop
						 */
						/**
						 * [iNetCDFVariable_1 main ] start
						 */

						currentComponent = "iNetCDFVariable_1";

						row2.name = variable_iNetCDFVariable_1.getName();
						row2.type = variable_iNetCDFVariable_1.getDataType()
								.toString();
						row2.dimensions = variable_iNetCDFVariable_1
								.getDimensionsString().replace(" ", ",");

						tos_count_iNetCDFVariable_1++;

						/**
						 * [iNetCDFVariable_1 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							variable = null;

							// # Output table : 'variable'
							variable_tmp.file_id = context.fileId;
							variable_tmp.name = row2.name;
							variable_tmp.type = row2.type;
							variable_tmp.dimensions = row2.dimensions;
							variable = variable_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "variable"
						if (variable != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							whetherReject_tDBOutput_3 = false;
							if (variable.file_id == null) {
								pstmt_tDBOutput_3.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_3.setLong(1,
										variable.file_id);
							}

							if (variable.name == null) {
								pstmt_tDBOutput_3.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(2,
										variable.name);
							}

							if (variable.type == null) {
								pstmt_tDBOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(3,
										variable.type);
							}

							if (variable.dimensions == null) {
								pstmt_tDBOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(4,
										variable.dimensions);
							}

							pstmt_tDBOutput_3.addBatch();
							nb_line_tDBOutput_3++;

							batchSizeCounter_tDBOutput_3++;

							if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									batchSizeCounter_tDBOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e) {

									System.err
											.println("Contents of BatchUpdateException:");
									System.err.println(" Update counts: ");
									int[] updateCounts = e.getUpdateCounts();
									for (int i = 0; i < updateCounts.length; i++) {
										System.err.println("  Statement " + i
												+ ":" + updateCounts[i]);
									}

									java.sql.SQLException se = e;
									do {
										System.err.println("SQL exception:");
										System.err.println(" Message: "
												+ se.getMessage());
										System.err.println(" SQLSTATE: "
												+ se.getSQLState());
										System.err.println(" Error code: "
												+ se.getErrorCode());
										se = se.getNextException();
									} while (se != null);

									throw (e);

								}

							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

						} // End of branch "variable"

						/**
						 * [iNetCDFVariable_1 end ] start
						 */

						currentComponent = "iNetCDFVariable_1";

						nbLine_iNetCDFVariable_1++;
					}

				} catch (Exception e) {
					System.out.println("Error: ");
					e.printStackTrace();
				} finally {
					if (ncDataset_iNetCDFVariable_1 != null) {
						ncDataset_iNetCDFVariable_1.close();
					}
				}

				globalMap.put("iNetCDFVariable_1_NB_LINE",
						nbLine_iNetCDFVariable_1);

				ok_Hash.put("iNetCDFVariable_1", true);
				end_Hash.put("iNetCDFVariable_1", System.currentTimeMillis());

				/**
				 * [iNetCDFVariable_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null) {
						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: countEach_tDBOutput_3);
						}
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e) {

					System.err.println("Contents of BatchUpdateException:");
					System.err.println(" Update counts: ");
					int[] updateCounts = e.getUpdateCounts();
					for (int i = 0; i < updateCounts.length; i++) {
						System.err.println("  Statement " + i + ":"
								+ updateCounts[i]);
					}

					java.sql.SQLException se = e;
					do {
						System.err.println("SQL exception:");
						System.err.println(" Message: " + se.getMessage());
						System.err.println(" SQLSTATE: " + se.getSQLState());
						System.err.println(" Error code: " + se.getErrorCode());
						se = se.getNextException();
					} while (se != null);

					throw (e);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();

				}

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE",
						nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:iNetCDFVariable_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			iNetCDFVariableAttribute_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iNetCDFVariable_1_SUBPROCESS_STATE", 1);
	}

	public static class variableAttributeStruct implements
			routines.system.IPersistableRow<variableAttributeStruct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];

		public Long file_id;

		public Long getFile_id() {
			return this.file_id;
		}

		public String container;

		public String getContainer() {
			return this.container;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.file_id = null;
					} else {
						this.file_id = dis.readLong();
					}

					this.container = readString(dis);

					this.name = readString(dis);

					this.value = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.file_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.file_id);
				}

				// String

				writeString(this.container, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + String.valueOf(file_id));
			sb.append(",container=" + container);
			sb.append(",name=" + name);
			sb.append(",value=" + value);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(variableAttributeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];
		static byte[] commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[0];

		public String variable;

		public String getVariable() {
			return this.variable;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length) {
					if (length < 1024
							&& commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT.length == 0) {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[1024];
					} else {
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length);
				strReturn = new String(
						commonByteArray_ANFOG_DM_HarvestFileSystemMetadata_RT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANFOG_DM_HarvestFileSystemMetadata_RT) {

				try {

					int length = 0;

					this.variable = readString(dis);

					this.name = readString(dis);

					this.value = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variable, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variable=" + variable);
			sb.append(",name=" + name);
			sb.append(",value=" + value);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void iNetCDFVariableAttribute_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("iNetCDFVariableAttribute_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				variableAttributeStruct variableAttribute = new variableAttributeStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System
						.currentTimeMillis());
				currentComponent = "tDBOutput_4";

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null
						|| dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "attribute";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4
							+ "\".\"" + "attribute";
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				conn_tDBOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				String insert_tDBOutput_4 = "INSERT INTO \""
						+ tableName_tDBOutput_4
						+ "\" (\"file_id\",\"container\",\"name\",\"value\",\"type\") VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				variableAttributeStruct variableAttribute_tmp = new variableAttributeStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [iNetCDFVariableAttribute_1 begin ] start
				 */

				ok_Hash.put("iNetCDFVariableAttribute_1", false);
				start_Hash.put("iNetCDFVariableAttribute_1", System
						.currentTimeMillis());
				currentComponent = "iNetCDFVariableAttribute_1";

				int tos_count_iNetCDFVariableAttribute_1 = 0;

				int nbLine_iNetCDFVariableAttribute_1 = 0;
				String filename_iNetCDFVariableAttribute_1 = context.url;
				ucar.nc2.dataset.NetcdfDataset ncDataset_iNetCDFVariableAttribute_1 = null;

				try {
					ncDataset_iNetCDFVariableAttribute_1 = ucar.nc2.dataset.NetcdfDataset
							.openDataset(filename_iNetCDFVariableAttribute_1);

					for (ucar.nc2.Variable variable_iNetCDFVariableAttribute_1 : ncDataset_iNetCDFVariableAttribute_1
							.getVariables()) {
						for (ucar.nc2.Attribute attribute_iNetCDFVariableAttribute_1 : variable_iNetCDFVariableAttribute_1
								.getAttributes()) {

							/**
							 * [iNetCDFVariableAttribute_1 begin ] stop
							 */
							/**
							 * [iNetCDFVariableAttribute_1 main ] start
							 */

							currentComponent = "iNetCDFVariableAttribute_1";

							row3.variable = variable_iNetCDFVariableAttribute_1
									.getName();
							row3.name = attribute_iNetCDFVariableAttribute_1
									.getName();
							row3.type = attribute_iNetCDFVariableAttribute_1
									.getDataType().toString();

							// Concatenate attribute values into a single comma
							// separated string (normally only one)

							StringBuilder sb_iNetCDFVariableAttribute_1 = new StringBuilder(
									attribute_iNetCDFVariableAttribute_1
											.getValue(0).toString());

							for (int i = 1; i < attribute_iNetCDFVariableAttribute_1
									.getLength(); i++) {
								sb_iNetCDFVariableAttribute_1.append(',');
								sb_iNetCDFVariableAttribute_1
										.append(attribute_iNetCDFVariableAttribute_1
												.getValue(i).toString());
							}

							row3.value = sb_iNetCDFVariableAttribute_1
									.toString();

							tos_count_iNetCDFVariableAttribute_1++;

							/**
							 * [iNetCDFVariableAttribute_1 main ] stop
							 */

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								variableAttribute = null;

								// # Output table : 'variableAttribute'
								variableAttribute_tmp.file_id = context.fileId;
								variableAttribute_tmp.container = row3.variable;
								variableAttribute_tmp.name = row3.name;
								variableAttribute_tmp.value = row3.value;
								variableAttribute_tmp.type = row3.type;
								variableAttribute = variableAttribute_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "variableAttribute"
							if (variableAttribute != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								whetherReject_tDBOutput_4 = false;
								if (variableAttribute.file_id == null) {
									pstmt_tDBOutput_4.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_4.setLong(1,
											variableAttribute.file_id);
								}

								if (variableAttribute.container == null) {
									pstmt_tDBOutput_4.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(2,
											variableAttribute.container);
								}

								if (variableAttribute.name == null) {
									pstmt_tDBOutput_4.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(3,
											variableAttribute.name);
								}

								if (variableAttribute.value == null) {
									pstmt_tDBOutput_4.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(4,
											variableAttribute.value);
								}

								if (variableAttribute.type == null) {
									pstmt_tDBOutput_4.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_4.setString(5,
											variableAttribute.type);
								}

								pstmt_tDBOutput_4.addBatch();
								nb_line_tDBOutput_4++;

								batchSizeCounter_tDBOutput_4++;

								if (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
									try {
										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
												.executeBatch()) {
											countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

										batchSizeCounter_tDBOutput_4 = 0;
									} catch (java.sql.BatchUpdateException e) {

										System.err
												.println("Contents of BatchUpdateException:");
										System.err.println(" Update counts: ");
										int[] updateCounts = e
												.getUpdateCounts();
										for (int i = 0; i < updateCounts.length; i++) {
											System.err
													.println("  Statement " + i
															+ ":"
															+ updateCounts[i]);
										}

										java.sql.SQLException se = e;
										do {
											System.err
													.println("SQL exception:");
											System.err.println(" Message: "
													+ se.getMessage());
											System.err.println(" SQLSTATE: "
													+ se.getSQLState());
											System.err.println(" Error code: "
													+ se.getErrorCode());
											se = se.getNextException();
										} while (se != null);

										throw (e);

									}

								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

							} // End of branch "variableAttribute"

							/**
							 * [iNetCDFVariableAttribute_1 end ] start
							 */

							currentComponent = "iNetCDFVariableAttribute_1";

							nbLine_iNetCDFVariableAttribute_1++;
						}
					}

				} catch (Exception e) {
					System.out.println("Error: ");
					e.printStackTrace();
				} finally {
					if (ncDataset_iNetCDFVariableAttribute_1 != null) {
						ncDataset_iNetCDFVariableAttribute_1.close();
					}
				}

				globalMap.put("iNetCDFVariableAttribute_1_NB_LINE",
						nbLine_iNetCDFVariableAttribute_1);

				ok_Hash.put("iNetCDFVariableAttribute_1", true);
				end_Hash.put("iNetCDFVariableAttribute_1", System
						.currentTimeMillis());

				/**
				 * [iNetCDFVariableAttribute_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null) {
						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
									: countEach_tDBOutput_4);
						}
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e) {

					System.err.println("Contents of BatchUpdateException:");
					System.err.println(" Update counts: ");
					int[] updateCounts = e.getUpdateCounts();
					for (int i = 0; i < updateCounts.length; i++) {
						System.err.println("  Statement " + i + ":"
								+ updateCounts[i]);
					}

					java.sql.SQLException se = e;
					do {
						System.err.println("SQL exception:");
						System.err.println(" Message: " + se.getMessage());
						System.err.println(" SQLSTATE: " + se.getSQLState());
						System.err.println(" Error code: " + se.getErrorCode());
						se = se.getNextException();
					} while (se != null);

					throw (e);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();

				}

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE",
						nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:iNetCDFVariableAttribute_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("iNetCDFVariableAttribute_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1", System
						.currentTimeMillis());
				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					conn_tPostgresqlCommit_1.commit();
					conn_tPostgresqlCommit_1.close();
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final HarvestFileSystemMetadata_RT HarvestFileSystemMetadata_RTClass = new HarvestFileSystemMetadata_RT();

		int exitCode = HarvestFileSystemMetadata_RTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = HarvestFileSystemMetadata_RT.class
					.getClassLoader().getResourceAsStream(
							"anfog_dm/harvestfilesystemmetadata_rt_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.logDir = (String) context.getProperty("logDir");

			context.paramFile = (String) context.getProperty("paramFile");

			context.metadataDb_RT_Database = (String) context
					.getProperty("metadataDb_RT_Database");

			context.metadataDb_RT_Login = (String) context
					.getProperty("metadataDb_RT_Login");

			context.metadataDb_RT_Password = (java.lang.String) context
					.getProperty("metadataDb_RT_Password");

			context.metadataDb_RT_Port = (String) context
					.getProperty("metadataDb_RT_Port");

			context.metadataDb_RT_Schema = (String) context
					.getProperty("metadataDb_RT_Schema");

			context.metadataDb_RT_Server = (String) context
					.getProperty("metadataDb_RT_Server");

			context.exclude = (String) context.getProperty("exclude");

			try {
				context.fileId = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("fileId"));
			} catch (NumberFormatException e) {
				context.fileId = null;
			}

			context.include = (String) context.getProperty("include");

			context.sourceDir = (String) context.getProperty("sourceDir");

			context.url = (String) context.getProperty("url");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("logDir")) {
				context.logDir = (String) parentContextMap.get("logDir");
			}
			if (parentContextMap.containsKey("paramFile")) {
				context.paramFile = (String) parentContextMap.get("paramFile");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Database")) {
				context.metadataDb_RT_Database = (String) parentContextMap
						.get("metadataDb_RT_Database");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Login")) {
				context.metadataDb_RT_Login = (String) parentContextMap
						.get("metadataDb_RT_Login");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Password")) {
				context.metadataDb_RT_Password = (java.lang.String) parentContextMap
						.get("metadataDb_RT_Password");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Port")) {
				context.metadataDb_RT_Port = (String) parentContextMap
						.get("metadataDb_RT_Port");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Schema")) {
				context.metadataDb_RT_Schema = (String) parentContextMap
						.get("metadataDb_RT_Schema");
			}
			if (parentContextMap.containsKey("metadataDb_RT_Server")) {
				context.metadataDb_RT_Server = (String) parentContextMap
						.get("metadataDb_RT_Server");
			}
			if (parentContextMap.containsKey("exclude")) {
				context.exclude = (String) parentContextMap.get("exclude");
			}
			if (parentContextMap.containsKey("fileId")) {
				context.fileId = (Long) parentContextMap.get("fileId");
			}
			if (parentContextMap.containsKey("include")) {
				context.include = (String) parentContextMap.get("include");
			}
			if (parentContextMap.containsKey("sourceDir")) {
				context.sourceDir = (String) parentContextMap.get("sourceDir");
			}
			if (parentContextMap.containsKey("url")) {
				context.url = (String) parentContextMap.get("url");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {

			e_tPostgresqlConnection_1.printStackTrace();
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : HarvestFileSystemMetadata_RT");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 98713 characters generated by Talend Open Studio for Data Integration on the
 * January 15, 2014 1:09:03 PM EST
 ************************************************************************************************/
