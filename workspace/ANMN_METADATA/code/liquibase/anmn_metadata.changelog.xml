<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

    <changeSet author="talend" id="global_attribute_table">
      <sql>
        CREATE TABLE global_attribute 
        (
          file_id bigint NOT NULL,
          name text NOT NULL,
          type text,
          value text,
          CONSTRAINT global_attribute_pk PRIMARY KEY (file_id, name),
          CONSTRAINT global_attribute_file_fk FOREIGN KEY (file_id)
              REFERENCES indexed_file (id) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        );
      </sql>
    </changeSet>


    <changeSet author="talend" id="variable_table">
      <sql>
        CREATE TABLE variable
        (
          file_id bigint NOT NULL,
          name text NOT NULL,
          type text,
          dimensions text,
          shape text,
          CONSTRAINT variable_pk PRIMARY KEY (file_id, name),
          CONSTRAINT variable_file_fk FOREIGN KEY (file_id)
              REFERENCES indexed_file (id) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        );
      </sql>
    </changeSet>


    <changeSet author="talend" id="variable_attribute_table">
      <sql>
        CREATE TABLE variable_attribute 
        (
          file_id bigint NOT NULL,
          container text NOT NULL,
          name text NOT NULL,
          type text,
          value text,
          CONSTRAINT variable_attribute_pk PRIMARY KEY (file_id, container, name),
          CONSTRAINT variable_attribute_file_fk FOREIGN KEY (file_id)
              REFERENCES indexed_file (id) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        );
      </sql>
    </changeSet>


    <changeSet author="talend" id="file_metadata_table">
      <sql>
        CREATE TABLE file_metadata 
        (
          id bigserial PRIMARY KEY,
          file_id bigint UNIQUE NOT NULL,
          feature_type text,
          file_version text,
          toolbox_version text,
          compliance_checker_version text,
          compliance_checker_last_updated timestamp with time zone,
          compliance_checks_passed text,
          site_code text,
          platform_code text,
          deployment_code text,
          instrument text,
          instrument_serial_number text,
          instrument_nominal_depth text,
          geospatial_vertical_min double precision,
          geospatial_vertical_max double precision,
          date_created timestamp with time zone,
          time_coverage_start timestamp with time zone,
          time_coverage_end timestamp with time zone,
          time_deployment_start timestamp with time zone,
          time_deployment_end timestamp with time zone,
          latitude double precision,
          longitude double precision,
          geom geometry(Geometry,4326) CHECK (st_isvalid(geom)),
          data_category text,
          variables text,
          standard_names text,
          realtime boolean,
          deleted boolean,
          CONSTRAINT file_metadata_file_fk FOREIGN KEY (file_id)
              REFERENCES indexed_file (id) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        );

        CREATE INDEX file_metadata_gist_idx ON file_metadata USING GIST (geom); 
      </sql>
    </changeSet>


    <changeSet author="talend" id="add_toolbox_input_file_column">
      <sql>
        ALTER TABLE file_metadata
          ADD COLUMN toolbox_input_file text ;

        UPDATE file_metadata m
          SET toolbox_input_file = getglobalattribute(file_id, 'toolbox_input_file') ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="add_deployment_number_column">
      <sql>
        ALTER TABLE file_metadata
          ADD COLUMN deployment_number text ;

        UPDATE file_metadata m
          SET deployment_number = getglobalattribute(file_id, 'deployment_number') ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="add_compliance_checker_imos_version_column">
      <sql>
        ALTER TABLE file_metadata
          DROP COLUMN IF EXISTS compliance_checker_last_updated,
          ADD COLUMN compliance_checker_imos_version text ;

        UPDATE file_metadata m
          SET compliance_checker_imos_version = getglobalattribute(file_id, 'compliance_checker_imos_version') ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="update_data_category" runOnChange="true">
      <sql>
        UPDATE file_metadata m
          SET
            data_category = coalesce(substring(url, '/(Temperature|(CTD|Biogeochem)_(timeseries|profiles)|Velocity|Wave|CO2|Meteorology|Surface_[^/]+|Sub-surface_[^/]+|Sediment_traps|aggregated_products|aggregated_timeseries|hourly_timeseries|gridded_timeseries)/'),
                                     substring(url, '/(Pulse|FluxPulse)/'))
        FROM indexed_file f
        WHERE m.file_id = f.id ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="add_long_names_column">
      <sql>
        ALTER TABLE file_metadata
          ADD COLUMN long_names text ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="map_views" runOnChange="true">
      <sql>
        DROP VIEW IF EXISTS moorings_all_map CASCADE;

        CREATE VIEW moorings_all_map AS
          SELECT
            -- file info
            m.file_id,
            i.url,
            m.date_created AT TIME ZONE 'UTC' AS date_created,
            i.first_indexed AT TIME ZONE 'UTC' AS date_published,
            i.last_indexed AT TIME ZONE 'UTC' AS date_updated,
            i.size,
            m.feature_type,
            m.file_version,
            m.toolbox_version,
            m.toolbox_input_file,
            m.compliance_checker_version,
            m.compliance_checker_imos_version,
            m.compliance_checks_passed,
            m.realtime,
            CASE WHEN realtime THEN 'real-time' ELSE 'delayed' END AS data_mode,
            -- time/location
            m.site_code,
            m.platform_code,
            m.deployment_code,
            m.data_category,
            m.instrument,
            m.instrument_serial_number,
            m.instrument_nominal_depth,
            m.time_deployment_start AT TIME ZONE 'UTC' AS time_deployment_start,
            m.time_deployment_end AT TIME ZONE 'UTC' AS time_deployment_end,
            m.time_coverage_start AT TIME ZONE 'UTC' AS time_coverage_start,
            m.time_coverage_end AT TIME ZONE 'UTC' AS time_coverage_end,
            m.latitude,
            m.longitude,
            -- measured parameters
            m.standard_names ~ 'sea_[a-z_]*_temperature' AS has_water_temperature,
            m.standard_names LIKE '%air_temperature%' AS has_air_temperature,
            m.standard_names ~ 'sea_[a-z_]*_salinity' AS has_salinity,
            m.standard_names ~ 'sea_[a-z_]*_pressure' AS has_water_pressure,
            m.standard_names LIKE '%air_pressure%' AS has_air_pressure,
            m.standard_names LIKE '%sea_water_velocity%' AS has_sea_water_velocity,
            m.standard_names LIKE '%oxygen%' AS has_oxygen,
            m.standard_names LIKE '%chlorophyll%' AS has_chlorophyll,
            m.standard_names LIKE '%fluorescence%' AS has_fluorescence,
            m.standard_names LIKE '%sea_surface_wave%' AS has_wave_parameters,
            m.variables,
            m.standard_names,
            m.long_names,
            -- geometry
            m.geom
          FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
          WHERE NOT m.deleted
        ;

        CREATE VIEW anmn_all_map AS
          SELECT * FROM moorings_all_map WHERE url LIKE 'IMOS/ANMN/%' ;

        CREATE VIEW abos_all_map AS
          SELECT * FROM moorings_all_map WHERE url LIKE 'IMOS/ABOS/%' ;

        CREATE VIEW abos_sots_dm_map AS
          SELECT * FROM moorings_all_map
          WHERE url LIKE 'IMOS/ABOS/SOTS/%' AND NOT realtime ;

        CREATE VIEW abos_sots_rt_map AS
          SELECT * FROM moorings_all_map
          WHERE url LIKE 'IMOS/ABOS/SOTS/%' AND realtime ;

	CREATE VIEW dwm_all_map AS
          SELECT * FROM moorings_all_map WHERE url LIKE 'IMOS/DWM/%' ;

        CREATE VIEW dwm_sots_dm_map AS
          SELECT * FROM moorings_all_map
          WHERE url LIKE 'IMOS/DWM/SOTS/%' AND NOT realtime ;

        CREATE VIEW dwm_sots_rt_map AS
          SELECT * FROM moorings_all_map
          WHERE url LIKE 'IMOS/DWM/SOTS/%' AND realtime ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="moorings_currents_map_view" runOnChange="true">
      <sql>
        DROP VIEW IF EXISTS moorings_currents_map CASCADE;

        CREATE VIEW moorings_currents_map AS
          SELECT
            -- file info
            m.file_id,
            i.url,
            m.date_created AT TIME ZONE 'UTC' AS date_created,
            i.first_indexed AT TIME ZONE 'UTC' AS date_published,
            i.last_indexed AT TIME ZONE 'UTC' AS date_updated,
            i.size,
            m.feature_type,
            m.file_version,
            m.toolbox_version,
            m.toolbox_input_file,
            m.compliance_checker_version,
            m.compliance_checker_imos_version,
            m.compliance_checks_passed,
            m.realtime,
            CASE WHEN realtime THEN 'real-time' ELSE 'delayed' END AS data_mode,
            -- time/location
            m.site_code,
            m.platform_code,
            m.deployment_code,
            m.data_category,
            m.instrument,
            m.instrument_serial_number,
            m.instrument_nominal_depth,
            m.time_deployment_start AT TIME ZONE 'UTC' AS time_deployment_start,
            m.time_deployment_end AT TIME ZONE 'UTC' AS time_deployment_end,
            m.time_coverage_start AT TIME ZONE 'UTC' AS time_coverage_start,
            m.time_coverage_end AT TIME ZONE 'UTC' AS time_coverage_end,
            m.latitude,
            m.longitude,
            -- geometry
            m.geom
          FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
          WHERE NOT m.deleted AND (
                standard_names LIKE '%sea_water_velocity%' OR
                standard_names LIKE '%sea_water_speed%'
                )
        ;

	CREATE VIEW dwm_currents_map AS
          SELECT * FROM moorings_currents_map
          WHERE url LIKE 'IMOS/DWM/%' ;

	CREATE VIEW anmn_currents_map AS
          SELECT * FROM moorings_currents_map
          WHERE url LIKE 'IMOS/ANMN/%' ;
      </sql>
    </changeSet>


    <changeSet author="talend" id="duplicate_views" runOnChange="true">
      <sql>
        DROP VIEW IF EXISTS anmn_duplicate_timeseries CASCADE;

        CREATE VIEW anmn_duplicate_timeseries AS
          WITH deployments AS (
              SELECT
                m.deployment_code,
                m.data_category,
                m.file_version,
                count(*) AS n_file,
                count(distinct m.instrument) as n_instr,
                count(distinct m.instrument_nominal_depth) as n_depth,
                count(distinct m.instrument_serial_number) as n_sn,
                count(DISTINCT substring(m.toolbox_input_file, '[^/\\\\]+$')) AS n_infile,
                min(date(m.date_created)) as first_created,
                max(date(m.date_created)) as last_created
              FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
              WHERE i.url LIKE 'IMOS/ANMN/%' AND
                    data_category NOT LIKE '%_profiles' AND
                    NOT m.deleted AND
                    NOT m.realtime
              GROUP BY deployment_code, data_category, file_version
          )
          SELECT
            deployment_code,
            data_category,
            file_version,
            n_file,
            n_instr,
            nullif(n_file - n_depth, 0) AS n_depth_dup,
            nullif(n_file - n_sn, 0) AS n_sn_dup,
            nullif(n_file - n_infile, 0) AS n_infile_dup,
            last_created - first_created AS created_span_d,
            last_created
          FROM deployments
          WHERE n_file &gt; 1 AND (n_depth &lt; n_file OR n_sn &lt; n_file)
          ORDER BY deployment_code, data_category, file_version
        ;

        DROP VIEW IF EXISTS anmn_duplicate_profiles CASCADE;

        CREATE VIEW anmn_duplicate_profiles AS
          WITH profiles AS (
              SELECT
                m.site_code,
                m.time_deployment_start,
                m.file_version,
                count(*) AS n_file,
                count(DISTINCT m.instrument) as n_instr,
                count(DISTINCT m.instrument_serial_number) as n_sn,
                count(DISTINCT substring(m.toolbox_input_file, '[^/\\\\]+$')) AS n_infile,
                min(date(m.date_created)) as first_created,
                max(date(m.date_created)) as last_created
              FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
              WHERE i.url LIKE 'IMOS/ANMN/%' AND
                    data_category LIKE '%_profiles' AND
                    NOT m.deleted AND
                    NOT m.realtime
              GROUP BY m.site_code, m.time_deployment_start, m.file_version
          )
          SELECT
            site_code,
            time_deployment_start,
            file_version,
            n_file,
            n_instr,
            nullif(n_file - n_sn, 0) AS n_sn_dup,
            nullif(n_file - n_infile, 0) AS n_infile_dup,
            last_created - first_created AS created_span_d,
            last_created
          FROM profiles
          WHERE n_file > 1
          ORDER BY site_code, time_deployment_start, file_version
        ;
      </sql>
    </changeSet>

    <changeSet author="talend" id="moorings_aggregated_timeseries_map_view" runOnChange="true">
        <sql>
            DROP VIEW IF EXISTS moorings_aggregated_timeseries_map CASCADE;
            CREATE VIEW moorings_aggregated_timeseries_map AS
                SELECT
                i.url,
                i.size,
                m.file_id,
                m.variables,
                replace(substring(url, 'FV01_([A-Z0-9-]+)-aggregated'), '-', '_') as variable_of_interest,
                m.standard_names,
                m.long_names,
                m.site_code,
                m.time_coverage_start AT TIME ZONE 'UTC' AS time_coverage_start,
                m.time_coverage_end AT TIME ZONE 'UTC' AS time_coverage_end,
                m.date_created AT TIME ZONE 'UTC' AS date_created,
                i.first_indexed AT TIME ZONE 'UTC' AS date_published,
                i.last_indexed AT TIME ZONE 'UTC' AS date_updated,
                m.latitude,
                m.longitude,
                m.geom
                FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
                WHERE m.data_category = 'aggregated_timeseries' AND NOT m.deleted
                ORDER BY m.site_code, m.variables
           ;
        </sql>
    </changeSet>

    <changeSet author="talend" id="moorings_hourly_timeseries_map_view" runOnChange="true">
        <sql>
            DROP VIEW IF EXISTS moorings_hourly_timeseries_map CASCADE;
            CREATE VIEW moorings_hourly_timeseries_map AS
                SELECT
                i.url,
                i.size,
                m.file_id,
                m.variables,
                m.standard_names,
                m.long_names,
                m.site_code,
                m.time_coverage_start AT TIME ZONE 'UTC' AS time_coverage_start,
                m.time_coverage_end AT TIME ZONE 'UTC' AS time_coverage_end,
                m.date_created AT TIME ZONE 'UTC' AS date_created,
                i.first_indexed AT TIME ZONE 'UTC' AS date_published,
                i.last_indexed AT TIME ZONE 'UTC' AS date_updated,
                m.latitude,
                m.longitude,
                m.geom
                FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
                WHERE m.data_category = 'hourly_timeseries' AND NOT m.deleted
                AND i.url NOT LIKE '%including-non-QC%'
                ORDER BY m.site_code, m.variables
           ;
        </sql>
    </changeSet>

    <changeSet author="talend" id="moorings_gridded_timeseries_map_view" runOnChange="true">
        <sql>
            DROP VIEW IF EXISTS moorings_gridded_timeseries_map CASCADE;
            CREATE VIEW moorings_gridded_timeseries_map AS
                SELECT
                i.url,
                i.size,
                m.file_id,
                m.variables,
                m.standard_names,
                m.long_names,
                m.site_code,
                m.time_coverage_start AT TIME ZONE 'UTC' AS time_coverage_start,
                m.time_coverage_end AT TIME ZONE 'UTC' AS time_coverage_end,
                m.date_created AT TIME ZONE 'UTC' AS date_created,
                i.first_indexed AT TIME ZONE 'UTC' AS date_published,
                i.last_indexed AT TIME ZONE 'UTC' AS date_updated,
                m.latitude,
                m.longitude,
                m.geom
                FROM indexed_file i JOIN file_metadata m ON m.file_id = i.id
                WHERE m.data_category = 'gridded_timeseries' AND NOT m.deleted
                ORDER BY m.site_code, m.variables
           ;
        </sql>
    </changeSet>

</databaseChangeLog>
