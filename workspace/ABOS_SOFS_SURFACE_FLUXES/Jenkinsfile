#!groovyâ€‹

pipeline {
    agent none
    environment {
        JOB_WORKSPACE = 'workspace/ABOS_SOFS_SURFACE_FLUXES'
        JOB_NAME = 'ABOS_SOFS_SURFACE_FLUXES'
    }
    stages {
        stage('validation') {
            agent { label 'master' }
            steps {
                //Moving in to the directory to execute the commands
                dir(env.JOB_WORKSPACE) {
                    script {
                        if (env.GIT_PREVIOUS_SUCCESSFUL_COMMIT == null) {
                            echo "No previous successful runs found, building"
                        } else {
                            def strCount = sh(returnStdout: true, script: "git diff --name-only ${env.GIT_COMMIT} ${GIT_PREVIOUS_SUCCESSFUL_COMMIT} | grep servicelayer | wc -l").trim()
                            if (strCount == "0") {
                                echo "Skipping build since no files updated"
                                currentBuild.result = "NOT_BUILT"
                                CONTINUE_BUILD = false
                            } else {
                                echo "Changes found in the servicelayer module"
                            }
                        }
                    }
                }
            }
        }
        stage('container') {
            agent {
                dockerfile {
                    additionalBuildArgs '--build-arg BUILDER_UID=${JENKINS_UID:-498}'
                }
            }
            environment {
                TALEND_PROJECT_DIR = "${WORKSPACE}/${env.JOB_WORKSPACE}"
                TALEND_BUILD = "${WORKSPACE}/target"
                TALEND_JOB_NAME = "${env.JOB_NAME}_harvester"
            }
            stages {
                stage('build') {
                    steps {
                        sh 'xvfb-run -a $TALEND_EXEC \
                            --clean_component_cache --disableShellInput -nosplash \
                            -consoleLog --launcher.suppressErrors \
                            -data $TALEND_WORKSPACE \
                            -componentDir $TALEND_CUSTOM_COMPONENTS \
                            -application au.org.emii.talend.codegen.Generator \
                            -jobName ${TALEND_JOB_NAME} \
                            -projectDir ${TALEND_PROJECT_DIR} \
                            -targetDir ${TALEND_BUILD}'
                    }
                }
            }
            post {
                success {
                    dir('target/') {
                        archiveArtifacts artifacts: '*.zip', fingerprint: true, onlyIfSuccessful: true
                    }
                }
            }
        }
    }
}
