// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package aodn_wave.deletemetadatafile_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.ArgoUtils;
import routines.GeometryUtility;
import routines.Numeric;
import routines.NetCDFUtils;
import routines.GeoOperation;
import routines.DAPUtils;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DeleteMetadataFile Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class DeleteMetadataFile implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(url != null){
				
					this.setProperty("url", url.toString());
				
			}
			
			if(fileId != null){
				
					this.setProperty("fileId", fileId.toString());
				
			}
			
			if(Destination_Database != null){
				
					this.setProperty("Destination_Database", Destination_Database.toString());
				
			}
			
			if(Destination_Login != null){
				
					this.setProperty("Destination_Login", Destination_Login.toString());
				
			}
			
			if(Destination_Password != null){
				
					this.setProperty("Destination_Password", Destination_Password.toString());
				
			}
			
			if(Destination_Port != null){
				
					this.setProperty("Destination_Port", Destination_Port.toString());
				
			}
			
			if(Destination_Schema != null){
				
					this.setProperty("Destination_Schema", Destination_Schema.toString());
				
			}
			
			if(Destination_Server != null){
				
					this.setProperty("Destination_Server", Destination_Server.toString());
				
			}
			
			if(logDir != null){
				
					this.setProperty("logDir", logDir.toString());
				
			}
			
			if(paramFile != null){
				
					this.setProperty("paramFile", paramFile.toString());
				
			}
			
		}

public String url;
public String getUrl(){
	return this.url;
}
public Long fileId;
public Long getFileId(){
	return this.fileId;
}
public String Destination_Database;
public String getDestination_Database(){
	return this.Destination_Database;
}
public String Destination_Login;
public String getDestination_Login(){
	return this.Destination_Login;
}
public java.lang.String Destination_Password;
public java.lang.String getDestination_Password(){
	return this.Destination_Password;
}
public String Destination_Port;
public String getDestination_Port(){
	return this.Destination_Port;
}
public String Destination_Schema;
public String getDestination_Schema(){
	return this.Destination_Schema;
}
public String Destination_Server;
public String getDestination_Server(){
	return this.Destination_Server;
}
public String logDir;
public String getLogDir(){
	return this.logDir;
}
public String paramFile;
public String getParamFile(){
	return this.paramFile;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DeleteMetadataFile";
	private final String projectName = "AODN_WAVE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("_vjzKsGasEeOj-aYbiLXYfw", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DeleteMetadataFile.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DeleteMetadataFile.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void Implicit_Context_Regex_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							Implicit_Context_Context_error(exception, errorComponent, globalMap);
						
						}
					
			public void Implicit_Context_Context_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					Implicit_Context_Regex_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendStats_STATS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void Implicit_Context_Regex_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}





	

public static class row_Implicit_Context_RegexStruct implements routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
    final static byte[] commonByteArrayLock_AODN_WAVE_DeleteMetadataFile = new byte[0];
    static byte[] commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AODN_WAVE_DeleteMetadataFile.length) {
				if(length < 1024 && commonByteArray_AODN_WAVE_DeleteMetadataFile.length == 0) {
   					commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[1024];
				} else {
   					commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AODN_WAVE_DeleteMetadataFile, 0, length);
			strReturn = new String(commonByteArray_AODN_WAVE_DeleteMetadataFile, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AODN_WAVE_DeleteMetadataFile) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_Implicit_Context_RegexStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void Implicit_Context_RegexProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();




	
	/**
	 * [Implicit_Context_Context begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Context", false);
		start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_Implicit_Context_Context = 0;
		
	java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	int nb_line_Implicit_Context_Context = 0;

 



/**
 * [Implicit_Context_Context begin ] stop
 */



	
	/**
	 * [Implicit_Context_Regex begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Regex", false);
		start_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	
		int tos_count_Implicit_Context_Regex = 0;
		

	
	
		int nb_line_Implicit_Context_Regex = 0;
        
        int footer_Implicit_Context_Regex  = 0;
        boolean removeEmptyRowImplicit_Context_Regex = true;
        Object source_Implicit_Context_Regex = /** Start field Implicit_Context_Regex:FILENAME */context.paramFile/** End field Implicit_Context_Regex:FILENAME */;
        
        org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex=null;
        if(source_Implicit_Context_Regex instanceof String || source_Implicit_Context_Regex instanceof java.io.InputStream){
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */context.paramFile/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
        }else{
        	throw new java.lang.Exception("The source data should be specified as File Path or InputStream or java.io.Reader!");
        }
        String strImplicit_Context_Regex;
        int totalLineImplicit_Context_Regex=0,currentLineImplicit_Context_Regex=0,beginLineImplicit_Context_Regex=0,lastLineImplicit_Context_Regex=-1,validRowCountImplicit_Context_Regex=0;
        int limitImplicit_Context_Regex=-1;
        
		int headerImplicit_Context_Regex = 0;
		if(headerImplicit_Context_Regex > 0){
			beginLineImplicit_Context_Regex=headerImplicit_Context_Regex+1;
		}
    	
        if(footer_Implicit_Context_Regex > 0){
			while (inImplicit_Context_Regex.readRecord()) {
                strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord();        
				totalLineImplicit_Context_Regex++;
			}
			int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex   < 0? 0 : totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex ;
			if(lastLineImplicit_Context_Regex > 0){
				lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex ? lastLineImplicit_Context_Regex : lastLineTempImplicit_Context_Regex; 
			}else {
				lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
			}
		  	inImplicit_Context_Regex.close();
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */context.paramFile/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
		}
        java.util.StringTokenizer strTokenImplicit_Context_Regex;
        java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern.compile("^([^"+"=>"+"]*)"+"=>"+"(.*)$");
        java.util.regex.Matcher matcherImplicit_Context_Regex = null;
        
        
        while (inImplicit_Context_Regex.readRecord()) {
            strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord(); 
        	
       		currentLineImplicit_Context_Regex++;
        	if(currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
        		continue;
        	}
        	if(lastLineImplicit_Context_Regex > -1 && currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
        		break;
        	}
        	if(removeEmptyRowImplicit_Context_Regex && ("").equals(strImplicit_Context_Regex)){
        		continue;
        	}
        	if(limitImplicit_Context_Regex!=-1&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex){
        		break;
        	}
        	
        	matcherImplicit_Context_Regex = patternImplicit_Context_Regex.matcher(strImplicit_Context_Regex);
        	int groupCountImplicit_Context_Regex = 0;
        	boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex.find(); 
        	if(isMatchImplicit_Context_Regex){
        	groupCountImplicit_Context_Regex=matcherImplicit_Context_Regex.groupCount();
			}
    		row_Implicit_Context_Regex = null;						
			
			boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex.length() == 0;
			
			String[] valueImplicit_Context_Regex = new String[2];
			String frontCharImplicit_Context_Regex,behindCharImplicit_Context_Regex;
			for(int i=0;i<2;i++){
				valueImplicit_Context_Regex[i] = "";
				if(lineIsEmptyImplicit_Context_Regex){
					continue;
				}
				if(i < groupCountImplicit_Context_Regex){
					valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex.group(i+1);
				}
			}
			validRowCountImplicit_Context_Regex++;
			
			boolean whetherReject_Implicit_Context_Regex = false;
			row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
			try {			
			if(!isMatchImplicit_Context_Regex){//line data not matched with given regex parameter
        		throw new java.lang.Exception("Line doesn't match: " + strImplicit_Context_Regex);
        	}
								
						if(valueImplicit_Context_Regex[0]!=null && valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];					
						} else {
						row_Implicit_Context_Regex.key = "";}
						
						if(valueImplicit_Context_Regex[1]!=null && valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];					
						} else {
						row_Implicit_Context_Regex.value = "";}
	
										
					
    } catch (java.lang.Exception e) {
        whetherReject_Implicit_Context_Regex = true;
                    	if(isMatchImplicit_Context_Regex){
                    		System.err.println(e.getMessage());
                    	}
                row_Implicit_Context_Regex = null;
    }					
					
					
			
			nb_line_Implicit_Context_Regex++;

 



/**
 * [Implicit_Context_Regex begin ] stop
 */
	
	/**
	 * [Implicit_Context_Regex main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 


	tos_count_Implicit_Context_Regex++;

/**
 * [Implicit_Context_Regex main ] stop
 */
	
	/**
	 * [Implicit_Context_Regex process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_begin ] stop
 */
// Start of branch "row_Implicit_Context_Regex"
if(row_Implicit_Context_Regex != null) { 



	
	/**
	 * [Implicit_Context_Context main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

			//Main
			//row_Implicit_Context_Regex


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_Implicit_Context_Context = null;
                    String key_Implicit_Context_Context = null;
                      if (row_Implicit_Context_Regex.key != null){
                          tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key.trim();
                        if ((tmp_key_Implicit_Context_Context.startsWith("#") || tmp_key_Implicit_Context_Context.startsWith("!") )){
                          tmp_key_Implicit_Context_Context = null;
                        } else {
                          row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
                        }
                      }
                        if(row_Implicit_Context_Regex.key != null) {
                    key_Implicit_Context_Context =
                        row_Implicit_Context_Regex.key;
                        }
                    String value_Implicit_Context_Context = null;
                        if(row_Implicit_Context_Regex.value != null) {
                    value_Implicit_Context_Context =
                        row_Implicit_Context_Regex.value;
                        }
				
				String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;
										
						if ((key_Implicit_Context_Context != null) && ("Destination_Password".equals(key_Implicit_Context_Context)) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");

  if (tmp_key_Implicit_Context_Context != null){
  try{
        if(key_Implicit_Context_Context!=null && "url".equals(key_Implicit_Context_Context))
        {
           context.url=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "fileId".equals(key_Implicit_Context_Context))
        {

               context.fileId=Long.parseLong(value_Implicit_Context_Context);

        }

        if(key_Implicit_Context_Context!=null && "Destination_Database".equals(key_Implicit_Context_Context))
        {
           context.Destination_Database=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Destination_Login".equals(key_Implicit_Context_Context))
        {
           context.Destination_Login=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Destination_Password".equals(key_Implicit_Context_Context))
        {
           context.Destination_Password=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Destination_Port".equals(key_Implicit_Context_Context))
        {
           context.Destination_Port=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Destination_Schema".equals(key_Implicit_Context_Context))
        {
           context.Destination_Schema=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Destination_Server".equals(key_Implicit_Context_Context))
        {
           context.Destination_Server=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "logDir".equals(key_Implicit_Context_Context))
        {
           context.logDir=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "paramFile".equals(key_Implicit_Context_Context))
        {
           context.paramFile=value_Implicit_Context_Context;
        }


        if (context.getProperty(key_Implicit_Context_Context)!=null)
        {
            assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }else  {
            newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }
        if(value_Implicit_Context_Context == null){
            context.setProperty(key_Implicit_Context_Context, "");
        }else{
            context.setProperty(key_Implicit_Context_Context,value_Implicit_Context_Context);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_Implicit_Context_Context++;
    }
        //////////////////////////

 


	tos_count_Implicit_Context_Context++;

/**
 * [Implicit_Context_Context main ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_begin ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_end ] stop
 */

} // End of branch "row_Implicit_Context_Regex"




	
	/**
	 * [Implicit_Context_Regex process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_end ] stop
 */
	
	/**
	 * [Implicit_Context_Regex end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

	
	
    		}
			if(!(source_Implicit_Context_Regex instanceof java.io.InputStream)){
            	inImplicit_Context_Regex.close();
            }
            inImplicit_Context_Regex = null;
            globalMap.put("Implicit_Context_Regex_NB_LINE",nb_line_Implicit_Context_Regex);      
 

ok_Hash.put("Implicit_Context_Regex", true);
end_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());




/**
 * [Implicit_Context_Regex end ] stop
 */

	
	/**
	 * [Implicit_Context_Context end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
	
	java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
    while(enu_Implicit_Context_Context.hasMoreElements())
    {           
    	String key_Implicit_Context_Context = (String)enu_Implicit_Context_Context.nextElement();
        if(!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context) && !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context))
        {
            noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }          
    } 

    String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
    String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1, newPropertyStr_Implicit_Context_Context.length() - 1);
    
    String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
    String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1, noAssignStr_Implicit_Context_Context.length() - 1);
    
    globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
    globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

    globalMap.put("Implicit_Context_Context_NB_LINE",nb_line_Implicit_Context_Context);

	List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();
	
		parametersToEncrypt_Implicit_Context_Context.add("Destination_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_Implicit_Context_Context));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("Implicit_Context_Context", true);
end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());




/**
 * [Implicit_Context_Context end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [Implicit_Context_Regex finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex finally ] stop
 */

	
	/**
	 * [Implicit_Context_Context finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.Destination_Server+":"+context.Destination_Port+"/"+context.Destination_Database; 
		String dbUser_tPostgresqlConnection_1 = context.Destination_Login;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.Destination_Password; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1",context.Destination_Schema);

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
			
    resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
        java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "delete from attribute where file_id = '" + context.fileId + "'";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
        stmt_tPostgresqlRow_1.close();
        resourceMap.remove("stmt_tPostgresqlRow_1");
    resourceMap.put("statementClosed_tPostgresqlRow_1", true);
    resourceMap.put("finish_tPostgresqlRow_1", true);
 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());




/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tPostgresqlRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
            if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_1")) != null) {
                stmtToClose_tPostgresqlRow_1.close();
            }
    }
 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_2", false);
		start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_2";

	
		int tos_count_tPostgresqlRow_2 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_2 = null;
	String query_tPostgresqlRow_2 = "";
	boolean whetherReject_tPostgresqlRow_2 = false;
				conn_tPostgresqlRow_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
			
    resourceMap.put("conn_tPostgresqlRow_2", conn_tPostgresqlRow_2);
        java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_2", stmt_tPostgresqlRow_2);


 



/**
 * [tPostgresqlRow_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

query_tPostgresqlRow_2 = "delete from variable where file_id = '" + context.fileId + "'";
whetherReject_tPostgresqlRow_2 = false;
globalMap.put("tPostgresqlRow_2_QUERY",query_tPostgresqlRow_2);
try {
		stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_2 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tPostgresqlRow_2) {
		
	}
	

 


	tos_count_tPostgresqlRow_2++;

/**
 * [tPostgresqlRow_2 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

	
        stmt_tPostgresqlRow_2.close();
        resourceMap.remove("stmt_tPostgresqlRow_2");
    resourceMap.put("statementClosed_tPostgresqlRow_2", true);
    resourceMap.put("finish_tPostgresqlRow_2", true);
 

ok_Hash.put("tPostgresqlRow_2", true);
end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());




/**
 * [tPostgresqlRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tPostgresqlCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_2") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_2 = null;
            if ((stmtToClose_tPostgresqlRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_2")) != null) {
                stmtToClose_tPostgresqlRow_2.close();
            }
    }
 



/**
 * [tPostgresqlRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
		}finally{
			
			conn_tPostgresqlCommit_1.close();
			
	    }
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendStats_STATSStruct implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
    final static byte[] commonByteArrayLock_AODN_WAVE_DeleteMetadataFile = new byte[0];
    static byte[] commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AODN_WAVE_DeleteMetadataFile.length) {
				if(length < 1024 && commonByteArray_AODN_WAVE_DeleteMetadataFile.length == 0) {
   					commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[1024];
				} else {
   					commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AODN_WAVE_DeleteMetadataFile, 0, length);
			strReturn = new String(commonByteArray_AODN_WAVE_DeleteMetadataFile, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AODN_WAVE_DeleteMetadataFile) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_STATSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();




	
	/**
	 * [talendStats_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_FILE", false);
		start_Hash.put("talendStats_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_talendStats_FILE = 0;
		

String fileName_talendStats_FILE = "";
    fileName_talendStats_FILE = (new java.io.File(context.logDir+ "/" +"stats_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendStats_FILE = null;
    String extension_talendStats_FILE = null;
    String directory_talendStats_FILE = null;
    if((fileName_talendStats_FILE.indexOf("/") != -1)) {
        if(fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE.lastIndexOf("/")) {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        }
        directory_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendStats_FILE.lastIndexOf(".") != -1) {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        }
        directory_talendStats_FILE = "";
    }
    boolean isFileGenerated_talendStats_FILE = true;
    java.io.File filetalendStats_FILE = new java.io.File(fileName_talendStats_FILE);
    globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
        if(filetalendStats_FILE.exists()){
            isFileGenerated_talendStats_FILE = false;
        }
            int nb_line_talendStats_FILE = 0;
            int splitedFileNo_talendStats_FILE = 0;
            int currentRow_talendStats_FILE = 0;

            final String OUT_DELIM_talendStats_FILE = /** Start field talendStats_FILE:FIELDSEPARATOR */";"/** End field talendStats_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendStats_FILE = /** Start field talendStats_FILE:ROWSEPARATOR */"\n"/** End field talendStats_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendStats_FILE != null && directory_talendStats_FILE.trim().length() != 0) {
                        java.io.File dir_talendStats_FILE = new java.io.File(directory_talendStats_FILE);
                        if(!dir_talendStats_FILE.exists()) {
                            dir_talendStats_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendStats_FILE = null;

                        outtalendStats_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendStats_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

 



/**
 * [talendStats_FILE begin ] stop
 */



	
	/**
	 * [talendStats_STATS begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_STATS", false);
		start_Hash.put("talendStats_STATS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	
		int tos_count_talendStats_STATS = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
		row_talendStats_STATS.pid = pid;
		row_talendStats_STATS.root_pid = rootPid;
		row_talendStats_STATS.father_pid = fatherPid;	
    	row_talendStats_STATS.project = projectName;
    	row_talendStats_STATS.job = jobName;
    	row_talendStats_STATS.context = contextStr;
		row_talendStats_STATS.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row_talendStats_STATS.message = scm.getMessage();
		row_talendStats_STATS.duration = scm.getDuration();
		row_talendStats_STATS.moment = scm.getMoment();
		row_talendStats_STATS.message_type = scm.getMessageType();
		row_talendStats_STATS.job_version = scm.getJobVersion();
		row_talendStats_STATS.job_repository_id = scm.getJobId();
		row_talendStats_STATS.system_pid = scm.getSystemPid();

 



/**
 * [talendStats_STATS begin ] stop
 */
	
	/**
	 * [talendStats_STATS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 


	tos_count_talendStats_STATS++;

/**
 * [talendStats_STATS main ] stop
 */
	
	/**
	 * [talendStats_STATS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_begin ] stop
 */

	
	/**
	 * [talendStats_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

			//Main
			//row_talendStats_STATS


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_talendStats_FILE = new StringBuilder();
                            if(row_talendStats_STATS.moment != null) {
                        sb_talendStats_FILE.append(
                            FormatterUtils.format_Date(row_talendStats_STATS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.father_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.father_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.root_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.root_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.system_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.system_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.project != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.project
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_repository_id != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_repository_id
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_version != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_version
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.context != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.context
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.origin != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.origin
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message_type != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message_type
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.duration != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.duration
                        );
                            }
                    sb_talendStats_FILE.append(OUT_DELIM_ROWSEP_talendStats_FILE);


                    nb_line_talendStats_FILE++;
                    resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

                        outtalendStats_FILE.write(sb_talendStats_FILE.toString());




 


	tos_count_talendStats_FILE++;

/**
 * [talendStats_FILE main ] stop
 */
	
	/**
	 * [talendStats_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_begin ] stop
 */
	
	/**
	 * [talendStats_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_end ] stop
 */



	
	/**
	 * [talendStats_STATS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_end ] stop
 */
	
	/**
	 * [talendStats_STATS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

	}


 

ok_Hash.put("talendStats_STATS", true);
end_Hash.put("talendStats_STATS", System.currentTimeMillis());




/**
 * [talendStats_STATS end ] stop
 */

	
	/**
	 * [talendStats_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	



		
			
					if(outtalendStats_FILE!=null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}
				
				globalMap.put("talendStats_FILE_NB_LINE",nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
			
		
		
		resourceMap.put("finish_talendStats_FILE", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("talendStats_FILE", true);
end_Hash.put("talendStats_FILE", System.currentTimeMillis());




/**
 * [talendStats_FILE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendStats_STATS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS finally ] stop
 */

	
	/**
	 * [talendStats_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	


		if(resourceMap.get("finish_talendStats_FILE") == null){ 
			
				
						java.io.Writer outtalendStats_FILE = (java.io.Writer)resourceMap.get("out_talendStats_FILE");
						if(outtalendStats_FILE!=null) {
							outtalendStats_FILE.flush();
							outtalendStats_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendStats_FILE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_AODN_WAVE_DeleteMetadataFile = new byte[0];
    static byte[] commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AODN_WAVE_DeleteMetadataFile.length) {
				if(length < 1024 && commonByteArray_AODN_WAVE_DeleteMetadataFile.length == 0) {
   					commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[1024];
				} else {
   					commonByteArray_AODN_WAVE_DeleteMetadataFile = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AODN_WAVE_DeleteMetadataFile, 0, length);
			strReturn = new String(commonByteArray_AODN_WAVE_DeleteMetadataFile, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AODN_WAVE_DeleteMetadataFile) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_FILE", false);
		start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_talendLogs_FILE = 0;
		

String fileName_talendLogs_FILE = "";
    fileName_talendLogs_FILE = (new java.io.File(context.logDir+ "/" +"logs_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendLogs_FILE = null;
    String extension_talendLogs_FILE = null;
    String directory_talendLogs_FILE = null;
    if((fileName_talendLogs_FILE.indexOf("/") != -1)) {
        if(fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        }
        directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        }
        directory_talendLogs_FILE = "";
    }
    boolean isFileGenerated_talendLogs_FILE = true;
    java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
    globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
        if(filetalendLogs_FILE.exists()){
            isFileGenerated_talendLogs_FILE = false;
        }
            int nb_line_talendLogs_FILE = 0;
            int splitedFileNo_talendLogs_FILE = 0;
            int currentRow_talendLogs_FILE = 0;

            final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */";"/** End field talendLogs_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */"\n"/** End field talendLogs_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
                        java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
                        if(!dir_talendLogs_FILE.exists()) {
                            dir_talendLogs_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendLogs_FILE = null;

                        outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendLogs_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

 



/**
 * [talendLogs_FILE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

			//Main
			//row_talendLogs_LOGS


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_talendLogs_FILE = new StringBuilder();
                            if(row_talendLogs_LOGS.moment != null) {
                        sb_talendLogs_FILE.append(
                            FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.root_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.root_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.father_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.father_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.project != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.project
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.job != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.job
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.context != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.context
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.priority != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.priority
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.type != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.type
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.origin != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.origin
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.message != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.message
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.code != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.code
                        );
                            }
                    sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);


                    nb_line_talendLogs_FILE++;
                    resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

                        outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());




 


	tos_count_talendLogs_FILE++;

/**
 * [talendLogs_FILE main ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	



		
			
					if(outtalendLogs_FILE!=null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
				
				globalMap.put("talendLogs_FILE_NB_LINE",nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
			
		
		
		resourceMap.put("finish_talendLogs_FILE", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("talendLogs_FILE", true);
end_Hash.put("talendLogs_FILE", System.currentTimeMillis());




/**
 * [talendLogs_FILE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	


		if(resourceMap.get("finish_talendLogs_FILE") == null){ 
			
				
						java.io.Writer outtalendLogs_FILE = (java.io.Writer)resourceMap.get("out_talendLogs_FILE");
						if(outtalendLogs_FILE!=null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendLogs_FILE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DeleteMetadataFile DeleteMetadataFileClass = new DeleteMetadataFile();

        int exitCode = DeleteMetadataFileClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DeleteMetadataFile.class.getClassLoader().getResourceAsStream("aodn_wave/deletemetadatafile_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DeleteMetadataFile.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("url", "id_String");
				
                context.url=(String) context.getProperty("url");
				    context.setContextType("fileId", "id_Long");
				
             try{
                 context.fileId=routines.system.ParserUtils.parseTo_Long (context.getProperty("fileId"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "fileId", e.getMessage()));
                 context.fileId=null;
              }
				    context.setContextType("Destination_Database", "id_String");
				
                context.Destination_Database=(String) context.getProperty("Destination_Database");
				    context.setContextType("Destination_Login", "id_String");
				
                context.Destination_Login=(String) context.getProperty("Destination_Login");
				    context.setContextType("Destination_Password", "id_Password");
				
            		String pwd_Destination_Password_value = context.getProperty("Destination_Password");
            		context.Destination_Password = null;
            		if(pwd_Destination_Password_value!=null) {
            			if(context_param.containsKey("Destination_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Destination_Password = pwd_Destination_Password_value;
            			} else if (!pwd_Destination_Password_value.isEmpty()) {
            				try {
            					context.Destination_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Destination_Password_value);
            					context.put("Destination_Password",context.Destination_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Destination_Port", "id_String");
				
                context.Destination_Port=(String) context.getProperty("Destination_Port");
				    context.setContextType("Destination_Schema", "id_String");
				
                context.Destination_Schema=(String) context.getProperty("Destination_Schema");
				    context.setContextType("Destination_Server", "id_String");
				
                context.Destination_Server=(String) context.getProperty("Destination_Server");
				    context.setContextType("logDir", "id_String");
				
                context.logDir=(String) context.getProperty("logDir");
				    context.setContextType("paramFile", "id_String");
				
                context.paramFile=(String) context.getProperty("paramFile");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("url")) {
                context.url = (String) parentContextMap.get("url");
            }if (parentContextMap.containsKey("fileId")) {
                context.fileId = (Long) parentContextMap.get("fileId");
            }if (parentContextMap.containsKey("Destination_Database")) {
                context.Destination_Database = (String) parentContextMap.get("Destination_Database");
            }if (parentContextMap.containsKey("Destination_Login")) {
                context.Destination_Login = (String) parentContextMap.get("Destination_Login");
            }if (parentContextMap.containsKey("Destination_Password")) {
                context.Destination_Password = (java.lang.String) parentContextMap.get("Destination_Password");
            }if (parentContextMap.containsKey("Destination_Port")) {
                context.Destination_Port = (String) parentContextMap.get("Destination_Port");
            }if (parentContextMap.containsKey("Destination_Schema")) {
                context.Destination_Schema = (String) parentContextMap.get("Destination_Schema");
            }if (parentContextMap.containsKey("Destination_Server")) {
                context.Destination_Server = (String) parentContextMap.get("Destination_Server");
            }if (parentContextMap.containsKey("logDir")) {
                context.logDir = (String) parentContextMap.get("logDir");
            }if (parentContextMap.containsKey("paramFile")) {
                context.paramFile = (String) parentContextMap.get("paramFile");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Destination_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        talendStats_STATS.addMessage("begin");



try {
errorCode = null;Implicit_Context_RegexProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_Implicit_Context_Regex) {
globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

e_Implicit_Context_Regex.printStackTrace();

}

this.globalResumeTicket = true;//to run tPreJob



        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_1) {
globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DeleteMetadataFile");
        }
        talendStats_STATS.addMessage(status==""?"end":status, (end-startTime));
        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     114277 characters generated by Talend Open Studio for Data Integration 
 *     on the June 8, 2022 4:35:03 AM UTC
 ************************************************************************************************/